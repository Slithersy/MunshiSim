#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_player.hps"
#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"
#include "helpers/helper_custom.hps"
#include "helpers/helper_areas.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/
 
//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
	
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
        Lamp_SetLit("Special_SpotLight_*", false, false);
        Lamp_SetLit("SideLamp_*", false, false);
        Lamp_SetLit("lamp_roof_large_noeffect_*", false, false);
        Light_SetVisible("Special_Spot_*", false);
        Light_SetVisible("Special_Point_*", false);
        Light_SetVisible("BoxLight_Biggy_*", false);
        Light_SetVisible("RailPoint_*", false);
        Light_SetVisible("SidePoint_*", false);
        Light_SetVisible("SideBox_*", false);
        Light_SetBrightness("BoxLight_Pipes", 0.2f); //1
        Light_SetVisible("HatchLamp_Point", false);
        ParticleSystem_SetVisible("WaterParticle_*", false);
        
        Entity_SetActive("BlockBoxSpecial_2", false);
        Entity_SetActive("DistortionSpecial_2", false);
        Entity_SetActive("BlockBoxSpecial_3", false);
        Entity_SetActive("DistortionSpecial_3", false);
        Entity_SetActive("robothead_real", false);
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{
        MovePedestrians();
        Seq_Truck("");
        
        Player_SetFlashlightDisabled(true);
        Player_SetActive(true);
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// The player has died.
	void OnPlayerKilled(int alRecentDeaths, const tString&in asSource)
	{
	}
    
	//-------------------------------------------------------

	////////////////////////////
	// Update
	void Update(float afTimeStep)
	{
		tString sSimOver = GetSimEnd();
		array<tString> vSimOver = cString_Split(sSimOver, "_");
		if (vSimOver.size()>0)
		{
			bool bIsOver = cString_ToBool(vSimOver[0], false);
			tString sPathName = vSimOver[1];
            tString sFullName = vSimOver[1]+vSimOver[2]+"_"+vSimOver[3];
			
			if (bIsOver)
			{
				cLux_AddDebugMessage("Text over - "+sFullName);
				
				if (sPathName=="InteractCamera") {
                    Player_SetActive(true);
                } else if (sFullName=="RobotGirlEncounter3_1") {
                    Entity_SetActive("BlockBoxSpecial_3", false);
                    Entity_SetActive("DistortionSpecial_3", false);
                    bCanRun = true;
                    if (lIsInTryToRun==1) {
                        Trigger_TryToRun("", "", 1);
                    }
                }
            }
        }
        
		tString sSimUpdate = GetSimUpdate();
		array<tString> vSimUpdate = cString_Split(sSimUpdate, "_");
		if (vSimUpdate.size()>0)
		{
			bool bUpdated = cString_ToBool(vSimUpdate[0], false);
			tString sPathName = vSimUpdate[1];
            tString sFullName = vSimUpdate[1]+vSimUpdate[2]+"_"+vSimUpdate[3];

            if (bUpdated) {
                if (sFullName=="RobotGirlEncounter1_2") {
                    Entity_SetActive("robothead_real", false);
                }
            }
        }
        
        if (Entity_IsActive("robothead_real")) {
            iLuxEntity@ pRobotGirl = cLux_GetCurrentMap().GetEntityByName("robothead_real", eLuxEntityType_LastEnum, "");
            pRobotGirl.FadeEffectBaseColor(cColor(1.5f, 1.0f), 1.0f);
        }
    }

	//-------------------------------------------------------
    
	void MovePedestrians()
	{
		Pathfinder_Track_Add("subway_businessman_1", "PathNodeArea_1");
		Pathfinder_Track_Add("subway_businessman_1", "PathNodeArea_8");
		Pathfinder_Track_Add("subway_businessman_1", "PathNodeArea_11");
        Pathfinder_Track_Add("subway_businessman_1", "PathNodeArea_22");
        Pathfinder_Track_Add("subway_businessman_1", "PathNodeArea_26");
        Pathfinder_Track_Add("subway_businessman_1", "PathNodeArea_41");
		Pathfinder_Track_Add("subway_businessman_1", "PathNodeArea_47",5.0f,10.0f);
		Pathfinder_Track_Start("subway_businessman_1",true);
	}
    
	cSequenceStatesData mSeqTruck;
	void Seq_Truck(const tString& in asName="")
	{
		Sequence_Begin("Seq_Truck", mSeqTruck);
		
		if (Sequence_DoStepAndPause())
		{
			Prop_MoveLinearTo("Truck","Truck_RESET",70,70,0.2f,true,"OnTruckReachedTarget");
			Prop_AlignRotation("Truck","Truck_RESET",9,9,1.0f,true,"");
        }
		else if (Sequence_DoStepAndPause())
		{
			Prop_MoveLinearTo("Truck","Truck_1",7,7,0.2f,false,"OnTruckReachedTarget");
			Prop_AlignRotation("Truck","Truck_1",0.5,1,1.0f,false,"");
		}
		else if (Sequence_DoStepAndPause())
		{
			Prop_MoveLinearTo("Truck","Truck_2",7,7,0.2f,false,"OnTruckReachedTarget");
			Prop_AlignRotation("Truck","Truck_2",0.5,1,1.0f,false,"");
		}
		else if (Sequence_DoStepAndPause())
		{
			Prop_MoveLinearTo("Truck","Truck_3",7,7,0.2f,false,"OnTruckReachedTarget");
			Prop_AlignRotation("Truck","Truck_3",0.5,1,1.0f,false,"");
		}
		else if (Sequence_DoStepAndPause())
		{
			Prop_MoveLinearTo("Truck","Truck_4",7,7,0.2f,false,"OnTruckReachedTarget");
			Prop_AlignRotation("Truck","Truck_4",0.5,1,1.0f,false,"");
		}
		else if (Sequence_DoStepAndPause())
		{
			Prop_MoveLinearTo("Truck","Truck_5",7,7,0.2f,false,"OnTruckReachedTarget");
			Prop_AlignRotation("Truck","Truck_5",0.5,1,1.0f,false,"");
		}
		else if (Sequence_DoStepAndPause())
		{
			Prop_MoveLinearTo("Truck","Truck_6",7,7,0.2f,false,"OnTruckReachedTarget");
			Prop_AlignRotation("Truck","Truck_6",0.5,1,1.0f,false,"");
		}
		else if (Sequence_DoStepAndPause())
		{
			Prop_MoveLinearTo("Truck","Truck_7",7,7,0.2f,false,"OnTruckReachedTarget");
			Prop_AlignRotation("Truck","Truck_7",0.5,1,1.0f,false,"");
		}
		else if (Sequence_DoStepAndPause())
		{
			Prop_MoveLinearTo("Truck","Truck_8",7,7,0.2f,false,"OnTruckReachedTargetFinal");
			Prop_AlignRotation("Truck","Truck_8",0.5,1,1.0f,false,"");
		}
		
		Sequence_End();
	}
	
	//-------------------------------------------------------
	
	void OnTruckReachedTarget(const tString&in asName)
	{
		SequenceStates_Resume("Seq_Truck");
	}
    
	void OnTruckReachedTargetFinal(const tString&in asName)
	{
		Map_AddTimer("RedoTrucks", 10.0f, "RedoTrucks");
	}
    
    void RedoTrucks(const tString&in asTimer) 
    {
        Seq_Truck("");
        SequenceStates_Resume("Seq_Truck");
    }
    

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if(abPressed==false) return;
		iLuxEntity@ pRobotGirl = cLux_GetCurrentMap().GetEntityByName("robothead_real", eLuxEntityType_LastEnum, "");
        
		if(alAction == eAction_Test1)
		{
            SlideDoor_SetOpenAmount("Keypad1_Door", 1.0f, true);
            MakeMessage("RobotGirlEncounter",1,1);
		} else if (alAction == eAction_Test2) {
            CameraAnimRunFall("", 1);
        } else if (alAction == eAction_Test3) {
        }
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	/*Put any variables that are used in more than one scene here.*/
 
	//-------------------------------------------------------
 
	/*Put any functions that are used in more than one scene here.*/
 
	//-------------------------------------------------------
 
	//} END MAIN FUNCTIONS
    
    bool Trigger_WAUCalls(const tString &in asParent, const tString &in asChild, int alState)
    {
        WauCalls("WAUCallEnterance");
        return false;
    }
    
    bool Trigger_StopWAUCalls(const tString &in asParent, const tString &in asChild, int alState)
    {
        StopWauCalls();
        return false;
    }
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE KEYPAD *KEYPAD SECTIONS*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
	//-------------------------------------------------------
    float mfKeypadPulse = 0;
	bool mbUsingKeypad = false;
	tString msPadCode = "";
    tString gsKeypadCode = "2503";
    
	void SetKeypadMaterial(const tString &in asEntity, const tString &in asMaterial)
	{
		iLuxEntity@ pEntity = cLux_GetCurrentMap().GetEntityByName(asEntity, eLuxEntityType_LastEnum, "");
		cMaterial@ pMaterial = cResources_CreateMaterial(asMaterial);

		pEntity.GetMeshEntity().GetSubMeshEntity(1).SetCustomMaterial(pMaterial, false);
	}
	
	//-------------------------------------------------------
	
	void Keypad_EnterDigit(const tString &in asDigit, const tString &in asEntity)
	{
        if (asEntity=="Keypad1")
            gsKeypadCode = "2503";
        else if (asEntity=="Keypad2") 
            gsKeypadCode = "2501";
        else gsKeypadCode = "";
		
		///////////////////////
		// Append digit to code
		msPadCode = msPadCode + asDigit; 
		if (msPadCode != cString_Sub(gsKeypadCode, 0, msPadCode.length()))
		{
			tString sFirstCodeChar = cString_Sub(gsKeypadCode, 0, 1);
			if (asDigit==sFirstCodeChar)
				msPadCode = asDigit;
			else
				msPadCode = "";
		}
		
		///////////////////////
		// Keypad sound
		Sound_CreateAtEntity("EnterDigit","Entities_Urban/tech/keypad/keypad_press_01",asEntity,0.0,false);
		
		//////////////////////
		// Check complete code
		if (msPadCode.length() < gsKeypadCode.length())
		{
			Entity_SetEffectsActive(ImGui_GetName(), false, false);
			Map_AddTimer(asEntity, 0.1, "Timer_KeypadEffectsOn");
			Light_FadeTo(asEntity+"_PointLight_1",0,0.1,0);
			return;
		}
        
        if ((GetWauCalls()==1) && (asEntity=="Keypad1") && (msPadCode=="2501")) {
            MakeMessage("SwearRightCode");
        }
		
		/////////////////////
		// Unlock door on correct code
		if (msPadCode==gsKeypadCode)
		{
			// Change to green light
			SetKeypadMaterial(asEntity,"security_keypad_greenlamp");
			Light_FadeTo(asEntity+"_PointLight_1",cColor_Green,0.1,0);
			
			// Deactivate gui and return player to normal
			Terminal_SetGuiActive(ImGui_GetName(),false);	
			Player_ChangeStateToNormal();
            
            if (asEntity=="Keypad1")
                SlideDoor_SetOpenAmount(asEntity+"_Door", 1.0f, false);
            else SwingDoor_SetLocked(asEntity+"_Door",false,true);
			// Sounds
			Sound_CreateAtEntity("KeypdOpen","Entities_Urban/tech/keypad/keypad_correct",asEntity,0.0,false);
            Sound_CreateAtEntity("DoorUnlockSound","Entities_Urban/door/wooden_door_metal_latch_medium_room/interact_unlock",asEntity+"_Door",0.0,false);
		}
	}
    
	/////////////////////////////////////////////////////////
	// TERMINAL KEYPAD
	/////////////////////////////////////////////////////////
	
	//-------------------------------------------------------
	
	void security_keypad_1_OnGui(const tString&in asEntityName, float afTimeStep)
	{
		////////////////////////
		// Buttons are transparent
		cImGuiButtonData button;
		button.mvDefaultSize = cVector2f(10,10);
		button.mColorBase = cColor(0.3,0.3,0.3,0);
		button.mbUseInFocusGfx = mbUsingKeypad;
		button.mGfxInFocus.SetFile("urban/keypad/keypad_Selected");
	
		
		////////////////////////
		// Position buttonspath
		bool bNumPad1 = ImGui_DoButtonExt("ButtonKeypad1","",button, ImGui_NrmPosGroup(cVector3f(0.27, 0.33, 0)), ImGui_NrmSizeGroup(cVector2f(0.07, 0.07)));
		bool bNumPad2 = ImGui_DoButtonExt("ButtonKeypad2","",button, ImGui_NrmPosGroup(cVector3f(0.38, 0.33, 0)), ImGui_NrmSizeGroup(cVector2f(0.07, 0.07)));
		bool bNumPad3 = ImGui_DoButtonExt("ButtonKeypad3","",button, ImGui_NrmPosGroup(cVector3f(0.48, 0.33, 0)), ImGui_NrmSizeGroup(cVector2f(0.07, 0.07)));
		bool bNumPad4 = ImGui_DoButtonExt("ButtonKeypad4","",button, ImGui_NrmPosGroup(cVector3f(0.27, 0.43, 0)), ImGui_NrmSizeGroup(cVector2f(0.07, 0.07)));
		bool bNumPad5 = ImGui_DoButtonExt("ButtonKeypad5","",button, ImGui_NrmPosGroup(cVector3f(0.38, 0.43, 0)), ImGui_NrmSizeGroup(cVector2f(0.07, 0.07)));
		bool bNumPad6 = ImGui_DoButtonExt("ButtonKeypad6","",button, ImGui_NrmPosGroup(cVector3f(0.48, 0.43, 0)), ImGui_NrmSizeGroup(cVector2f(0.07, 0.07)));
		bool bNumPad7 = ImGui_DoButtonExt("ButtonKeypad7","",button, ImGui_NrmPosGroup(cVector3f(0.27, 0.53, 0)), ImGui_NrmSizeGroup(cVector2f(0.07, 0.07)));
		bool bNumPad8 = ImGui_DoButtonExt("ButtonKeypad8","",button, ImGui_NrmPosGroup(cVector3f(0.38, 0.53, 0)), ImGui_NrmSizeGroup(cVector2f(0.07, 0.07)));
		bool bNumPad9 = ImGui_DoButtonExt("ButtonKeypad9","",button, ImGui_NrmPosGroup(cVector3f(0.48, 0.53, 0)), ImGui_NrmSizeGroup(cVector2f(0.07, 0.07)));
		bool bNumPadAst = ImGui_DoButtonExt("ButtonKeypadA","",button, ImGui_NrmPosGroup(cVector3f(0.27, 0.63, 0)), ImGui_NrmSizeGroup(cVector2f(0.07, 0.07)));
		bool bNumPad0 = ImGui_DoButtonExt("ButtonKeypad0","",button, ImGui_NrmPosGroup(cVector3f(0.38, 0.63, 0)), ImGui_NrmSizeGroup(cVector2f(0.07, 0.07)));
		bool bNumPadHash = ImGui_DoButtonExt("ButtonKeypadH","",button, ImGui_NrmPosGroup(cVector3f(0.48, 0.63, 0)), ImGui_NrmSizeGroup(cVector2f(0.07, 0.07)));
		
		////////////////////////
		// Enter key code
		if (bNumPad1) 	{ Keypad_EnterDigit("1", asEntityName); }
		if (bNumPad2) 	{ Keypad_EnterDigit("2", asEntityName); }
		if (bNumPad3) 	{ Keypad_EnterDigit("3", asEntityName); }
		if (bNumPad4) 	{ Keypad_EnterDigit("4", asEntityName); }
		if (bNumPad5) 	{ Keypad_EnterDigit("5", asEntityName); }
		if (bNumPad6) 	{ Keypad_EnterDigit("6", asEntityName); }
		if (bNumPad7) 	{ Keypad_EnterDigit("7", asEntityName); }
		if (bNumPad8) 	{ Keypad_EnterDigit("8", asEntityName); }
		if (bNumPad9) 	{ Keypad_EnterDigit("9", asEntityName); }
		if (bNumPad0) 	{ Keypad_EnterDigit("0", asEntityName); }
		if (bNumPadAst)	{ Keypad_EnterDigit("*", asEntityName); }
		if (bNumPadHash){ Keypad_EnterDigit("#", asEntityName); }
		
	}
	
	//-------------------------------------------------------
	
	void security_keypad_1_GuiEnter(const tString&in asEntityName)
	{
		cLux_AddDebugMessage("Entered keypad GUI");
		msPadCode = "";
		mbUsingKeypad = true;
	}
	
	//-------------------------------------------------------
	
	void security_keypad_1_GuiLeave(const tString&in asEntityName)
	{
		cLux_AddDebugMessage("Left keypad GUI");
		msPadCode = "";
		mbUsingKeypad = false;
	}
    
	void Timer_KeypadEffectsOn(const tString &in asTimer)
	{
		Entity_SetEffectsActive(asTimer, true, false);
		Light_FadeTo(asTimer+"_PointLight_1",cColor_Red,0.1,0);
	}
    
    
    ////////////////////////////////////////////
    /////////////////NOT KEYPAD/////////////////
    ////////////////////////////////////////////
    bool Trigger_StopLight(const tString &in asParent, const tString &in asChild, int alState)
    {
        LensFlare_SetVisible("LensFlare_*", false);
        Entity_SetActive("BlockBoxSpecial_2", true);
        Entity_SetActive("DistortionSpecial_2", true);
        
        return false;
    }
    
    void OnFlushLeverStateChange(const tString &in asEntity, int alState)
    {
        if (alState!=1)
            return;

        TurnOnPowerSequence("");
    }
    
	cSequenceStatesData mTurnOnPowerSequence;
	void TurnOnPowerSequence(const tString &in asName)
	{
        iLuxEntity@ pRobotGirl = cLux_GetCurrentMap().GetEntityByName("robothead_real", eLuxEntityType_LastEnum, "");
        
		Sequence_Begin("TurnOnPowerSequence", mTurnOnPowerSequence);

		if (Sequence_DoStepAndWait(4.0f))
		{
            Sound_PlayGui("01_01_upsilon_awake/sfx/wake_up/wake_up_event", 1.0f, eSoundEntryType_Gui);
            Sound_CreateAtEntity("PowerOn", "01_01_upsilon_awake/sfx/wake_up/lights_on", "Player", 0, false);
            Sound_CreateAtEntity("Siren", "02_07_theta_exit_a/SFX/flood_sequence/flush_valve_siren_loop", "HatchLamp_5", 0.7f, false);
            Sound_CreateAtEntity("Siren2", "02_07_theta_exit_a/SFX/flood_sequence/flush_valve_terminal_alarm", "HatchLamp_5", 0.7f, false);
            Sound_CreateAtEntity("Pumpy", "level_amb_shared_interior/amb/object/pump_pipe", "power_generator_flesher_1", 0.7f, false);
            
            Lamp_SetLit("HatchLamp_5", true, true);
            Light_SetVisible("HatchLamp_Point", true);
            Entity_SetActive("HatchLamp_Rotate", true);
            Prop_RotateToSpeed("HatchLamp_Rotate", 8.0f, 8.0f, false, "HatchLamp_5");
            Light_FadeTo("Keypad1_PointLight_4", cColor_Red, -1.0f, 0);

            Light_FadeTo("BoxLight_Pipes", cColor(1.0f,0.8f,0.8f), -1.0f, 1.0f);
            Light_SetFlickerActive("BoxLight_Pipes", true);
            Light_SetBrightness("BoxLight_Pipes", 1.0f);
           
            SlideDoor_SetOpenAmount("Keypad1_Door", 0.0f, false);
            SlideDoor_SetOpenAmount("Keypad1_Door_1", 0.0f, false);
            
            Entity_SetActive("BlockBoxSpecial_3", true);
            Entity_SetActive("DistortionSpecial_3", true);
            Entity_SetActive("Trigger_NotGoingPipes", false);
            Entity_SetActive("BlockBoxSpecial_1", false);
            Entity_SetActive("DistortionSpecial_1", false);
        } else if (Sequence_DoStepAndWait(1.0f)) {
            Sound_CreateAtEntity("Door1Closed", "Entities_Station/doors/elevator_panel/elevator_panel_lock", "Keypad1_Door_1", 1.0f, false);
        } else if (Sequence_DoStepAndWait(1.3f)) { 
            Sound_CreateAtEntity("Door1Closed", "Entities_Station/doors/elevator_panel/elevator_panel_lock", "Keypad1_Door", 0.6f, false);  
        } else if (Sequence_DoStepAndWait(2.7f)) {
            Lamp_SetLit("Special_SpotLight_*", true, true);
            Lamp_SetLit("SideLamp_*", true, true);
            Lamp_SetLit("lamp_roof_large_noeffect_*", true, true);
            Light_SetVisible("Special_Spot_*", true);
            Light_SetVisible("Special_Point_*", true);
            Light_SetVisible("BoxLight_Biggy_*", true);
            Light_SetVisible("RailPoint_*", true);
            Light_SetVisible("SidePoint_*", true);
            Light_SetVisible("SideBox_*", true);
            ParticleSystem_SetVisible("WaterParticle_*", true);
            
            Sound_CreateAtEntity("DoorFunctional", "Entities_Station/doors/upsilon/horizontal_auto/close_end", "Keypad1_Door_1", 1.0f, false);
            Sound_CreateAtEntity("OpenValves", "02_07_theta_exit_a/SFX/flood_sequence/flush_door_open_sweet", "RedLamp_4", 1.0f, false);
            Sound_CreateAtEntity("StartPumpin", "02_07_theta_exit_a/SFX/flood_sequence/flush_valve_drain_loop", "Generator_Habitat_4", 0.5f, false);
            
            Sound_StopGui("01_01_upsilon_awake/sfx/wake_up/wake_up_event", 0.5f, false);
            
        } else if (Sequence_DoStepAndWait(8.0f)) {
            Sound_CreateAtEntity("WaterFlow", "02_07_theta_exit_a/SFX/flood_sequence/flush_valve_open", "RedLamp_4", 1.0f, false);
            
            Entity_SetActive("robothead_real", true);
            MoveRobotGirl();
            pRobotGirl.PlayAnimation("walk_agressive", 0.3f, true, true);
            
        } else if (Sequence_DoStepAndWait(5.0f)) {
            Light_SetFlickerActive("BoxLight_Pipes", false);
            Light_FadeTo("BoxLight_Pipes", cColor(1.0f,0.8f,0.8f), 1.0f, 0);
            Light_SetBrightness("BoxLight_Pipes", 1.0f);
            
            Sound_CreateAtEntity("Knock", "01_02_upsilon_inside_02/sfx/construct_smashes_stairs_door", "Keypad1_Door", 1.0f, false);
            
        } else if (Sequence_DoStepAndWait(3.0f)) {
            Sound_Stop("Siren", 0.5f);
            Sound_Stop("Siren2", 0.5f);
            Lamp_SetLit("HatchLamp_5", false, true);
            Light_SetVisible("HatchLamp_Point", false);
            Entity_SetActive("HatchLamp_Rotate", false);
            SlideDoor_SetOpenAmount("Keypad1_Door", 1.0f, false);
            Light_FadeTo("Keypad1_PointLight_4", cColor_Green, -1.0f, 0);
            
            //Entity_SetActive("Blockbox_Door", false);
        } else if (Sequence_DoStepAndWait(3.0f)) {
            pRobotGirl.PlayAnimation("awakens", 0.3f, false, true, "Robot_AfterScream");
            MakeMessage("RobotGirlEncounter", 1, 1);
        }
        
        Sequence_End();
    }
    
    void CameraZoom_OnPlayerInteract(const tString &in asEntity)
    {
        Player_SetActive(false);
        MakeMessage("InteractCamera");
    }
    
	void MoveRobotGirl()
	{
		Pathfinder_Track_Add("robothead_real", "PathNodeArea_60");
		Pathfinder_Track_Add("robothead_real", "PathNodeArea_61");
		Pathfinder_Track_Add("robothead_real", "PathNodeArea_62");
        Pathfinder_Track_Add("robothead_real", "PathNodeArea_63");
        Pathfinder_Track_Add("robothead_real", "PathNodeArea_64");
        Pathfinder_Track_Add("robothead_real", "PathNodeArea_65");
		Pathfinder_Track_Add("robothead_real", "PathNodeArea_66");
        Pathfinder_Track_Add("robothead_real", "PathNodeArea_67");
        Pathfinder_Track_Add("robothead_real", "PathNodeArea_68", 0, 0, "idle", true);
		Pathfinder_Track_Start("robothead_real", false);
        
        Map_AddTimer("RobotGirl_WaterSteps", 0.5f, "Timer_WaterSteps");
	}
    
    int lAmountOfSteps = 0;
	void Timer_WaterSteps(const tString &in asTimer)
	{
        Sound_CreateAtEntity("WaterSteps", "Player/footsteps/default/water", "robothead_real", 0, false);
        
        lAmountOfSteps++;
        if (lAmountOfSteps<=5)
            Map_AddTimer("RobotGirl_WaterSteps", 1.0f, "Timer_WaterSteps");
	}
    
    void Robot_AfterScream(const tString &in asEntityName, const tString &in asAnimName)
    {
        iLuxEntity@ pRobotGirl = cLux_GetCurrentMap().GetEntityByName("robothead_real", eLuxEntityType_LastEnum, "");
        pRobotGirl.PlayAnimation("idle", 0.3f, true, true);
    }
    
    int lIsInTryToRun = -1;
    bool bCanRun = false;
    bool Trigger_TryToRun(const tString &in asParent, const tString &in asChild, int alState)
    {
        if (alState==1&&bCanRun) {
            lIsInTryToRun = -1;
            bCanRun = false;
            ChangeMunshiAnim("RobotGirl_Encounter_3");
            MakeCameraAnimation("CameraAnimRun");
            return false;
        }
        
        lIsInTryToRun = alState;
        return true;
    }
    
    bool SimonSlipSound(const tString &in asEntity, int alDirection)
    {
        Sound_CreateAtEntity("PlayerHurt2", "Player/landing/damage", "Player", 0, false);
        return false;
    }
    
    bool CameraAnimRunFall(const tString &in asEntity, int alDirection)
    {
        Sound_CreateAtEntity("PlayerHurt", "Player/reaction/air/hurt", "Player", 0, false);
        Sound_CreateAtEntity("PlayerHurt2", "Player/landing/damage", "Player", 0, false);
        
        Sound_CreateAtEntity("ScissorsSound", "NPC_Creatures/Foley/InWorld/Robothead/dormant_awaken_stage01", "RobotHead_RunFall_1", 0, false);
        Sound_CreateAtEntity("SoundVoice", "NPC_Creatures/Vocalisations/InWorld/Robothead/rambling", "RobotHead_RunFall_1", 0, false);
        Sound_CreateAtEntity("HitWater1", "physics/water/water/impact", "RobotHead_RunFall_1", 0, false);
        
        ChangeMunshiAnim("RobotHead_RunFall_1");
        MakeCameraAnimation("CameraAnimRunFall", false, false);
        Prop_MoveLinearTo("RobotGirlFallBlock_1","RobotGirlFallBlock_2",1,3,0.2f,false,"");
        Prop_AlignRotation("RobotGirlFallBlock_1","RobotGirlFallBlock_2",1,3,0,false,"AnimRanFell");
        return false;
    }

    void AnimRanFell(const tString &in asPropName)
    {
        cPlayMusic("music/HuniePop/hot_springs.mp3", 0.4f, 10.0f, true);
        Sound_CreateAtEntity("HitWater", "Player/liquid/enter_high", "RobotHead_RunFall_1", 0, false);
        ChangeMunshiAnim("RobotHead_RunFall_2");
        MakeMessage("RobotGirlEncounterRun", 1, 1);
    }
	 
    //} END SCENE X
 
 
    array<tString> vAlreadyCalled;
    bool Trigger_DoMessage(const tString &in asParent, const tString &in asChild, int alState)
    {
        array<tString> vMessage = cString_Split(asChild, "_");
        if (vMessage.size()>1)
        {
            tString Message = vMessage[1];
            tString RealMessage = "";
            array<tString> vRealMessage = cString_Split(GetCurrentMessage(), "_");
            if (vRealMessage.size()>1)
                RealMessage = vRealMessage[0];
            
            if ((RealMessage == "") && (vAlreadyCalled.find(Message) < 0)) {
                MakeMessage(Message);
                vAlreadyCalled.insertLast(Message);
            }
        }
        
        return true;
    }
    
    bool Trigger_RemoveMessage(const tString &in asParent, const tString &in asChild, int alState)
    {
        array<tString> vMessage = cString_Split(asChild, "_");
        if (vMessage.size()>1)
        {
            tString Message = vMessage[1];
            tString RealMessage = "";
            array<tString> vRealMessage = cString_Split(GetCurrentMessage(), "_");
            if (vRealMessage.size()>1)
                RealMessage = vRealMessage[0];
            
            if (RealMessage == Message)
                StopMessage();
        }

        
        return true;
    }
}