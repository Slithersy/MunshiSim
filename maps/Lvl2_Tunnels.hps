#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/
 
//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
	
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{
        MovePedestrians();
        Seq_Truck("");
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// The player has died.
	void OnPlayerKilled(int alRecentDeaths, const tString&in asSource)
	{
	}

	//-------------------------------------------------------
    
	void MovePedestrians()
	{
		Pathfinder_Track_Add("subway_businessman_1", "PathNodeArea_1");
		Pathfinder_Track_Add("subway_businessman_1", "PathNodeArea_8");
		Pathfinder_Track_Add("subway_businessman_1", "PathNodeArea_11");
        Pathfinder_Track_Add("subway_businessman_1", "PathNodeArea_22");
        Pathfinder_Track_Add("subway_businessman_1", "PathNodeArea_26");
        Pathfinder_Track_Add("subway_businessman_1", "PathNodeArea_41");
		Pathfinder_Track_Add("subway_businessman_1", "PathNodeArea_47",5.0f,10.0f);
		Pathfinder_Track_Start("subway_businessman_1",true);
	}
    
	cSequenceStatesData mSeqTruck;
	void Seq_Truck(const tString& in asName="")
	{
		Sequence_Begin("Seq_Truck", mSeqTruck);
		
		if (Sequence_DoStepAndPause())
		{
			Prop_MoveLinearTo("Truck","Truck_RESET",70,70,0.2f,true,"OnTruckReachedTarget");
			Prop_AlignRotation("Truck","Truck_RESET",9,9,1.0f,true,"");
        }
		else if (Sequence_DoStepAndPause())
		{
			Prop_MoveLinearTo("Truck","Truck_1",7,7,0.2f,false,"OnTruckReachedTarget");
			Prop_AlignRotation("Truck","Truck_1",0.5,1,1.0f,false,"");
		}
		else if (Sequence_DoStepAndPause())
		{
			Prop_MoveLinearTo("Truck","Truck_2",7,7,0.2f,false,"OnTruckReachedTarget");
			Prop_AlignRotation("Truck","Truck_2",0.5,1,1.0f,false,"");
		}
		else if (Sequence_DoStepAndPause())
		{
			Prop_MoveLinearTo("Truck","Truck_3",7,7,0.2f,false,"OnTruckReachedTarget");
			Prop_AlignRotation("Truck","Truck_3",0.5,1,1.0f,false,"");
		}
		else if (Sequence_DoStepAndPause())
		{
			Prop_MoveLinearTo("Truck","Truck_4",7,7,0.2f,false,"OnTruckReachedTarget");
			Prop_AlignRotation("Truck","Truck_4",0.5,1,1.0f,false,"");
		}
		else if (Sequence_DoStepAndPause())
		{
			Prop_MoveLinearTo("Truck","Truck_5",7,7,0.2f,false,"OnTruckReachedTarget");
			Prop_AlignRotation("Truck","Truck_5",0.5,1,1.0f,false,"");
		}
		else if (Sequence_DoStepAndPause())
		{
			Prop_MoveLinearTo("Truck","Truck_6",7,7,0.2f,false,"OnTruckReachedTarget");
			Prop_AlignRotation("Truck","Truck_6",0.5,1,1.0f,false,"");
		}
		else if (Sequence_DoStepAndPause())
		{
			Prop_MoveLinearTo("Truck","Truck_7",7,7,0.2f,false,"OnTruckReachedTarget");
			Prop_AlignRotation("Truck","Truck_7",0.5,1,1.0f,false,"");
		}
		else if (Sequence_DoStepAndPause())
		{
			Prop_MoveLinearTo("Truck","Truck_8",7,7,0.2f,false,"OnTruckReachedTargetFinal");
			Prop_AlignRotation("Truck","Truck_8",0.5,1,1.0f,false,"");
		}
		
		Sequence_End();
	}
	
	//-------------------------------------------------------
	
	void OnTruckReachedTarget(const tString&in asName)
	{
		SequenceStates_Resume("Seq_Truck");
	}
    
	void OnTruckReachedTargetFinal(const tString&in asName)
	{
		Map_AddTimer("RedoTrucks", 10.0f, "RedoTrucks");
	}
    
    void RedoTrucks(const tString&in asTimer) 
    {
        Seq_Truck("");
        SequenceStates_Resume("Seq_Truck");
    }
    

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if(abPressed==false) return;
		
		if(alAction == eAction_Test1)
		{
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	/*Put any variables that are used in more than one scene here.*/
 
	//-------------------------------------------------------
 
	/*Put any functions that are used in more than one scene here.*/
 
	//-------------------------------------------------------
 
	//} END MAIN FUNCTIONS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE X *NAME OF SCENE*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		 /////////////////////////////////////////
		 // General
		 //{//////////////////////////////////////
		 
		//-------------------------------------------------------
	 
		/*Put any variables that are used by many events in Scene X here.*/
	 
		//-------------------------------------------------------
	 
		/*Put any functions that are used in more than one event in Scene X here.*/
	 
		//-------------------------------------------------------
		
		//} END General	
	 
		 /////////////////////////////////////////
		 // Event *Name Of Event*
		 //{//////////////////////////////////////
	 
		 //-------------------------------------------------------
	 
		 /*Put any variables that are only used in Scene X, Event X here.*/
	 
		 //-------------------------------------------------------
	 
		 /*Put any functionsthat are only used in Scene X, Event X here.*/
	 
		 //-------------------------------------------------------
	 
		 //} END Event *Name Of Event*
	 
	 //} END SCENE X
 
 
	 /////////////////////////////////////////
	 // ==============
	 // TERMINALS
	 // ==============
	 //{//////////////////////////////////////
 
		 //-------------------------------------------------------
	 
		 /////////////////////////////////////////
		 // Terminal *Name Of Terminal*
		 //{//////////////////////////////////////
	 
		 //-------------------------------------------------------
	 
		 /*Put any variables that are only used Terminal here.*/
	 
		 //-------------------------------------------------------
	 
		 /*Put any functions that are only used Terminal here.*/
	 
		 //-------------------------------------------------------
	 
		 //} END Terminal *Name Of Terminal*
	
	//} END TERMINALS
 
}