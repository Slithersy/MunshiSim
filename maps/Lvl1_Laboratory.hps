#include "interfaces/Map_Interface.hps"
#include "base/InputHandler_Types.hps"
#include "helper_ai.hps"
#include "helper_game.hps"
#include "helper_audio.hps"
#include "helper_effects.hps"
#include "helper_sequences.hps"
#include "helper_areas.hps"
#include "helpers/helper_player.hps"
#include "helper_imgui_urban.hps"
#include "helper_custom.hps"
#include "helper_custom_depth.hps"

//------------------------------------------------------------

/////////////////////////////////////////
// SETTINGS
/////////////////////////////////////////

//------------------------------------------------------------

class cScrMap : iScrMap
{

	//-------------------------------------------------------
	
	/////////////////////////////////////////
	// MAIN CALLBACKS
	/////////////////////////////////////////
	
	//-------------------------------------------------------
	
	void Setup()
	{
		GetBase().SetDisplayNameEntry("00-03-laboratory");
	// Effect init
		Effect_Bloom_FadeBrightPass(0.5f, 2);
        Effect_Bloom_FadeBloomWidth(128, 2);
        Effect_Bloom_FadeBloomFalloff(0.5f, 2);
        Effect_Bloom_FadeBloomTint(1, 1, 1, 2);

	}
	
	//-------------------------------------------------------
	
	void PreloadData()
	{
		cLux_AddDebugMessage("Preloading Data");
		UrbanGui_Preload();
		
		PlayerHands_PreloadHandModel_Human();

		ImGui_PreloadImage("munshi_screen1");
		ImGui_PreloadImage("munshi_screen2");
		ImGui_PreloadImage("munshi_screen3");
		ImGui_PreloadImage("brain_scan_4");
		ImGui_PreloadImage("tunnel_vision");

		Material_Preload("vignette_screen.mat");
		Material_Preload("00_04_scan_noise.mat");
		
		for (int i=0; i<=3; i++) {
			tString newI = ""+i;
			if (i<10) newI = "0"+i;
			ImGui_PreloadImage("graphics/sequences/AfterScan/AfterScan_000"+newI+".png", eImGuiGfx_Texture);
		}
	}
	
	//-------------------------------------------------------
	
	////////////////////////////
	// Run first time starting map
	tString MapName = "";
	void OnStart()
	{
		MapName = cLux_GetCurrentMap().GetName();
		
		/////////////////////////
		//INIT VISUALS
		//Effect_Fade_Out(0);
		CameraAnimation_End();
		
		//////////////////////////////////////////
		// Init variables
		mbScanningEffectsActivated = false;

		//////////////////////////////////////////
		// Specific setup functions
		SetupChairInteraction();
		SetupLights();

		/////////////////////////
		///Particles - Preload Particles
        ParticleSystem_Preload("dust_wind_gust_light.ps");

		/////////////////////////
		///Audio - Preload Sounds
		Sound_PreloadGroup("00_06_lab/sfx", true);
		Sound_PreloadGroup("00_06_lab/VIPScriptedEvents", true);
		Sound_PreloadGroup("special_fx/transitions", false);
		Sound_PreloadGroup("Flashback/Ross/4.3", false);
		Sound_PreloadGroup("Player/reaction/air", false);
		Sound_PreloadGroup("00_03_apartment1/VIPScriptedEvents/whooshes", false);
        Sound_PreloadGroup("Entities_Urban/door/swingdoor_reception", false);

		Sound_SetGlobalVolume(0.0f);
		Music_FadeVolumeMul(1.0f,0.5f);
		
		////////////////////////
		///Audio - Set player foley sounds
		Player_SetFootWear("sneaker");
		Player_SetClothing("dressed");
		
		/////////////////////////////////
		// Entities setup
		Prop_RotateToSpeed("fan_wall_fan_1", 20, 20, cVector3f(0,0,1), false, "");
		Entity_SetActive("simon_legs", false);
		
		bool bDoIntro = true;
		if(cLux_ScriptDebugOn())
		{
			bDoIntro = false;
			Entity_SetInteractionDisabled("ScanChair", false);
			SwingDoor_SetOpenAmount("swingdoor_scanroom_corridor_4", 0.6f);
		}
		
		if (bDoIntro)
		{
			tString sPlace = cString_FullyTranslate(MapName, "LevelScreen_Place");
			tString sTime = cString_FullyTranslate(MapName, "LevelScreen_Time");
			BeginningText(sPlace, sTime, 5.0f);
			SetupIntro();
		}
		
		PlayerHands_SetHandModel_Human();
		Player_SetFlashlightDisabled(true);
		
		Map_AddTimer("preload", 10, "TimerBeginPreload");
		
		LastOnSoma_SetText("00_03_laboratory_1");
		
		ChangeMunshiAnim("David_Repair");
        Entity_SetInteractionDisabled("DavidInteractArea", true);
        cFogArea@ FogArea = cLux_GetCurrentMap().GetWorld().GetFogArea("FartArea");
        FogArea.SetVisible(false);
        
        for (int i=1; i<=2; i++) {
            cParticleSystem@ FartParticle = cLux_GetCurrentMap().GetWorld().GetParticleSystem("FartParticle_"+i);
            FartParticle.SetActive(false);
            
            cParticleSystem@ BangDoorParticle = cLux_GetCurrentMap().GetWorld().GetParticleSystem("BangDoor_"+i);
            BangDoorParticle.SetActive(false);
        }
	}
	
	//-------------------------------------------------------
	
	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if(abPressed==false) return;
        
        //Press 1 while looking at Munshi, I dare you. *blushes*
        if (alAction == eAction_Test1)
        {
            mfStartMunshiScratch = 4.0f;  
        }
	}
	
	//-------------------------------------------------------
	
	void OnGui(float afTimeStep) {}
	
	//-------------------------------------------------------
	
    float mfStartMunshiScratch = 0.0f;
    
    int lSecretDoorCount = 0;
    float fSecretDoorFartFog = 0;
    bool bCalledSecretDoor = false;
	float mfTickTockTimer = 0.0f;
	bool mbRemovedBlocks = false;
	void Update(float afTimeStep)
	{
		if (!MainMenu_IsShowing()) mfTickTockTimer = mfTickTockTimer + 0.013f;
		
		tString sSimOver = GetSimEnd();
		array<tString> vSimOver = cString_Split(sSimOver, "_");
		if (vSimOver.size()>0)
		{
			bool bIsOver = cString_ToBool(vSimOver[0], false);
			tString sPathName = vSimOver[1];
			
			if (bIsOver)
			{
				cLux_AddDebugMessage("Text over");
				
				if (sPathName=="Path"&&!mbRemovedBlocks) {
					cLux_AddDebugMessage("Called");
					Entity_SetInteractionDisabled("ScanChair", false);
					Entity_SetActive("DistortionArea_*", false);
					Entity_SetActive("block_munshi_*", false);
					mbRemovedBlocks = true;
				} else if (sPathName=="BeforeScan") {
					cLux_AddDebugMessage("Executing scan!");
					ExecuteScan();
				} else if (sPathName=="AfterScan") {
					CameraAnimationNode_SetInteractiveMovement("StandAnim_1", true);
					Entity_SetActive("afterscan_distortion_*", true);
					Entity_SetActive("afterscan_block_*", true);
				} else if (sPathName=="AfterScanInteract") {
                    bShouldDavidLurk = true;
					Entity_SetActive("afterscan_distortion_*", false);
					Entity_SetActive("afterscan_block_*", false);
                }
			}
		}
        
        //Munshi scratch
        if (mfStartMunshiScratch>0) {
            mfStartMunshiScratch = mfStartMunshiScratch - 0.02f;
            if (mfStartMunshiScratch>0) {
                int CalScratch = mfStartMunshiScratch*4;
                cLux_AddDebugMessage("MunshiScratch");
                if (CalScratch%2!=1) {
                    //If Number is Odd
                    ChangeMunshiAnim("David_Simulator_Scratch_1");
                } else {
                    //If Number is Even
                    ChangeMunshiAnim("David_Simulator_Scratch_2");
                }
            } else ChangeMunshiAnim("David_Simulator_2");
        }
        
        //Secret things below
        cFogArea@ FogArea = cLux_GetCurrentMap().GetWorld().GetFogArea("FartArea");
        if (lSecretDoorCount>5&&fSecretDoorFartFog>-1) {
            if (fSecretDoorFartFog<1&&lSecretDoorCount!=99) {
                fSecretDoorFartFog = fSecretDoorFartFog + 0.02f;
                FogArea.SetColor(cColor(0.7,1,0.7,fSecretDoorFartFog));
                
                if (fSecretDoorFartFog>1) lSecretDoorCount = 99;
            } else {
                fSecretDoorFartFog = fSecretDoorFartFog - 0.002f;
                FogArea.SetColor(cColor(0.7,1,0.7,fSecretDoorFartFog));

                if (fSecretDoorFartFog<=0) FogArea.SetVisible(false);
            }
        }
        if (SwingDoor_GetOpenAmount("SecretDoor")>=0.015&&bCalledSecretDoor==false&&lSecretDoorCount<6) {
            cLux_AddDebugMessage("called");
            if (lSecretDoorCount==5) {
                SwingDoor_SetBlocked("SecretDoor", false, true);
                SwingDoor_PushOpen("SecretDoor", 3.0f);
                
                FogArea.SetColor(cColor(0.7,1,0.7,0));
                FogArea.SetVisible(true);
                
                for (int i=1; i<=2; i++) {
                    cParticleSystem@ FartParticle = cLux_GetCurrentMap().GetWorld().GetParticleSystem("FartParticle_"+i);
                    FartParticle.SetActive(true);
                }

                Sound_CreateAtEntity("DoorHandleTrigger_3", "MunshiSim/Game/fart_reverb", "SecretDoor", 0.0f, false, 0.3f);
            } else Sound_CreateAtEntity("DoorHandleTrigger_3", "Entities_Urban/door/swingdoor_reception/interact_locked", "SecretDoor", 0.0f, false, 0.3f);
            
            bCalledSecretDoor = true;
            ++lSecretDoorCount;
        } else if (SwingDoor_GetOpenAmount("SecretDoor")<0.005) bCalledSecretDoor = false;
	}
    
    void LookAtSecretMunshi(const tString &in asEntity, int alState)
    {
        Area_MoveLinearTo("SecretMunshi_MoveTo", "SecretMunshi_MoveTo_1", 8.0f, 5.0f);
        Sound_CreateAtEntity("munshi_ohh", "MunshiSim/Game/munshi_ohh", "SecretDavid", 1.0f, false, 0.7f);
        
        Map_AddTimer("SecretMunshiContact", 1.5f, "SecretMunshiContact");
    }
    
    void SecretMunshiContact(const tString &in asTimer)
    {
        Player_KnockAway(cVector3f_Back, 0.0f, 0.0f);
        SwingDoor_PushOpen("SecretDoor", -6.0f);
        SwingDoor_SetBlocked("SecretDoor", true, true);
        Sound_Fade("munshi_ohh", 0.0f, 0.6f);
        if (Player_GetDistanceToEntity("SecretDoor")<2) {
            Effect_Fade_In(2.0f);
            Player_Teleport("PlayerStartArea_2", false);
        }
        
        Map_AddTimer("SecretMunshiContact2", 1.5f, "SecretMunshiContact2");
    }
    
    void SecretMunshiContact2(const tString &in asTimer)
    {
        Sound_CreateAtEntity("DoorBoom", "Entities_Urban/door/swingdoor_reception/interact_locked", "SecretDoor", 0.0f, false, 0.3f);
        for (int i=1; i<=2; i++) {
            cParticleSystem@ BangDoorParticle = cLux_GetCurrentMap().GetWorld().GetParticleSystem("BangDoor_"+i);
            BangDoorParticle.SetActive(true);
        }
    }

	//-------------------------------------------------------
	
	[nosave] cGuiGfxElement @mpTunnelVisionGfx;
	
	void OnDraw(float afTimeStep)
	{
		if (mbScanningEffectsActivated)
		{
			cCamera@ pCam = cLux_GetPlayer().GetCamera();
			
			////////////////////////////////////////////
			// Render tunnel vision hud object
			cVector3f vDrawingPos = cLux_GetHudVirtualStartPos();
			cVector2f vDrawingSize = cLux_GetHudVirtualSize();
			cLux_GetGameHudSet().DrawGfx(mpTunnelVisionGfx, vDrawingPos, vDrawingSize, cColor(1));
		}
	}

	//-------------------------------------------------------
	
	void OnEnter()
	{
		MainMenu_SetBGPhase(eMainMenuPhase_Initial_To_1_3);
		
		if(cLux_ScriptDebugOn() == false) Game_AutoSave();
	}
	
	//-------------------------------------------------------
	
	void OnLeave() 
	{
	}
	
	
	//-------------------------------------------------------

	/////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	/////////////////////////////////////////

	//-------------------------------------------------------

	/*Put any variables that are used in more than one scene here.*/

	//-------------------------------------------------------

	void TimerVoicePlay(const tString& in asName)
	{
		Voice_Play(asName);
	}
	
	//-------------------------------------------------------
	
	float mfElapsedTime = 0;

	void UpdateClock(float afTimeStep)
	{
		mfElapsedTime+=afTimeStep;
		
		int seconds = int(mfElapsedTime) /*base time 10:53:30*/ + 30 + 53*60 + 10*60*60;
		int minutes = seconds / 60;
		int hours = minutes / 60;
		seconds = seconds % 60;
		minutes = minutes % 60;
		hours = hours % 12;
		
		Meter_SetState("wall_clock_second_1",(seconds/60.0f),false);
		Meter_SetState("wall_clock_minute_1",1.0f-(minutes/60.0f)-(seconds/3600.0f),false);
		Meter_SetState("wall_clock_hour_1",1.0f-(hours/12.0f)-(minutes/720.0f)-(seconds/43200.0f),false);
		//cLux_AddDebugMessage("H:"+hours+" M:"+minutes+" S:"+seconds);
	}
	
	//-------------------------------------------------------
	
	/////////////////////////////////////////
	//=======================================
	// INTRO
	//=======================================
	/////////////////////////////////////////
	
	
	//-------------------------------------------------------
	
	void TimerStartNarration(const tString &in asTimer)
	{		
		SequenceIntro("");
	}
	
	//--------------------------------------------------------

	void SetupIntro()
	{
		///////////////////////////
		// Start the map faded out
		if (cLux_ScriptDebugOn())
			Effect_Fade_Out(0);
		Player_SetActive(false);
		Map_AddTimer("timer_introtext",0.5f,"TimerStartNarration");
		SwingDoor_SetOpenAmount("swingdoor_scanroom_corridor_4", 0.6f);
	}
	
	//-------------------------------------------------------
	
	cSequenceStatesData mSequenceIntro;	
	void SequenceIntro(const tString &in asName)
	{
		Sequence_Begin("SequenceIntro", mSequenceIntro);
		///////////////////////////////
		// Begin fade in
		if (Sequence_DoStepAndWait(2.0f)) 
		{
			//Small blackout before intro begins
			CheckPoint_Setup();
		}
		
		if (Sequence_DoStepAndWait(2.5f))
		{
			//////////////////////////////////////
			//Level start sweetener
			Sound_CreateAtEntity("DoorClosed", "00_06_lab/VIPScriptedEvents/door_close_level_start", "Player", 0.0f, false, 1.0f);
			cPlayMusic("music/tick_tock.ogg", 0.5f, 3.0f, true, eMusicPrio_SceneAmb, false);
		}
		
		Sequence_End();
	}
	
	//-------------------------------------------------------

	/////////////////////////////////////////
	// =====================================
	// SCENE 1 | Enter & Search Anteroom
	// =====================================
	/////////////////////////////////////////

	//-------------------------------------------------------

	float mfWaitroomBright = 0.025f;
	
	//--------------------------------------------------------------------------------
	
	void SetupLights()
	{
		///////////////////////////////
		// Turn off billboards for lamps	
		Billboard_SetVisible("Billboard_SideOffice_Lamp_*",false);
		
		cLux_AddDebugMessage("--- Light setup complete ---");
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 1 | Trying to exit
	/////////////////////////////////////////

	//-------------------------------------------------------

	int mlExitDialogue = 0;
	void ExitDoor_OnPlayerInteract(const tString &in asEntity)
	{
		if (mlExitDialogue!=0&&!bShouldDavidLurk) return; 
        
        if (bShouldDavidLurk) {
            EndLevel("");
            bShouldDavidLurk = false;
            ++mlExitDialogue;
        } else if (MakeMessage("InteractDoor")) {
            ++mlExitDialogue;
        }
	}
		
	//-------------------------------------------------------

	/////////////////////////////////////////
	// SCENE 2 | Hallway
	/////////////////////////////////////////
	
	//-------------------------------------------------------
	
	bool Trigger_HandleSound(const tString &in asParent, const tString &in asChild, int alState)
	{
		if (alState == 1)
		{
			//Sound source is "HandleSoundTrigger"
			Sound_CreateAtEntity("HandleDown", "Entities_Urban/door/toilet_door/door_handle_down", asParent,0,false);
			cLux_AddDebugMessage("Handle down at "+asParent);
		}
		else
		{
			//Sound source is "HandleSoundTrigger"
			Sound_CreateAtEntity("HandleUp", "Entities_Urban/door/toilet_door/door_handle_up", asParent,0,false);
		}
		return true;
	}

	//-------------------------------------------------------
		
	/////////////////////////////////////////
	// Scene 2 - HALLWAY - Event  - Preload (changed to priority change, already begun preloading)
	/////////////////////////////////////////
	
	bool CollideAreaStartPreload(const tString &in asParent, const tString &in asChild, int alState)
	{
		PreloadPriorityNormal();

		return false;
	}
	
	//////////////////////////////////////////
	// Scene 2 - Side room light switch
	//////////////////////////////////////////
	
	//-------------------------------------------------------
	void SideOffice_LightSwitch(const tString &in asEntity, int alState)
	{
		Sound_CreateAtEntity("LightswitchSound", "Entities_Urban/lamp/generic_INT/switch_plastic_on_off", asEntity, 0, true);	
		
		if (alState == 1)
		{
			Billboard_SetVisible("Billboard_SideOffice_Lamp_*",true);
			Light_FadeTo("SpotLight_ComputerScreen_*",cColor(0.0, 0.0, 0.0),0,0.5);
			Sound_CreateAtEntity("LightsFlicker", "00_06_lab/sfx/fluorescent_light_flicker", "serverroomlightsource_1");
			Sound_CreateAtEntity("LightsFlicker", "00_06_lab/sfx/fluorescent_light_flicker", "serverroomlightsource_2");
			Sound_Play("serverroom_light_*", 0.25f, false);
		}
		
		if (alState == -1)
		{
			Light_FadeTo("SpotLight_ComputerScreen_*",cColor(0.37, 0.92, 0.95),1.3,0.5);
			Billboard_SetVisible("Billboard_SideOffice_Lamp_*",false);
			Sound_CreateAtEntity("LightsFlicker", "00_06_lab/sfx/fluorescent_light_flicker", "serverroomlightsource_1");
			Sound_CreateAtEntity("LightsFlicker", "00_06_lab/sfx/fluorescent_light_flicker", "serverroomlightsource_2");
			Sound_Stop("serverroom_light_*", 0.25f);
		}
	}
	
	//-------------------------------------------------------

	/////////////////////////////////////////
	// SCENE 3 | Meet David and get Scanned
	/////////////////////////////////////////

	//-------------------------------------------------------

	bool TriggerPlayerEnterScanRoom(const tString &in asParent, const tString &in asChild, int alState)
	{
		///////////////////////////////////////
		// Flag player as being inside the room
		if (alState == 1)
		{
			cStopMusic();
			if (mfTickTockTimer>=25) {
				MakeMessage("TooLong", 1);
				
				cPlayMusic("music/AnimalCrossing/11pm_rainy.mp3", 1.0f, 3.0f, true, eMusicPrio_BgAmb, true);
			} else {
				MakeMessage("Path", 1);
				
				cPlayMusic("music/AnimalCrossing/festivale_with_pave.mp3", 1.0f, 3.0f, true, eMusicPrio_BgAmb, true);
			}
			
			Entity_SetActive("DistortionArea_*", true);
			Entity_SetActive("block_munshi_*", true);
		}

		return false;
	}
	
	//-------------------------------------------------------
	
	bool TriggerPlayerNeedles(const tString &in asParent, const tString &in asChild, int alState)
	{
		if (mbRemovedBlocks&&!bShouldDavidLurk&&MakeMessage("Needels")) {
			return false;
		}
		
		return true;
	}
	
	//-------------------------------------------------------
	
	bool TriggerOpenDoor(const tString &in asParent, const tString &in asChild, int alState)
	{
		///////////////////////////////////////////////
		// When the door is opened, stop David mumbling
		if (alState == 1)
		{
			cLux_AddDebugMessage("DEBUG: The door is opened... it begins");
			Sound_CreateAtEntity("ScanRoomSweetener", "00_06_lab/sfx/lab_sweetener", "ScanSweetenerSource");
			Sound_Stop("behind_door_spot", 0.1f);
			Sound_Play("lab_room_server_1", 0.5);
			
			PreloadPriorityLow();
			
			return false;
		}
		return true;
	}
	
	int lTouchCount = 0;
	void InteractPowerSwitch(const tString &in asEntity)
	{
		if (lTouchCount==0&&MakeMessage("TouchPowerBox1")) lTouchCount = lTouchCount + 1;
		if (lTouchCount==5&&MakeMessage("TouchPowerBox2")) lTouchCount = lTouchCount + 1;
        
        if (lTouchCount>0) lTouchCount = lTouchCount + 1;
	}
	
	//-------------------------------------------------------
	
	//////////////////////////////////////////
	// SCENE 3 - EVENT 2 - Begin the Scan
	//////////////////////////////////////////
	
	//-------------------------------------------------------
	
	bool mbScanningEffectsActivated;
	int mlChairAreaCollisionCounter;
	int mlid_Vignette; 
	int mlid_ScanLines;
	int mlid_Grain;
	int mlid_RadialBlur;
	int mlid_DoF;
	
	//-------------------------------------------------------
	
	void SetupChairInteraction()
	{
		mlChairAreaCollisionCounter = 0;
		Entity_SetInteractionDisabled("ScanChair", true);
	}
	
	//-------------------------------------------------------
		
	void InteractScanChair(const tString &in asEntity)
	{
		//////////////////////////////////////////////
		// Player sits down after interacting with chair
		MakeCameraAnimation("IntroAnim", false, false);
		Entity_PlaceAtEntity("Player", "SafePlayerArea");
		Map_AddTimer("EnableSimonLegs", 1.5f, "SimonLegs");
		Map_AddTimer("EnableSimonArms", 1.75f, "SimonArms");
		
		Sound_PreloadGroup("Entities_Special/Equipment", true);
		Sound_CreateAtEntity("sound_sit_down", "00_06_lab/VIPScriptedEvents/Camera_Anim_sitinchair", asEntity, 0, false);
	}
	
	//-------------------------------------------------------
	
	void SimonLegs(const tString &in asTimer)
	{
	    Entity_SetActive("simon_legs", true);
	}
	
	//-------------------------------------------------------
	
	void SimonArms(const tString &in asTimer)
	{
		Entity_SetActive("SimonHands",true);
		Entity_PlayAnimation("SimonHands","chair_00_03_scan",0.0,true);
		Prop_MoveLinearTo("SimonHands","SimonHands_Target",10.0f,0.5f,0.05f,true);
	}
	
	//-------------------------------------------------------
	
	bool EventPlayerSits(const tString &in asEntity, int alDirection)
	{
		PrepScan();
		cStopMusic();
		StopMessage();
		Entity_SetInteractionDisabled("ScanChair", true);
		return false;
	}
	
	//-------------------------------------------------------
	
	cSequenceStatesData mSequenceScanningPrepare;
	void SequenceScanningPrepare(const tString &in asName)
	{
		Sequence_Begin("SequenceScanningPrepare", mSequenceScanningPrepare);

		//////////////////////////////
		// Start scan screen movement
		if (Sequence_DoStepAndPause(0))
		{
			//Changing values or timing will take sound out of sync
			Sound_PlayGui("Entities_Special/Equipment/scanner/urban/scanner_lower", 1.0f);
			Prop_MoveLinearTo("ScanHelmet", "ScanHelmet_Target_1", 1, 1, 0.25, true, "MoveTo_ScanHelmet");
		}
		else if (Sequence_DoStepAndWait(1))
		{
            mfStartMunshiScratch = 4.0f;
			Prop_MoveLinearTo("ScanHelmet", "ScanHelmet_Target_2", 1, 1, 0.25, false);
		}
		else if (Sequence_DoStepAndWait(1.0f))
		{
			CollisionScanScreenFace("", "", 1);
		}
		
		Sequence_End();
	}
	
	//-------------------------------------------------------
	
	void MoveTo_ScanHelmet(const tString &in asProp)
	{
		SequenceStates_Resume("SequenceScanningPrepare");
	}
	
	//-------------------------------------------------------
	
	bool CollisionScanScreenFace(const tString &in asParent, const tString &in asChild, int alState)
	{
		//////////////////////////////////////////////////////////
		// The scan screen is being placed over the player's face
		mbScanningEffectsActivated = true;
		Player_FadeFOVMulTo(0.9f, 0.3f);
		
		/////////////////////////////////////////////////////////
		// Audio - Fade World Mixgroup
		Sound_FadeGlobalVolume(0.0,1.0f,eSoundEntryType_World);
		
		/////////////////////////////////////////////
		// Add Vignette
		mlid_Vignette = Effect_Screen_Start("vignette_screen.mat", cVector2f(0.5,0.5), cVector2f(1.4f,1.0f), 1.0, 1.0, 200.0, 200.0);
		
		/////////////////////////////////////////////
		// Fade out, then wait until completely dark
		Effect_Fade_Out(0.05f);
		PreloadPriorityVeryHigh();
		Map_AddTimer("ScanScreenFadeTimer", 9.0f, "TimerFadeInScanning");
		
		////////////////////////////////////////////
		// The following effect is used in darkness - but it is to "warm up" the video distortion so that it works on the fade in (in sync)
		Effect_VideoDistortion_Start(1.0f,1.0f,2.0f,0.1f,0.0f);
		
		//////////////////////////////////////
		// Blur and mouse control effects
		mlid_DoF = Effect_DoF_Start(3.0,10.0,0.3,50.0);
		mlid_RadialBlur = Effect_RadialBlur_Start(0.1,0.25,0.25,0.1);
		Player_SetLookSpeedMul(0.6);
		
		return false;
	}

	//-------------------------------------------------------
	
	void PrepScan()
	{
		SequenceScanningPrepare("");
	}
	
	//-------------------------------------------------------
	
	int mlGoggleDistortionID = -1;
	
	void TimerFadeInScanning(const tString &in asName)
	{
		EyeTracking_SetExtendedViewMul(0.0f);
		
		//////////////////////////////////////
		// Remove scan screen
		Entity_SetActive("ScanHelmet", false);
	
		//////////////////////////////////////
		// Fade back in
		Effect_Fade_In(0.1f);
		PreloadPriorityNormal();
		Sound_FadeGlobalVolume(1.0f,0.1f,eSoundEntryType_World);
		cLux_AddDebugMessage("Goggles On!");
		
		//////////////////////////////////////
		// Distortion on fade in
		Effect_VideoDistortion_Start(1.0f,0.25f,0.1f,0.1f,0.0f);
		
		////////////////////////////////////
		// Audio - Screen Sequence
		Sound_CreateAtEntity("GogglesScreen", "Entities_Special/Equipment/scanner/interface_scan_sequence", "Player", 0.0f, false, 1.0f);
		Map_AddTimer("TimerGogglesOnConversation", 2.0f, "TimerGogglesOnConversation");
	}
	
	//-------------------------------------------------------
	
	void TimerGogglesOnConversation(const tString& in asName)
	{
		////////////////////////////////
		// Last conversation before scan
		
		MakeMessage("BeforeScan", 1, 1);
	}
	
	//-------------------------------------------------------
	
	void ExecuteScan()
	{
		//////////////////////////////////////
		// Start Scanning Sequence
		SequenceScan("");
	}
	
	//-------------------------------------------------------
	
	cSequenceStatesData mSequenceScan;
	
	void SequenceScan(const tString &in asName)
	{
		Sequence_Begin("SequenceScan", mSequenceScan);
		
		///////////////////////////
		// Initial Delay to allow sound sync
		if (Sequence_DoStepAndWait(1.0f))
		{
			//////////////////////////////////////
			// Startup the machine..
			Sound_CreateAtEntity("GoggleAction", "Entities_Special/Equipment/scanner/urban/scan_sequence", "Player", 0, true);
			Sound_FadeGlobalVolume(0.75f, 3.0f, eSoundEntryType_World);
			PreloadPriorityVeryHigh();
		}
		
		
		if (Sequence_DoStepAndWait(4.5f))
		{
			//////////////////////////////////////
			// Display scanning effect
			mlid_ScanLines = Effect_Screen_Start("00_04_scan_noise.mat", cVector2f(0.5, 0.5), cVector2f(2,1),  1, 0.1, 900, 0.1);
			Effect_ChromaticAberration_StartAnim(4.0f,0.005,0.005,cVector2f_Zero);
			Effect_ImageTrail_Start(0.08,0.1,4.0,1.0);
		}
		
		
		if (Sequence_DoStepAndWait(0.3f))
		{
			//////////////////////
			// Turn off Distortion effects
			Effect_Screen_FadeOut(mlid_Vignette,0.0);
			Effect_Screen_FadeOut(mlid_ScanLines,0.0);
			//Player_FadeFOVMulTo(2.5f, 1.0f);
			Effect_Flash_Start(0.25f, 0.95, 0.25);
			Effect_Rumble_Start(0.9, 0.7, 0.25f);
			Effect_Shake_Start(0.08,6.75,0,0.1);
			
		}
		
		//////////////////////////////////
		// Fade to black and restore FOV
		if(Sequence_DoStepAndWait(0.1f))
		{
			//Player_FadeFOVMulTo(1.0f, 0.0f);
			Effect_Fade_Out(0.5f);
			
			/////////////////////////
			// Fade out sound
			Sound_Stop("GogglesScreen",0.15);
			
			/////////////////////////////////////
			// Audio - Completely fade out all world audio
			Sound_FadeGlobalVolume(0.0,0.1f,eSoundEntryType_World);
			Sound_PlayGui("01_01_upsilon_awake/sfx/wake_up/wake_up_event", 1.0f);
		}

		/////////////////////////
		// Delay - allow for sound to fade out
		if (Sequence_DoStepAndWait(3.5f))
		{
			Effect_Screen_FadeOut(mlid_ScanLines,0);
			Effect_RadialBlur_FadeOut(mlid_RadialBlur,1.0);
			Effect_DoF_FadeOut(mlid_DoF,2.0f);
			Effect_ImageTrail_Clear();
			Player_FadeFOVMulTo(1.0f, 0.3f);
			
			cVector3f CalPos = OptionMenu_GetTopLeftOffset(cVector2f(0,0), -1.0f);
			cVector2f CalSize = cLux_GetHudVirtualCenterScreenSize();
			RenderSequence("AfterScan", CalPos, CalSize, 3.0f, 3.0f, 0.4f, 1.0f, 2.0f);
			Sound_PlayGui("special_fx/transitions/abyss_lookat", 1.0f);
			
			///////////////////////////////
			// Switch to the stand up animation
			CameraAnimation_End();
			MakeCameraAnimation("StandAnim", true, true);
			CameraAnimationNode_SetInteractiveMovement("StandAnim_1", false);
		}
		
		if (Sequence_DoStepAndWait(0.4f))
		{
			Sound_PlayGui("Flashback/Ross/4.3/dialog_3_simonescapeattempt_2_001_flesher_001", 1.0f);
	
		}
		
		if (Sequence_DoStepAndWait(3.0f))
		{
			Sound_PlayGui("00_03_apartment1/VIPScriptedEvents/whooshes/whoosh", 1.0f);
		}
		
		if (Sequence_DoStepAndWait(1.4f))
		{
			Entity_SetActive("ScanHelmet", true);
			Sound_PlayGui("Player/reaction/air/gasp", 1.0f);
			Effect_Fade_In(0.4f); 
			Sound_FadeGlobalVolume(1.0f,3.0f,eSoundEntryType_World);
		}
		
		if (Sequence_DoStepAndWait(3.0f))
		{
			Prop_MoveLinearTo("ScanHelmet", "ScanHelmet_Target_1", 0.35, 1, 0.25, true);
		}
		
		if (Sequence_DoStepAndWait(8.0f))
		{
			Prop_MoveLinearTo("ScanHelmet", "ScanHelmet_Target_3", 0.35, 1, 0.25, true);
			MakeMessage("AfterScan", 1, 1);
			cPlayMusic("music/AnimalCrossing/ceremony.mp3", 1.0f, 3.0f, true, eMusicPrio_BgAmb, true);
		}
		
		Sequence_End();
	}
	
	//-------------------------------------------------------
	
	//////////////////////////////////////////
	// SCENE 3 - EVENT 3 - After Scan
	//////////////////////////////////////////
	
	//-------------------------------------------------------
	
	bool EventGettingUp(const tString &in asEntity, int alDirection)
	{
		if (alDirection == 1)
		{
			Entity_SetActive("simon_legs",false);
			Entity_SetActive("SimonHands",false);
			ChangeMunshiAnim("David_AfterScan_3");
            Entity_SetInteractionDisabled("DavidInteractArea", false);
		}
		return true;
	}
		
	//-------------------------------------------------------
	bool mbStandUpSoundTriggered = false;
	bool mbNervousBreathingPlaying = false;
	bool StandUpSound(const tString &in asEntity, int alDirection)
	{
		if (asEntity == "StandAnim_1" && alDirection == 1)
		{
			cLux_AddDebugMessage("Stand Up Animation Sound Start");
			if(mbStandUpSoundTriggered==false)
			{
				Sound_CreateAtEntity("StandUpAnimation", "01_01_upsilon_awake/sfx/wake_up/stand_up_chair", "Player", 0.0f, false, 1.0f);	
				mbStandUpSoundTriggered = true;
			}
			
			if(mbNervousBreathingPlaying == false)
			{
				Emotion_PlayEventBreath("01_01_upsilon_awake/sfx/wake_up/nervous", 0);
				mbNervousBreathingPlaying = true;
			}

			return true;
		}
		
		else if (asEntity == "StandAnim_*" && alDirection == -1)
		{
			cLux_AddDebugMessage("Stand Up Animation Sound Stop");
			Sound_Stop("StandUpAnimation", 0.25f);
			mbStandUpSoundTriggered = false;
			return true;
		}
		return true;
	}
    
    void AfterScanInteract(const tString &in asEntity)
    {
        cLux_AddDebugMessage("Interacted");
        
        MakeMessage("AfterScanInteract", 1, 1);
        Entity_SetInteractionDisabled("DavidInteractArea", true);
        
    }
    
    bool bShouldDavidLurk = false;
    bool LeaveTrigger(const tString &in asParent, const tString &in asChild, int alState)
    {
        if (bShouldDavidLurk) {
            ChangeMunshiAnim("David_Lurk");
            return false;
        }
        
        return true;
    }
    
    void LookAtMunshi(const tString &in asEntity, int alState)
    {
        if (Entity_IsActive("David_Lurk")) ChangeMunshiAnim("David_Simulator_2");
    }
	
	//-------------------------------------------------------
	
	/////////////////////////////////////////
	// PRELOADING
	/////////////////////////////////////////

	//-------------------------------------------------------

	bool PreloadDisabled(bool abCheckIfPreloading = true)
	{
		if(cLux_ScriptDebugOn())
		{
			cLux_AddDebugMessage("PRELOAD DISABLED!"); 
			
			return true;
		}
		
		if(abCheckIfPreloading && Map_IsPreloading() == false)
			return true;
			
		return false;
	}
	
	//-------------------------------------------------------
	
	void TimerBeginPreload(const tString &in asTimer)
	{
		Preload();
	}
	
	//-------------------------------------------------------
	
	//////////////////////
	//Begin preload.
	void Preload()
	{
		if(PreloadDisabled(false)) return;
		cLux_AddDebugMessage("Preloading");
		
		//Map_Preload("01_01_upsilon_awake.hpm", eWorldStreamPriority_Low);
	}
	
	//-------------------------------------------------------
	
	//////////////////////
	//Change preload prio to normal
	void PreloadPriorityLow()
	{
		if(PreloadDisabled()) return;
		
		Map_SetPreloadPriority(eWorldStreamPriority_Low);
	}	
	
	//-------------------------------------------------------
	
	//////////////////////
	//Change preload prio to normal
	void PreloadPriorityNormal()
	{
		if(PreloadDisabled()) return;
		
		Map_SetPreloadPriority(eWorldStreamPriority_Normal);
	}
	
	//-------------------------------------------------------
	
	//////////////////////
	//Change preload prio to normal
	void PreloadPriorityVeryHigh()
	{
		if(PreloadDisabled()) return;
		
		Map_SetPreloadPriority(eWorldStreamPriority_VeryHigh);
	}
	
	/////////////////////////////////////////////////////////
	// TERMINAL RECEPTION COMPUTER
	/////////////////////////////////////////////////////////
	
	//-------------------------------------------------------
	
	void ErinMainComputerGUI(const tString&in asEntityName, float afTimeStep)
	{
		UrbanGui_PACE_DrawBackdrop();
		LoginScreen("GUI_PACE_USER_Reception");
	}

	//-------------------------------------------------------
	
	void LoginScreen(const tString&in asUserName)
	{
		ImGui_SetTransCategory("00_03_laboratory");
		
		cImGuiWindowData window = UrbanGui_PACE_CreateDefaultWindowData();
		
		ImGui_DoWindowStart("GUI_PACE_LOGIN", window, ImGui_NrmPosGroup(cVector3f(0.3, 0.3, 1.0)), ImGui_NrmSizeGroup(cVector2f(0.4, 0.4)));
		ImGui_DoWindowEnd();
		
		ImGui_DoWindowStart("GUI_PACE_USERNAME", window, ImGui_NrmPosGroup(cVector3f(0.35, 0.4, 1.0)), ImGui_NrmSizeGroup(cVector2f(0.3, 0.125)));
		ImGui_DoWindowEnd();
		ImGui_DoLabel(asUserName, ImGui_NrmPosGroup(cVector3f(0.37, 0.475, 1.0)));
		
		ImGui_DoWindowStart("GUI_PACE_PASSWORD", window, ImGui_NrmPosGroup(cVector3f(0.35, 0.525, 1.0)), ImGui_NrmSizeGroup(cVector2f(0.3, 0.125)));
		ImGui_DoWindowEnd();
	}
	
	//-------------------------------------------------------------------------
	
	void SideRoomComputer_OnGui(const tString&in asEntityName, float afTimeStep)
	{
		ImGui_SetTransCategory("");
		

		ImGui_ResetModifiers();

		ImGui_SetModColorMul(cColor(0.0f,0.0f,0.0f,1.0f));
			
		ImGui_DoImage(cImGuiGfx(""), ImGui_NrmPos(cVector3f(0.0f, 0.0f, -1.0f)), ImGui_NrmSize(cVector2f(1.0f, 1.0f)));
	}

	//-------------------------------------------------------

	void MainComputerLeft_OnGui(const tString&in asEntityName, float afTimeStep)
	{
		ImGui_SetTransCategory("");
		ImGui_SetStateColor("bgcolor", cColor(0.0,0.0,0.0,1));

		ImGui_ResetModifiers();

		cImGuiGfx gfx;
		gfx.SetFile("munshi_screen3");
		ImGui_SetModColorMul(cColor(1.0f,1.0f,1.0f,1.0f));
		ImGui_DoImage(gfx, ImGui_NrmPos(cVector3f(0.0, 0.0f, 1.0f)), ImGui_NrmSize(cVector2f(1.0f, 1.0f)));
	}

	//-------------------------------------------------------

	void MainComputerMiddle_OnGui(const tString&in asEntityName, float afTimeStep)
	{
		cImGuiGfx gfx;
		gfx.SetFile("brain_scan_4");
		ImGui_SetModColorMul(cColor(1.0f,1.0f,1.0f,1.0f));
		ImGui_DoImage(gfx, ImGui_NrmPos(cVector3f(0.0, 0.0f, 1.0f)), ImGui_NrmSize(cVector2f(1.0f, 1.0f)));
		
		cImGuiGfx window;
		gfx.SetFile("munshi_screen1");
		ImGui_SetModColorMul(cColor(1.0f,1.0f,1.0f,1.0f));
		ImGui_DoImage(window, ImGui_NrmPos(cVector3f(0.3, 0.3f, 2.0f)), ImGui_NrmSizeKeepRatio(cVector2f(0.5f, 0.5f)));
		
		//LoginScreen("GUI_PACE_USER_David");
	}

	//-------------------------------------------------------

	void MainComputerRight_OnGui(const tString&in asEntityName, float afTimeStep)
	{
		ImGui_SetTransCategory("");
		ImGui_SetStateColor("bgcolor", cColor(0.0,0.0,0.0,1));

		ImGui_ResetModifiers();

		
		cImGuiGfx gfx;
		gfx.SetFile("munshi_screen2");
		ImGui_SetModColorMul(cColor(1.0f,1.0f,1.0f,1.0f));
		ImGui_DoImage(gfx, ImGui_NrmPos(cVector3f(0.0, 0.0f, 1.0f)), ImGui_NrmSize(cVector2f(1.0f, 1.0f)));
	}
	
	//-------------------------------------------------------
	
	/////////////////////////////////////////
	// Ambient Audio
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	void FadeInAudio(const tString &in asTimer) 
	{
		////////////////////////////
		// Fade In Volume
		Sound_FadeGlobalVolume(1,4.5,eSoundEntryType_World);
	}
	
	//-------------------------------------------------------
	
	[nosave] float mfAlpha;
	[nosave] iFontData@ mpFont;
}