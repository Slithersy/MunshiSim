#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"
#include "helpers/helper_custom.hps"
#include "helpers/helper_areas.hps"
#include "helpers/helper_player.hps"

#include "utilities/Utility_PickBasics.hps"
#include "helper_imgui_station.hps"
#include "helper_imgui_station_app_error.hps"
#include "helper_imgui_station_app_airlockpressure.hps"
#include "helper_custom_depth.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/
 
//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		GetBase().SetDisplayNameEntry("Lvl4_AbyssEnding");
        // When outside and underwater
        Map_Preset_SetupFog("Outside", true, 0, 100, 1, cColor(3 / 255.0, 7 / 255.0, 5 / 255.0,1), 0.025, true, true);
        Map_Preset_SetupSecondaryFog("Outside", true, 0, 10, 1, cColor(4 / 255.0, 8.5f / 255.0, 6.5f / 255.0,1));
        Map_Preset_SetupDepthOfField("Outside", true, 0.05, 12.0, 0.1);
        Map_Preset_SetupBloom("Outside", 160, 0.00001, 0.5, cColor(0.3, 0.3, 0.3, 1.0));

		cTerrain@ pTerrain = cLux_GetCurrentMap().GetWorld().GetTerrain();
		if(pTerrain !is null) pTerrain.SetCheapMaterial("sand_flat.mat", 0.5f);
	}
    
    cVector3f NrmPos;
	void OnGui(float afTimeStep) 
    {
        NrmPos = ImGui_NrmPos(0.5f, 0.5f, 2.0f); //Can only be called here
    }
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
    int mlCoralTrailID = 0;
    int mlCoralDOF = 0;
    tString MapName = "";
	void OnStart()
	{
        MapName = cLux_GetCurrentMap().GetName();
		PlayerHands_SetHandModel_DeepSea();
        Entity_AttachToEntity("player","pilot_seat", "", true, true);
        
        
        SetOutsideLightEnabled("LampOutsideEnd_*", false, false);
        SetOutsideLightEnabled("LampOutside_*", false, false);
        SetOutsideLightEnabled("LampOutsideRed_*", false, false);
        
        Lamp_SetLit("scanchair_lamp_*", false, false);
        Lamp_SetLit("space_gun_red_lamp_*", false, false);
        Light_FadeTo("spotlight_highlight_gun",cColor(0,0,0,0),1.5,0.75);
        Map_FadeFogColor(cColor(0),0.1f);
        Entity_FadeEffectBaseColor("dome_intersection_lamp_*",cColor(2,1.5,1.5),0.1f);
        Map_FadeFogEnd(20.0f,0.1f);
        Light_SetVisible("PointLight_164",false);
        Light_SetVisible("PointLight_165",false);
        Light_SetVisible("PointLight_166",false);
        Light_SetVisible("PointLight_167",false);
        Light_SetVisible("PointLight_169",false);
        Light_SetVisible("PointLight_170",false);
        Light_SetVisible("PointLight_20",true);
        Light_SetVisible("PointLight_21",false);
        Light_SetVisible("PointLight_22",false);
        Light_SetVisible("PointLight_23",false);
        Light_SetVisible("PointLight_24",false);
        Light_SetVisible("PointLight_5",false);
        Light_SetVisible("PointLight_2",false);
        Light_SetVisible("BoxLight_1",false);
        Entity_SetEffectsActive("build_machine_flesher_*",false,false);
        Lamp_SetLit("ClawBar_lamp_*",false,false);
        Lamp_SetLit("ShellRailLamp_*",false,false);
        Light_SetVisible("PointLight_187",false);
        Light_SetVisible("PointLight_188",false);
        Light_SetVisible("SpotLight_74",false);
        Terminal_SetGuiActive("cath_terminal_scanchair",false);
        Entity_SetEffectsActive("cath_terminal_scanchair",false,false);
        Lamp_SetLit("pilot_seat_lamp_*",false,false);
        SetPlayerIsUnderwater(true, 1.0f, true);
        Map_SetUnderwater(true);
        Inventory_SetEnabled(false);
        CanShowIndicator(false);
        
        CameraAnimation_Begin("SitAnim","",true);
        Entity_SetEffectsActive("TerminalLaunch_Screen2", true, true);
        Terminal_SetGuiActive("TerminalLaunch_Screen2", true, 0.25f);
        Entity_SetEffectsActive("CathBox_LaunchPanel", false, false);
        Terminal_SetGuiActive("CathBox_LaunchPanel", false, 0);
        
        Entity_PlayAnimation("FinalHandsNormal", "event_escape_coral_infection", 0.0, false, false);
        Entity_SetAnimationPaused("FinalHandsNormal", "event_escape_coral_infection");
        Player_SetFlashlightDisabled(true);
        //Entity_PlayAnimation("SimonDreamHands", "dream_sequence_ashley",0.0,false,false,"");
        SeqWake("");
        
        mlCoralTrailID = Effect_ImageTrail_Start(1.0f,0.0f,-1,0.0f);
        mlCoralDOF = Effect_DoF_Start(0, 0.5, 1, 0);
        EyeTracking_SetExtendedViewMul(0.0f);
        LastOnSoma_SetText(MapName);
        Map_Preload("Lvl0_MainMenu");
	}
    
    void SetOutsideLightEnabled(const tString &in asX, bool abX, bool abFade=true)
    {
        Lamp_SetLit(asX, abX, abFade);
        Billboard_SetVisible(asX, abX);
        ParticleSystem_SetVisible(asX, abX);
    }
    
    bool mbPlayerIsUnderwater = false;
	void SetPlayerIsUnderwater(bool abX, float afFadeTime, bool abAffectEffecs)
	{
		mbPlayerIsUnderwater = abX;
		
		//////////////////////////////
		//Underwater
		if(mbPlayerIsUnderwater)
		{
			Map_SetUnderwater(true);
			//Player_SetAmbientLight_Outdoors(true);
			Map_SetEnvironmentParticlesActive(true);
			Map_Preset_Fade("Outside", afFadeTime);
				
			if(abAffectEffecs)
			{
				Map_SetEnvironmentParticlesActive(true);
			}
		}
		//////////////////////////////
		//In Air
		else
		{
			Map_SetUnderwater(false);
			//Player_SetAmbientLight_Indoors(true);
			Map_SetEnvironmentParticlesActive(false);
			Map_Preset_Fade("Inside", afFadeTime);
				
			if(abAffectEffecs)
			{
				Map_SetEnvironmentParticlesActive(false);
			}
		}
	}
    
	void TerminalLaunch_Screen2(const tString &in asEntityName, float afTimeStep)
	{
		ImGui_SetTransCategory("05_01_phi_inside");
						
		StationGuiBG_Scanlines();
		StationGuiBG_Backdrop();
		
		cImGuiButtonData button = StationGui_CreateDefaultButtonData();
		ImGui_SetDefaultButton(button);
		
		cImGuiWindowData window = StationGui_CreateDefaultWindowData();
		
		cImGuiLabelData label = ImGui_GetDefaultLabel();
		label.mFont.SetFile(Helper_Font_GetFontName(eLuxFontType_Sansation_Large_Bold));
		label.mFont.mvSize = 18;
		label.mFontAlign = eFontAlign_Left;
		ImGui_SetDefaultLabel(label);
		
		cImGuiTextFrameData textFrame = StationGui_CreateDefaultTextFrameData();
		textFrame.mColorText = cColor_White;
		textFrame.mFont.SetFile(Helper_Font_GetFontName(eLuxFontType_Sansation_Large_Bold));
		textFrame.mFont.mvSize = 18;
		
		cImGuiGaugeData gauge = StationGui_CreateDefaultGaugeData();

        label.mFont.SetFile(Helper_Font_GetFontName(eLuxFontType_Sansation_Large));
        cVector2f vFontSize = label.mFont.mvSize;
            
        label.mFont.mvSize = vFontSize;
        ImGui_ResizeFontToFit("DieErrRepeat", label.mFont, ImGui_GetCurrentGroupSize().x*0.9, 2.5);
        
        for (int i=0;i<14;++i)
        {
            ImGui_DoLabelExt("DieErrRepeat", label, cVector3f(100,50+50*i,1), cVector2f_MinusOne, 2.5);
        }
	}
    
	cSequenceStatesData mSeqWake;
	void SeqWake(const tString& in asName="")
	{
		Sequence_Begin("SeqWake", mSeqWake);
		
		if (Sequence_DoStepAndWait(4.0f)) {
            //
            Sound_PlayGui("Player/UI/death_drone",2.0f);
            Effect_Fade_In(0.0);
            Sound_PlayGui("Player/UI/death_hit",2.0f);
            Sound_PlayGui("Player/UI/flower_interact",1.0f);
            Sound_PlayGui("Player/reaction/air/hurt", 1.0f);
            Effect_Flash_Start(0.1f, 0.6f, 4.0f);
            Effect_TimeGlitch_Start(1.0f, 1.0f, 5.0f, true, 1.0f);
        } else if (Sequence_DoStepAndWait(2.0f)) {
            Sound_CreateAtEntity("PilotSeatMonitors", "05_01_phi_inside/SFX/pilot_control_chair/pilot_control_chair_seat_monitors", "ScreenSpinSoundSource");
            Sound_StopGui("Player/UI/death_tinnitus",8.0f);
            Sound_StopGui("Player/UI/death_hit",2.0f);
            Sound_StopGui("Player/UI/death_drone",10.0f);
        } else if (Sequence_DoStepAndWait(2.0f)) {
            Prop_AlignRotation("pilot_seat_apparatus_arm", "pilot_seat_apparatus_arm_target", 2, 2, 2, true);
            Prop_MoveLinearTo("pilot_seat_apparatus_arm", "pilot_seat_apparatus_arm_target", 2, 3, 2, true);
		} else if (Sequence_DoStepAndWait(3.0f)) {
            Sound_CreateAtEntity("PilotSeatStartup", "05_01_phi_inside/SFX/pilot_control_chair/pilot_control_chair_seat_startup", "Player");
            Entity_AttachToEntity("player","pilot_seat", "", true, true);
            Prop_AlignRotation("pilot_seat", "pilot_seat_target", 1, 1.5, 1, true);
            Prop_MoveLinearTo("pilot_seat", "pilot_seat_target", 1, 1.5, 1, true);
            CameraAnimationNode_SetAutoMove("SitAnim_1",1.0f);
		} else if (Sequence_DoStepAndWait(2.0f)) {
            CameraAnimationNode_SetInteractiveMovement("SitAnim_2", true);
            
            tString Text = cString_FullyTranslate(MapName, "GetUpHint");
            cVector2f CalSize = OptionMenu_GetScaledSize(cVector2f(300, 244));
            cVector3f CalPos = NrmPos-cVector3f(CalSize.x, CalSize.y,0)/2.0f+cVector3f(0, 200,0);
            CreateTextFade(Text, CalPos, CalSize, 2.0f, 4.0f, 1.0f, 1.0f, 1.0f, "default_medium_outline.fnt");
        }
		
		Sequence_End();
	}
    ////////////////////////////
    //CORAL STUFF
    ////////////////////////////
    
    bool OnBreakCoral(const tString &in asEntity, int alDirection)
    {
        tString Text = cString_FullyTranslate(MapName, "GetUpHint");
        StopTextFade(Text, 1.0f);
        Sound_FadeGlobalVolume(0.45f, 3.0f);
        CameraAnimation_End();
        CoralBreak_PlayAnim();
        CoralBreak_StartParticles();
        Map_AddTimer("CoralRumble0", 0.5f, "Timer_CoralRumbleLongShake");
        Map_AddTimer("CoralRumble1", 7.9f, "Timer_CoralRumbleMedium");
        Map_AddTimer("CoralRumble2", 10.5f, "Timer_CoralRumbleLarge");
        Map_AddTimer("CoralRumble2", 11.6f, "Timer_CoralRumbleMedium");
        return false;
    }
    
    //---------------------------------------------------------------------

    void CoralBreak_StartParticles()
    {
        Map_AddTimer("CoralPSArea_1", 3.3f, "CoralBreak_TimerErupt");
        Map_AddTimer("CoralPSArea_2", 3.8f, "CoralBreak_TimerErupt");
        Map_AddTimer("CoralPSArea_3", 4.5f, "CoralBreak_TimerErupt");
        Map_AddTimer("CoralPSArea_4", 5.5f, "CoralBreak_TimerErupt");
        Map_AddTimer("CoralPSArea_5", 6.3f, "CoralBreak_TimerErupt");
        Map_AddTimer("CoralPSArea_6", 6.7f, "CoralBreak_TimerErupt");
    }
    
    void Timer_CoralRumbleLongShake(const tString&in asTimer)
    {
        Effect_Rumble_Start(0.25, 13, 3, 1);
    }
    
    void Timer_CoralRumbleMedium(const tString&in asTimer)
    {
        Effect_Rumble_Start(0.8, 1, 0, 0.3);
    }
    
    void Timer_CoralRumbleLarge(const tString&in asTimer)
    {
        Effect_Rumble_Start(1.5, 2, 0, 0.3);
    }
    
    //---------------------------------------------------------------------
    
    void CoralBreak_TimerErupt(const tString& in asName)
    {
        ParticleSystem_CreateAtEntity(asName+"_PS", "mindcoral_escape.ps", asName, true);
        Effect_Rumble_Start(0.6, 0.7f, 0.1f, 0.1f);
    }
    
    //---------------------------------------------------------------------
            
    void CoralBreak_PlayAnim()
    {
        PlayerHands_SetUseCustomPosition(true);
        PlayerHands_SetCustomPositionFromEntity("CoralAnim");
        PlayerHands_SetUseCustomRotation(true);	
        PlayerHands_SetCustomRotationFromEntity("CoralAnim");
        PlayerHands_PlayAnimation("event_escape_coral_infection",false,true,0.0f,"");
        
        Entity_SetActive("FinalHandsNormal", false);
        PlayerHands_AttachCameraToSocket("Socket_Camera", 2.0f, "CoralBreak_CameraAttachDone", true,true,1.0f);
        Map_AddTimer("RemoveLegs", 12.0f, "RemoveLegs");
    }
    //---------------------------------------------------------------------
    
    void RemoveLegs(const tString &in asTimer)
    {
        Entity_SetActive("SimonLegs", false);
        cLux_AddDebugMessage("Removing legs");
    }
    
    void CoralBreak_CameraAttachDone()
    {
        PlayerHands_SetAnimationOverCallback("CoralBreak_HandAnimOver");
        Effect_DoF_FadeOut(mlCoralDOF, 20.0f);
        Effect_ImageTrail_FadeOut(mlCoralTrailID,25.0f);
        Player_Teleport("CoralAnimEnd");
    }
    
    //---------------------------------------------------------------------
    
    void CoralBreak_HandAnimOver(const tString&in asAnim)
    {
        Map_AddTimer("CamBreak_TimerResetPos",5.0f,"CamBreak_TimerResetPos");
        
        Map_AddTimer("SimonCommentBreakOut", 1.0f, "SimonCommentsBreakOut");
        Sound_FadeGlobalVolume(1.0f, 2.5f);
        EyeTracking_SetExtendedViewMul(1.0f);
        Inventory_SetEnabled(true);
    }
            
    //---------------------------------------------------------------------
    
    void SimonCommentsBreakOut(const tString &in asTimer)
    {
        Emotion_StartBackgroundBreath(eBreathType_Fear, 0.6f, 7, 8, 0, 3);
    }
    
    //---------------------------------------------------------------------
    
    void CamBreak_TimerResetPos(const tString&in asName)
    {
        PlayerHands_SetUseCustomPosition(false);
        PlayerHands_SetUseCustomRotation(false);	
    }
    
    ////////////////////////////
    ////////////////////////////
    ////////////////////////////
    
    void CathBox_ControlRoom_OnPlayerInteract(const tString &in asEntity)
    {
        Entity_SetActive(asEntity, false);
        Entity_CallEntityInteract("CathBoxTool");	//Give cath tool
        MakeMessage("OmniTool", 1);
    }

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{

	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// The player has died.
	void OnPlayerKilled(int alRecentDeaths, const tString&in asSource)
	{
	}
    
	void Update(float afTimeStep)
	{
		tString sSimOver = GetSimEnd();
		array<tString> vSimOver = cString_Split(sSimOver, "_");
		if (vSimOver.size()>0)
		{
			bool bIsOver = cString_ToBool(vSimOver[0], false);
			tString sPathName = vSimOver[1];
            tString sFullName = vSimOver[1]+vSimOver[2]+"_"+vSimOver[3];
			
			if (bIsOver)
			{
				cLux_AddDebugMessage("Text over - "+sFullName);
			}
		}
        
		tString sSimUpdate = GetSimUpdate();
		array<tString> vSimUpdate = cString_Split(sSimUpdate, "_");
		if (vSimUpdate.size()>0)
		{
			bool bUpdated = cString_ToBool(vSimUpdate[0], false);
			tString sPathName = vSimUpdate[1];
            tString FullPath = vSimUpdate[1]+vSimUpdate[2]+"_"+vSimUpdate[3];

            if (bUpdated) {
				if (FullPath=="OmniTool1_3") {
                    Player_SetActive(false);
                    Inventory_SetEnabled(false);
                    Entity_SetActive("deepsea_diver_helmet_1", true);
                    Entity_SetActive("simon_legs_deep_divingsuit_1", true);
                    Entity_SetActive("hands_deepsea_poseable_1", true);
                    Entity_SetActive("CathBox_LaunchPanel_1", true);
                    Map_AddTimer("Timer_Ending", 5.5f, "Timer_Ending");
                }
            }
        }
    }
    
    void Timer_Ending(const tString &in asTimer)
    {
        StopMessage();
        PlayCredits_Special("config/Credits_BadRep.cfg");
        mbEscSkipsCredits = true;
    }

	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
    bool mbEscSkipsCredits = false;
	void OnAction(int alAction, bool abPressed) 
	{
		if(abPressed==false) return;
		
		if (mbEscSkipsCredits)
		{
			if (alAction == eAction_OpenMenu)
			{
				// Skip the credits
				mbEscSkipsCredits = false;
                OnCreditsComplete();
			}
		} else if(alAction == eAction_Test1)
		{
            PlayCredits_Special("config/Credits_BadRep.cfg");
            mbEscSkipsCredits = true;
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	/*Put any variables that are used in more than one scene here.*/
 
	//-------------------------------------------------------
 
	/*Put any functions that are used in more than one scene here.*/
 
	//-------------------------------------------------------
 
	//} END MAIN FUNCTIONS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////


	 //} END SCENE X
 
 
	 /////////////////////////////////////////
	 // ==============
	 // TERMINALS
	 // ==============
	 //{//////////////////////////////////////
 
		 //-------------------------------------------------------
	 
		 /////////////////////////////////////////
		 // Terminal *Name Of Terminal*
		 //{//////////////////////////////////////
	 
		 //-------------------------------------------------------
	 
		 /*Put any variables that are only used Terminal here.*/
	 
		 //-------------------------------------------------------
	 
		 /*Put any functions that are only used Terminal here.*/
	 
		 //-------------------------------------------------------
	 
		 //} END Terminal *Name Of Terminal*
	
	//} END TERMINALS
 
}