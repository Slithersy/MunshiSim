#include "interfaces/Map_Interface.hps"

#include "base/InputHandler_Types.hps"
#include "helper_game.hps"
#include "helper_effects.hps"
#include "helper_map.hps"
#include "helper_props.hps"
#include "helper_areas.hps"
#include "helper_audio.hps"
#include "helper_sequences.hps"
#include "helper_modules.hps"
#include "helper_player.hps"
#include "helper_imgui.hps"
#include "helper_modules.hps"
#include "custom_depth/helper_custom_depth_audio.hps"
#include "helper_imgui_urban.hps"
#include "helper_imgui_cellphone.hps"
#include "helper_custom_depth.hps"
#include "helper_custom.hps"

//--------------------------------------------------

/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/

//--------------------------------------------------

class cScrMap : iScrMap
{
	//--------------------------------------------

	/////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	/////////////////////////////////////////
	//-------------------------------------------------------
	
	void Setup()
	{
		GetBase().SetDisplayNameEntry("Lvl0_Apartment");
		
		// Effect init
		Effect_Bloom_FadeBrightPass(0.25f, 2);
        Effect_Bloom_FadeBloomWidth(128, 2);
        Effect_Bloom_FadeBloomFalloff(0.5f, 2);
        Effect_Bloom_FadeBloomTint(1, 1, 1, 2);
	}
	
	//-------------------------------------------------------

	void PreloadData()
	{
		UrbanGui_Preload();
		CellphoneGui_Preload();
		PlayerHands_PreloadHandModel_Human();
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart() 
	{
		/////////////////////////
		///Preload Map
        Map_Preload("Lvl1_Laboratory");
        
		/////////////////////////
		///Preload Sounds
		Sound_PreloadProject("00_05_apartment2");
		Sound_PreloadProject("00_03_apartment1");
		Sound_PreloadProject("entities_urban");
		Sound_PreloadProject("physics");
        Sound_PreloadGroup("Player/reaction", true);
		Sound_SetGlobalVolume(0.0f);
		
		////////////////////////
		//Setup Entities
		Entity_SetInteractionDisabled("fire_alarm_1", true);

		////////////////////////////
		// Setup
		SetupLights();
		Billboard_SetVisible("PhoneBillboard",false);
		Entity_SetActive("pigeon_*", false);
		Entity_SetEffectsActive("fridge_light", false, false);

		////////////////////////////
		// Kick off intro
		if (cLux_ScriptDebugOn() == false) 
		{
			Effect_Fade_Out(0);
			
			///////////////////////////////
			// Intro dialogue over black screen
			Map_AddTimer("timer_introtext",1.5,"TimerStartNarration");
			
			/////////////////////
			// Disable interactions that interfere with wakeup sequence (re-enabled after phone call)
			Entity_SetInteractionDisabled("lamp_bedside_1",true);
			Entity_SetInteractionDisabled("chest_of_drawers_bedside_drawer_1",true);
			Entity_SetInteractionDisabled("chest_of_drawers_bedside_drawer_2",true);
			Entity_SetInteractionDisabled("mug_coffee_6",true);
			
			Entity_SetInteractionDisabled("InteractAuxArea_1",true);
			Entity_SetInteractionDisabled("Simon_PhoneHandset", true);
			Entity_SetInteractionDisabled("Simon_Phone", true);
			Entity_SetInteractionDisabled("chest_of_drawers_medium_drawer*",true);
		}

		///////////////////////////////
		// Defaults
		Player_SetJumpDisabled(false);
		Player_SetMoveSpeedMul(1.0);
		Player_SetLookSpeedMul(1.0);
		Player_SetRunSpeedMul(1.0);
		Player_SetAmbientLight_Indoors();

		Entity_SetMaxInteractionDistance("drapes_simon", 0.01); //So that only auxareas are used for interaction.
		Player_SetFlashlightDisabled(true);
		if (cLux_ScriptDebugOn())
		{
			Player_SetFlashlightDisabled(false);
		}
		
		PlayerHands_SetHandModel_Human();
		
		// Just in case!
		cScript_SetGlobalVarBool("InIntro",false);
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter() 
	{
		MainMenu_SetBGPhase(eMainMenuPhase_Initial_To_1_3);
		
		Player_SetFootWear("sneaker");
		Player_SetClothing("dressed");
	}

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if(abPressed==false) return;
        
        if (alAction == eAction_Test1)
        {
            EndLevel("Lvl1_Laboratory");
        }
	}
    
	//-------------------------------------------------------
    
    bool mbDavidCallDone = false;
	void Update(float afTimeStep)
	{
		tString sSimOver = GetSimEnd();
		array<tString> vSimOver = cString_Split(sSimOver, "_");
		if (vSimOver.size()>0)
		{
			bool bIsOver = cString_ToBool(vSimOver[0], false);
			tString sPathName = vSimOver[1];
			
			if (bIsOver)
			{
				cLux_AddDebugMessage("Text over");
				
				if (sPathName=="Path") {
					mbDavidCallDone = true;
                }
			}
		}
    }

	////////////////////////////
	// Run when leaving map
	void OnLeave() {}


	/////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	void TimerStartNarration(const tString &in asTimer)
	{
		//////////////////////////////////////////////////////////
		// Scene begins with dialogue over black screen
		Voice_SetSource("Player","player",0,100,false,100);
		IntroSequence("");
	}


	//-------------------------------------------------------

	/////////////////////////////////////////
	// ==============
	// SCENE 1 | APARTMENT
	// ==============
	/////////////////////////////////////////

	//////////////////////////////////
	// Initial lights configuration //
	//////////////////////////////////

	//-------------------------------------------------------
	void SetupLights() 
	{
		Light_FadeTo("WindowLight_3",cColor(0.0,0.0,0.0,0.0),0,0.75);
		
		Billboard_SetVisible("window_ray_*",false);
		
		ParticleSystem_SetVisible("ParticleSystem_HallwayLights",false);
		ParticleSystem_SetVisible("ParticleSystem_LivingRoomLight",false);
	}

	//-------------------------------------------------------

	/////////////////////////////////////////////
	// Scene 1 Event 1 | WAKE UP & ANSWER PHONE
	////////////////////////////////////////////

	//-------------------------------------------------------

	cSequenceStatesData mIntroSequence;
	bool mbSimonNotAnswered = false;
	void IntroSequence(const tString &in asTimer) 
	{
		Sequence_Begin("IntroSequence", mIntroSequence);
		
		/////////////////////////////////////
		//Fade in background audio
		if (Sequence_DoStepAndWait(0.01)) 
		{
			// Start Telephone Ringing (Note this is destroyed later when phone is answered)
			
			// Hack for phone sound
			Sound_StopGui("Entities_Urban/tech/cellphone/vibrating_wood",0.0f);

			Map_AddTimer("Timer_PhoneRing",0.05,"TimerRingTelephone");
			Player_SetLookSpeedMul(0.0f);
			
			Entity_SetActive("BedCollider",false);
			Entity_SetActive("BedCollider_Crouch",true);
			CameraAnimation_Begin("CamAnim_WakeUp","",true);
			
			Player_SetJumpDisabled(true);
			Player_SetCrouchDisabled(true);
			Player_SetStandDisabled(true);
			Player_SetHeadBobMul(0.0f);
		}

		/////////////////////////////////////////
		// Start in darkness and do camera anim
		if (Sequence_DoStepAndWait(0.01)) 
		{
			cLux_AddDebugMessage("Begin in darkness..");
			Effect_Fade_Out(0);
			Map_AddTimer("timer_phone_reminder",25.0f,"TimerPhoneHint");
			cLux_AddDebugMessage("Camera Animation Begin");
			int ID = Effect_ImageTrail_Start(1.0,0,10.0,5.0);
            Effect_ImageTrail_FadeOut(ID, 5.0f);
			
			Effect_Rumble_Start(5.7f, 5.5f, 2.0f, 1.0f);
		}

		/////////////////////////////////////////
		// Fade in from darkness
		if (Sequence_DoStepAndWait(3)) 
		{
			cLux_AddDebugMessage("Fade");
			Player_SetLookSpeedMul(0.75f);
			Effect_Fade_In(0.0);
			Sound_FadeGlobalVolume(1.0f, 1.0f, eSoundEntryType_WorldAll);
            Sound_FadeGlobalVolume(1.0f, 1.0f, eSoundEntryType_GuiWorld);
			
			Player_SetMoveSpeedMul(0);

			CameraAnimationNode_SetAutoMove("CamAnim_WakeUp_1", 1);
						
			Sound_CreateAtEntity("WakeUp","00_05_apartment2/SFX/bed_awaken","Player",0,false);
		}

		Sequence_End();
	}

	//-------------------------------------------------------
	
	bool WakeUpInteractHint(const tString &in asEntity, int alDirection)
	{
		Map_AddTimer("timer_phone_justwokeup", 1.0f, "TimerPhoneHint");
		
		return true;
	}

	//-------------------------------------------------------

	cVector2f mvSavedPitchLimits;
	
	bool OnWaitForPhoneInteraction(const tString &in asEntity, int alDirection)
	{
		Entity_SetActive("Legs", true);
		
	//	Entity_SetActive("InteractCellPhone",true);
		Entity_SetActive("InteractCellPhone_Dummy",true);
		
		mvSavedPitchLimits = Player_GetPitchLimits();
		Player_SetPitchLimits(-50, 20);
		Player_SetYawLimits(-30, 40);	
		
		if (EyeTracking_IsActive())
		{
			Player_SetPitchLimits(-40, 20);
			EyeTracking_SetExtendedViewMul(0.5f);
		}

		return true;
	}
	
	//-------------------------------------------------------
	
	void OnInteractCellPhone(const tString& in asEntity)
	{
		Entity_SetActive("InteractCellPhone", false);
		Entity_SetActive("InteractCellPhone_Dummy", false);

		PhoneInteraction(asEntity);
	}
	
	void TimerPhoneHint(const tString &in asTimer) 
	{
		bool bAddAsGiven = false;
		if(asTimer=="timer_phone_reminder")
			bAddAsGiven = true;
				
		Hint_ShowHint("Hints","HintPhone", true, 1.5f, bAddAsGiven);
	}
	
	//-------------------------------------------------------
	
	void TimerRingTelephone(const tString &in asTimer) 
	{
		////////////////////////////////
		// Ring the phone for 30 seconds
		Sound_CreateAtEntity("PhoneRing", "Entities_Urban/tech/cellphone/vibrating_wood", "MobilePhoneSource", 0, true);
        Sound_CreateAtEntity("PhoneTheme", "MunshiSim/Game/bubblegum_phone", "MobilePhoneSource", 0, true, 0.6f);
		Map_AddTimer("TimerSimonNotPickUp", 15.0f, "TimerSimonNotPickUp");
	}

	//-------------------------------------------------------
	
	void TimerSimonNotPickUp(const tString &in asTimer) 
	{
		Map_AddTimer("TimerSimonNotPickUp_MunshiAngry", 5.0f, "TimerSimonNotPickUp_MunshiAngry");
        Map_AddTimer("TimerSimonNotPickUp_Reaction", 1.5f, "TimerSimonNotPickUp_Reaction");
		Entity_SetActive("InteractCellPhone_Dummy",false);
		Sound_Stop("PhoneRing",0);
        Sound_Stop("PhoneTheme",0);
		mbSimonNotAnswered = true;
	}
    
	//-------------------------------------------------------
	
	void TimerSimonNotPickUp_Reaction(const tString &in asTimer) 
	{
        Sound_PlayGui("Player/reaction/emotes/urban/hallway/reaction_emotes_urban_hallway", 1.0f);
    }

	//-------------------------------------------------------
	
	void TimerSimonNotPickUp_MunshiAngry(const tString &in asTimer) 
	{
		Entity_SetActive("InteractCellPhone_Dummy",true);
		Sound_CreateAtEntity("PhoneRing","Entities_Urban/tech/cellphone/vibrating_wood","MobilePhoneSource",0,true);
		Sound_CreateAtEntity("PhoneRing1","Entities_Urban/tech/cellphone/vibrating_wood","MobilePhoneSource",0,true);
		Sound_CreateAtEntity("PhoneRing2","Entities_Urban/tech/cellphone/vibrating_wood","MobilePhoneSource",0,true);
        Sound_CreateAtEntity("PhoneTheme", "MunshiSim/Game/bubblegum_phone", "MobilePhoneSource", 0, true);
        Sound_PlayGui("Player/reaction/air/gasp", 1.0f);
		mbSimonNotAnswered = false;
	}

	//Entity_SetActive("InteractCellPhone_Dummy",true);

	//-------------------------------------------------------

	void TimerStopTelephone(const tString &in asTimer) 
	{
		//////////////////////////////
		// Stop phone ringing and disable interaction
		Sound_Stop("PhoneRing",0);
		Sound_Stop("PhoneRing1",0);
		Sound_Stop("PhoneRing2",0);
        Sound_Stop("PhoneTheme",0);
	}

	//-------------------------------------------------------
	
	void PhoneInteraction(const tString &in asEntity)
	{
		AnswerPhone("Simon_Phone",1);
		Map_RemoveTimer("timer_phone_justwokeup");
		Map_RemoveTimer("timer_phone_reminder");
	}
	
	//-------------------------------------------------------

	bool AnswerPhone(const tString &in asEntity, int alDirection, const tString &in asMessage="AnswerPhoneMessage") 
	{
		CameraAnimation_End();
		Player_ChangeStateToNormal();
    
        ////////////////////////////
        // Pickup the phone
        Map_RemoveTimer("Timer_StopRinging");
        Map_RemoveTimer("TimerSimonNotPickUp");
        if (asMessage=="AnswerPhoneMessage") Map_AddTimer("Timer_StopRinging",0.1,"TimerStopTelephone");
        Hint_StopHint();
        
        Entity_SetActive("InteractCellPhone_Dummy", false);
        Entity_SetActive("CellPhone",false);
        Entity_SetActive("CellPhoneArm", true);
        Entity_CallEntityInteract("CellPhoneArm");
        Effect_Shake_EnableAll(true);
        
        //////////////////////////
        // Pickup sound
        Sound_CreateAtEntity("PhonePickup","00_05_apartment2/SFX/phone/pickup_counter","Simon_Phone",0,false);
        Map_AddTimer(asMessage, 2.0f, asMessage);

        return false;
	}
    
	void AnswerPhoneMessage(const tString&in asTimer)
	{
        MakeMessage("Path", 1, 1);
        cPlayMusic("music/AnimalCrossing/fireworks_show.mp3", 1.0f, 2.0f, true);
	}
	
	//-------------------------------------------------------
	
	void OnExitCellPhone(const tString&in asEntityName)
	{
		if (Map_TimerExists("TimerExitCellPhone"))
			return;
		Map_AddTimer("TimerExitCellPhone",0.5f,"TimerExitCellPhone");
        Map_AddTimer("WAUCall",2.0f,"WAUCall");
	}
    
	void WAUCall(const tString& in asName)
	{
		Sound_CreateAtEntity("PhoneRing", "Entities_Urban/tech/cellphone/vibrating_wood", "Legs", 0, true);
        Sound_CreateAtEntity("PhoneTheme", "MunshiSim/Game/bubblegum_phone", "Legs", 0, true, 0.6f);
        
        Sound_PlayGui("Player/foley/dressed/pose_stand", 1.0f);
        Map_AddTimer("WAUPickup",5.0f,"WAUPickup");
        Map_AddTimer("WAUCallPlayerReact",3.0f,"WAUCallPlayerReact");
	}
    
	void WAUCallPlayerReact(const tString& in asName)
	{
        Sound_PlayGui("Player/reaction/emotes/urban/waitingroom/reaction_emotes_urban_waitingroom", 1.0f);
	}
    
    bool mbWAUPickUp = false;
	void WAUPickup(const tString& in asName)
	{
        mbDavidCallDone = false;
        mbWAUPickUp = true;
        Sound_Stop("PhoneRing",0);
        Sound_Stop("PhoneTheme",0);
        AnswerPhone("Simon_Phone",1,"WAUAnswerPhoneMessage");
	}
    
    bool mbWAUFinish = false;
	void WAUAnswerPhoneMessage(const tString&in asTimer)
	{
        MakeMessage("Path", 4, 1);
        cPlayMusic("music/AnimalCrossing/fireworks_show.mp3", 1.0f, 2.0f, true);
        
		Entity_SetActive("CellPhone",true);
		Entity_SetActive("CellPhoneArm",true);
        mbWAUFinish = true;
	}
	
	//-------------------------------------------------------
	
	void TimerExitCellPhone(const tString& in asName)
	{
        cStopMusic();
		Sound_CreateAtEntity("PutawayPhone", "00_05_apartment2/SFX/phone/pickup_putaway", "Player");
		Entity_SetActive("CellPhone",false);
		Entity_SetActive("CellPhoneArm",false);
        
        if (mbWAUFinish) EndLevel("Lvl1_Laboratory");
	}

	//-------------------------------------------------------

	void OnGuiCellPhone(const tString&in asEntityName, float afTimeStep)
	{
		if (mbSimonNotAnswered) return;

		if (ImGui_IsFirstRun()||mbWAUPickUp)
		{
			CellPhoneGui_SetClockString("00_01_Time");
			CellPhoneGui_SetReceptionIcons("A");
			
			if (asEntityName=="CellPhoneArm_open")	// Picked up
			{
                if (mbWAUPickUp) {
                    CellPhoneGui_PickUp("unknown");
                    mbWAUPickUp = false;
                } else CellPhoneGui_PickUp("Munshi");
			}
			else	// On bedside table
			{
				CellPhoneGui_StartRinging("Munshi");
			}
		}
		
		CellPhoneGui_Update();
		
		if (mbDavidCallDone&&asEntityName=="CellPhoneArm_open")
		{
			if (CellPhoneGui_GetState()!=eCellPhoneGuiState_Idle)
			{
				ImGui_Exit();

                CellPhoneGui_HangUp();
			}
		}
	}
    
	//-------------------------------------------------------

	void Laptop_OnGui(const tString&in asEntityName, float afTimeStep) 
	{
		UrbanGui_Unbranded_DrawBackdrop(1.0f);
		UrbanGui_PACE_DrawDesktopIcons(2.0f);

		ImGui_SetTransCategory("00_01_apartment");
		
		Depth_ImGui_AddMail("GUI_EMAIL_SUBJ1", "EMAIL_1_BODY", "EMAIL_1_FROM", "EMAIL_1_DATE", eMailAppEntryType_Inbox);
		Depth_ImGui_AddMail("GUI_EMAIL_SUBJ2", "EMAIL_2_BODY", "EMAIL_2_FROM", "EMAIL_2_DATE", eMailAppEntryType_Inbox);
		Depth_ImGui_AddMail("GUI_EMAIL_SUBJ3", "EMAIL_3_BODY", "EMAIL_3_FROM", "EMAIL_3_DATE", eMailAppEntryType_Draft);
		UrbanGui_MailApp("GUIMailASimon", "MailSent_ApartmentEmail", "Mail_SelectionChanged");
	}
    
    //-------------------------------------------------------
    
	void televison_small_1_OnGui(const tString&in asEntityName, float afTimeStep) 
	{
		////////////////////////////////
		// Display "no disc" message
		ImGui_SetTransCategory("");
		cImGuiLabelData labelData;
		labelData.mColorText = cColor(1,1,1,1);
		labelData.mFontAlign = eFontAlign_Center;

		cImGuiGfx mDiscGfx;
		mDiscGfx.SetFile("urban/tv/00_05_tv_no_disc");
		
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Audio
	//{///////////////////////////////////////
	
	//-------------------------------------------------------
	//Ambient audio 
	
	void Timer_PlayNeighbourCeilingSound(const tString &in asTimer)
	{
		// Play noisy neighbours above - oneshot special
		cLux_AddDebugMessage("Noisy neighbours start");
		Sound_CreateAtEntity("neighbours_above", "00_05_apartment2/amb/spot/couple_arguing_01", "Sound_NeighboursSource");
		Map_AddTimer("ceiling_neighboursgeneric", cMath_RandRectf(20.0f, 35.0f), "Timer_PlayNeighbourGenericSound");
	}
	
	//Repeating timer - for neighbours upstairs
	void Timer_PlayNeighbourGenericSound(const tString &in asTimer)
	{
		// Play noisy neighbours above - generic movement
		cLux_AddDebugMessage("Noisy neighbours start - generic");
		Sound_CreateAtEntity("neighbours_above_generic", "00_05_apartment2/amb/spot/movements_above", "Sound_NeighboursSource");
		Map_AddTimer("ceiling_neighboursgeneric", cMath_RandRectf(20.0f, 35.0f), "Timer_PlayNeighbourGenericSound");
	}
	
	//}End Audio-----------------------------------------------------
}
