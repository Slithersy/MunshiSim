#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"
#include "helper_custom.hps"
#include "helper_player.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/
 
//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
	
	}
	
	//-------------------------------------------------------
    
    array<bool> CoffeeMachine_HasCupArray;
    array<bool> CoffeeMachine_AllowedSpawnArray;
    void InitializeCoffeeMachine() {
        for (int i=0; i<2; i++) {
            CoffeeMachine_HasCupArray.insertLast(false);
            CoffeeMachine_AllowedSpawnArray.insertLast(false);
        }
        
        for (int i=1; i<10; i++) {
            if (Entity_Exists("coffeemachine_"+i)) {
                CoffeeMachine_HasCupArray.insertLast(false);
                CoffeeMachine_AllowedSpawnArray.insertLast(false);
            } else break;
        }
    }

	////////////////////////////
	// Run first time starting map
    tString MapName = "";
	void OnStart()
	{
        MapName = cLux_GetCurrentMap().GetName();
        
        Player_SetFlashlightDisabled(true);
        Player_SetActive(true);
        Entity_SetActive("BlockCom_MunshiScare_*", false);
        Entity_SetActive("BlockCom_MunshiScareBehind_*", false);
        Entity_SetActive("BlockCom_MunshiReverseBehind_*", false);
        Entity_SetActive("Distortion_MunshiCoffee_*", false);
        Entity_SetActive("Block_MunshiCoffee_*", false);
        
        tString sPlace = cString_FullyTranslate(MapName, "LevelScreen_Place");
        tString sTime = cString_FullyTranslate(MapName, "LevelScreen_Time");
        
        if (!cLux_DebugModeOn()) BeginningText(sPlace, sTime, 5.0f);
        InitializeCoffeeMachine();
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter() 
    {
        ChangeMunshiAnim("David_Tree");
    }

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// The player has died.
	void OnPlayerKilled(int alRecentDeaths, const tString&in asSource)
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if(abPressed==false) return;
		
		if (alAction == eAction_Test1)
		{
            WauCalls("WAUAdvice");
		} else if (alAction == eAction_Test2) {
            MunshiWalk(1, 200, 0.1f);
        }
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
    
    bool bCalledBeginningTextProg = false;
    bool bIsHalfwayWalk = false;
    bool bIsAtCoffee = false;
	void Update(float afTimeStep)
	{
		if (!bCalledBeginningTextProg && (GetBeginningTextProg() <= 0)) {
            SetObjective("FindMunshi", true);
            bCalledBeginningTextProg = true;
        }
        
        if (!bIsHalfwayWalk && Entity_IsActive("David_WalkRight_4")) {
            WauCalls("WAUAdvice");
            bIsHalfwayWalk = true;
        } else if (!bIsAtCoffee && Entity_IsActive("David_WalkRight_26")) {
            Map_AddTimer("MunshiAtCoffee", 0.5f, "MunshiAtCoffee");
            bIsAtCoffee = true;
        }
        
		tString sSimOver = GetSimEnd();
		array<tString> vSimOver = cString_Split(sSimOver, "_");
		if (vSimOver.size()>0)
		{
			bool bIsOver = cString_ToBool(vSimOver[0], false);
			tString sPathName = vSimOver[1];
			
			if (bIsOver)
			{
				cLux_AddDebugMessage("Text over");
				
				if (sPathName=="InteractSign") {
                    Player_SetActive(true);
                } else if ((sPathName=="MunshiHideReverse") || (sPathName=="MunshiHideScare")) {
                    MunshiWalk(1, 200, 0.4f);
                    Entity_SetActive("BlockCom_MunshiScare_*", false);
                    Entity_SetActive("BlockCom_MunshiScareBehind_*", false);
                    Entity_SetActive("BlockCom_MunshiReverseBehind_*", false);
                    Entity_SetActive("Block_MunshiHide_*", false);
                    Entity_SetActive("Distortion_MunshiHide_*", false);
                }
			}
		}
    }
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------

	///////////////////////
	// Drinking Fountain //
	///////////////////////
    void DrinkingFountain_OnPlayerInteract(const tString &in asEntity)
    {
        int ID = cString_ToInt(cString_Split(asEntity, "_")[2], 1);
        ParticleSystem_Destroy("DrinkingFountain_Splash_"+ID);
        ParticleSystem_Destroy("DrinkingFountain_Water_"+ID);
        Sound_Stop("DrinkingFountain_On_"+ID, 0.0f);
        
        ParticleSystem_CreateAtEntity("DrinkingFountain_Splash_"+ID, "toilet_flush_splash.ps", "DrinkingFountain_Splash_"+ID, true);
        ParticleSystem_CreateAtEntity("DrinkingFountain_Water_"+ID, "water/waitingroom_waterfountain.ps", "DrinkingFountain_Water_"+ID, true);
        
        Sound_CreateAtEntity("DrinkingFountain_On_"+ID, "Entities_Urban/utility/water_fountain/interact_joint_events", asEntity);
        Map_AddTimer("DrinkingFountain_"+ID, 1.0f, "DrinkingFountain_TurnOff");
    }
    
    void DrinkingFountain_TurnOff(const tString &in asTimer) {
        int ID = cString_ToInt(cString_Split(asTimer, "_")[1],1);
        
        ParticleSystem_Destroy("DrinkingFountain_Splash_"+ID);
        ParticleSystem_Destroy("DrinkingFountain_Water_"+ID);
        Sound_Stop("DrinkingFountain_On_"+ID, 0.0f);
        Sound_CreateAtEntity("DrinkingFountain_Off_"+ID, "Entities_Urban/utility/water_fountain/interact_during_loop_off", "DrinkingFountain_Button_"+ID);
    }

	/////////////////////////////////////////
	// ==============
	// SCENE 1 | ENTER PARK
	// ==============
	/////////////////////////////////////////
    
    void Sign_Zoom_OnPlayerInteract(const tString &in asEntity)
    {
        Player_SetActive(false);
        MakeMessage("InteractSign");
    }
    
    bool bMunshiShouldScare = false;
    bool bLookedAtMunshiScare = false;
    bool MunshiSearchTooFar(const tString &in asParent, const tString &in asChild, int alState)
    {
        if (bLookedAtMunshiScare) return false;
        MakeMessage("FindMunshiTooFar_"+cMath_RandRectl(1,2));
        return false;
    }
    
    bool MunshiHideShouldScare(const tString &in asParent, const tString &in asChild, int alState)
    {
        if (bLookedAtMunshiScare) return false;
        bMunshiShouldScare = tobool(alState);
        
        return true;
    }
    
    void OnLookAtMunshiHide(const tString &in asEntity, int alState)
    {
        Entity_SetActive("SightBlock_*", false);
        if (bMunshiShouldScare) {
            MakeMessage("MunshiHideScare", 1);
            Entity_SetActive("BlockCom_MunshiScareBehind_*", true);
            //Player_Teleport("MunshiHide_Teleport_1", true);
        } else {
            MakeMessage("MunshiHideReverse", 1);
            Entity_SetActive("BlockCom_MunshiReverseBehind_*", true);
            //Player_Teleport("MunshiHide_Teleport_2", true);
        }

        Entity_SetActive("BlockCom_MunshiScare_*", true);
        bLookedAtMunshiScare = true;
    }
    
	/////////////////////////////////////////
	// ==============
	// SCENE 2 | COFFEE MACHINE
	// ==============
	/////////////////////////////////////////
    bool bHasUsedMachine = false;
    
    void MunshiAtCoffee(const tString &in asTimer) {
        ChangeMunshiAnim("David_CoffeeShow_1");
    }
    
    bool AtCoffeeMachineTriggerArea(const tString &in asParent, const tString &in asChild, int alState)
    {
        if (bIsAtCoffee) {
            MakeMessage("MunshiAtCoffee");
            Entity_SetActive("Distortion_MunshiCoffee_*", true);
            Entity_SetActive("Block_MunshiCoffee_*", true);
            return false;
        }
        
        return true;
    }
    
    
    ////Coffee Machine////
    void coffeemachine_button_OnPlayerInteract(const tString &in asEntity)
    {
        int ID = cString_ToInt(cString_Split(asEntity, "_")[2], 1);
        Map_RemoveTimer("CoffeeMachine_"+ID);
        ParticleSystem_Destroy("CoffeeMachine_On_"+ID);
        Sound_Stop("CoffeeMachine_Sound_"+ID, 0.0f);
        Sound_CreateAtEntity("CoffeeMachine_Sound_"+ID, "Entities_Urban/utility/water_cooler/button_press", asEntity, 0.0f, false, 1.0f);

        //ParticleSystem_CreateAtEntity("CoffeeMachine_On_"+ID, "stream_leak.ps", "coffeemachine_dropzone_"+ID, true);
        ParticleSystem_CreateAtEntityExt("CoffeeMachine_On_"+ID, "toilet_sink_stream.ps", "coffeemachine_dropzone_"+ID, true, cColor(0.38,0.19,0.1,1));
        Map_AddTimer("CoffeeMachine_"+ID, 3.0f, "CoffeeMachine_TurnOff");
        
        if (CoffeeMachine_HasCupArray[ID]) CoffeeMachine_AllowedSpawnArray[ID] = true;
    }
    
    void CoffeeMachine_TurnOff(const tString &in asTimer) {
        int ID = cString_ToInt(cString_Split(asTimer, "_")[1],1);
        
        ParticleSystem_Destroy("CoffeeMachine_On_"+ID);
        Sound_Stop("CoffeeMachine_Sound_"+ID, 1.0f);
    }
    
    void coffeemachine_placezone_1_OnPlayerInteract(const tString &in asEntity)
    {
        int ID = cString_ToInt(cString_Split(asEntity, "_")[2],1);

        if (CoffeeMachine_AllowedSpawnArray[ID]) {
            Entity_SetActive("coffeemachine_mugin_"+ID, false);
            Entity_CreateAtEntity("coffeemachine_spawnedmug_"+ID, "mug_coffee.ent", "coffeemachine_spawnzone_"+ID, true);
            CoffeeMachine_HasCupArray[ID] = false;
            CoffeeMachine_AllowedSpawnArray[ID] = false;
            
            if (!bHasUsedMachine) {
                MakeMessage("MunshiCoffee", 1, 1);
                bHasUsedMachine = true;
            }
        }
    }
    
    bool coffeemachine_placezone_Trigger(const tString &in asParent, const tString &in asChild, int alState) {
        int ID = cString_ToInt(cString_Split(asParent, "_")[2], 1);
        
        if (!CoffeeMachine_HasCupArray[ID] && bIsAtCoffee) {
            Entity_SetActive("coffeemachine_mugin_"+ID, true);
            Entity_Destroy(asChild);
            CoffeeMachine_HasCupArray[ID] = true;
        }
        
        return true;
    }
 
    ////Phone Special////
    void OnGuiCellPhoneCall(const tString&in asEntityName, float afTimeStep) {
        OnGuiCellPhone(asEntityName, afTimeStep);
    }
    void OnExitCellPhoneCall(const tString&in asEntityName) {
        OnExitCellPhone(asEntityName);
    }
	//} END MAIN FUNCTIONS
}