#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"
#include "helper_custom.hps"
#include "helper_player.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/
 
//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
	
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
    tString MapName = "";
	void OnStart()
	{
        MapName = cLux_GetCurrentMap().GetName();
        
        Player_SetFlashlightDisabled(true);
        Player_SetActive(true);
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter() 
    {
    }

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// The player has died.
	void OnPlayerKilled(int alRecentDeaths, const tString&in asSource)
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if(abPressed==false) return;
		
		if(alAction == eAction_Test1)
		{
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
    
	void Update(float afTimeStep)
	{
		tString sSimOver = GetSimEnd();
		array<tString> vSimOver = cString_Split(sSimOver, "_");
		if (vSimOver.size()>0)
		{
			bool bIsOver = cString_ToBool(vSimOver[0], false);
			tString sPathName = vSimOver[1];
			
			if (bIsOver)
			{
				cLux_AddDebugMessage("Text over");
				
				if (sPathName=="InteractSign") {
                    Player_SetActive(true);
                }
			}
		}
    }
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------

	///////////////////////
	// Drinking Fountain //
	///////////////////////
    void DrinkingFountain_OnPlayerInteract(const tString &in asEntity)
    {
        int ID = cString_ToInt(cString_Split(asEntity, "_")[2], 1);
        ParticleSystem_Destroy("DrinkingFountain_Splash_"+ID);
        ParticleSystem_Destroy("DrinkingFountain_Water_"+ID);
        Sound_Stop("DrinkingFountain_On_"+ID, 0.0f);
        
        ParticleSystem_CreateAtEntity("DrinkingFountain_Splash_"+ID, "toilet_flush_splash.ps", "DrinkingFountain_Splash_"+ID, true);
        ParticleSystem_CreateAtEntity("DrinkingFountain_Water_"+ID, "water/waitingroom_waterfountain.ps", "DrinkingFountain_Water_"+ID, true);
        
        Sound_CreateAtEntity("DrinkingFountain_On_"+ID, "Entities_Urban/utility/water_fountain/interact_joint_events", asEntity);
        Map_AddTimer("DrinkingFountain_"+ID, 1.0f, "DrinkingFountain_TurnOff");
    }
    
    void DrinkingFountain_TurnOff(const tString &in asTimer) {
        int ID = cString_ToInt(cString_Split(asTimer, "_")[1],1);
        
        ParticleSystem_Destroy("DrinkingFountain_Splash_"+ID);
        ParticleSystem_Destroy("DrinkingFountain_Water_"+ID);
        Sound_Stop("DrinkingFountain_On_"+ID, 0.0f);
        Sound_CreateAtEntity("DrinkingFountain_Off_"+ID, "Entities_Urban/utility/water_fountain/interact_during_loop_off", "DrinkingFountain_Button_"+ID);
    }

	/////////////////////////////////////////
	// ==============
	// SCENE 1 | ENTER PARK
	// ==============
	/////////////////////////////////////////
    
    void Sign_Zoom_OnPlayerInteract(const tString &in asEntity)
    {
        Player_SetActive(false);
        MakeMessage("InteractSign");
    }
 
	//} END MAIN FUNCTIONS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE X *NAME OF SCENE*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		 /////////////////////////////////////////
		 // General
		 //{//////////////////////////////////////
		 
		//-------------------------------------------------------
	 
		/*Put any variables that are used by many events in Scene X here.*/
	 
		//-------------------------------------------------------
	 
		/*Put any functions that are used in more than one event in Scene X here.*/
	 
		//-------------------------------------------------------
		
		//} END General	
	 
		 /////////////////////////////////////////
		 // Event *Name Of Event*
		 //{//////////////////////////////////////
	 
		 //-------------------------------------------------------
	 
		 /*Put any variables that are only used in Scene X, Event X here.*/
	 
		 //-------------------------------------------------------
	 
		 /*Put any functionsthat are only used in Scene X, Event X here.*/
	 
		 //-------------------------------------------------------
	 
		 //} END Event *Name Of Event*
	 
	 //} END SCENE X
 
 
	 /////////////////////////////////////////
	 // ==============
	 // TERMINALS
	 // ==============
	 //{//////////////////////////////////////
 
		 //-------------------------------------------------------
	 
		 /////////////////////////////////////////
		 // Terminal *Name Of Terminal*
		 //{//////////////////////////////////////
	 
		 //-------------------------------------------------------
	 
		 /*Put any variables that are only used Terminal here.*/
	 
		 //-------------------------------------------------------
	 
		 /*Put any functions that are only used Terminal here.*/
	 
		 //-------------------------------------------------------
	 
		 //} END Terminal *Name Of Terminal*
	
	//} END TERMINALS
 
}