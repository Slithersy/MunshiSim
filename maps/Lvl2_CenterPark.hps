#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"
#include "helper_custom.hps"
#include "helper_player.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/
 
//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
	
	}
	
	//-------------------------------------------------------
    
    array<bool> CoffeeMachine_HasCupArray;
    array<bool> CoffeeMachine_AllowedSpawnArray;
    void InitializeCoffeeMachine() {
        for (int i=0; i<2; i++) {
            CoffeeMachine_HasCupArray.insertLast(false);
            CoffeeMachine_AllowedSpawnArray.insertLast(false);
        }
        
        for (int i=1; i<10; i++) {
            if (Entity_Exists("coffeemachine_"+i)) {
                CoffeeMachine_HasCupArray.insertLast(false);
                CoffeeMachine_AllowedSpawnArray.insertLast(false);
            } else break;
        }
    }

	////////////////////////////
	// Run first time starting map
    tString MapName = "";
	void OnStart()
	{
        MapName = cLux_GetCurrentMap().GetName();
        
        Player_SetFlashlightDisabled(true);
        Player_SetActive(true);
        Entity_SetActive("BlockCom_MunshiScare_*", false);
        Entity_SetActive("BlockCom_MunshiScareBehind_*", false);
        Entity_SetActive("BlockCom_MunshiReverseBehind_*", false);
        Entity_SetActive("Distortion_MunshiCoffee_*", false);
        Entity_SetActive("Block_MunshiCoffee_*", false);
        
        tString sPlace = cString_FullyTranslate(MapName, "LevelScreen_Place");
        tString sTime = cString_FullyTranslate(MapName, "LevelScreen_Time");
        
        if (!cLux_ScriptDebugOn()) BeginningText(sPlace, sTime, 5.0f);
        InitializeCoffeeMachine();
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter() 
    {
        ChangeMunshiAnim("David_Tree");
    }

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// The player has died.
	void OnPlayerKilled(int alRecentDeaths, const tString&in asSource)
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if(abPressed==false) return;
		
		if (alAction == eAction_Test1)
		{
            iLuxEntity@ pMugEntity = cLux_GetCurrentMap().GetEntityByName("mug_coffee_2", eLuxEntityType_LastEnum, "");
            if (pMugEntity is null)
            {
                Error("Could not find the target entity mug_coffee_2");
                return;
            }
            cLux_AddDebugMessage("6");
            pMugEntity.SetPosition(cVector3f(-68.706, 3.90, 99.437));
		} else if (alAction == eAction_Test2) {
            MunshiWalk(1, 26, 0.03f);
        } else if (alAction == eAction_Test3)
		{
            WaterSequence("");
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
    
    bool bCalledBeginningTextProg = false;
    bool bIsHalfwayWalk = false;
    bool bIsAtCoffee = false;
    bool bIsMunshiSwimming = false;
    int mlid_RadialBlur;
	void Update(float afTimeStep)
	{
		if (!bCalledBeginningTextProg && (GetBeginningTextProg() <= 0)) {
            SetObjective("FindMunshi", true);
            bCalledBeginningTextProg = true;
        }
        
        if (!bIsHalfwayWalk && Entity_IsActive("David_WalkRight_4")) {
            WauCalls("WAUAdvice");
            bIsHalfwayWalk = true;
        } else if (!bIsAtCoffee && Entity_IsActive("David_WalkRight_26")) {
            Map_AddTimer("MunshiAtCoffee", 0.5f, "MunshiAtCoffee");
            bIsAtCoffee = true;
        } else if (!bIsMunshiSwimming && Entity_IsActive("David_WalkRight_41")) {
            Entity_SetActive("Block_MunshiSwim_1", false);
            Entity_SetActive("Distortion_MunshiSwim_1", false);
            Map_AddTimer("MunshiIsSwimming", 0.5f, "MunshiIsSwimming");
            MakeMessage("MunshiInviteSwim");
            
            bIsMunshiSwimming = true;
        }
        
        if ((lInCoffeeArea == 1) && bIsAtCoffee && !bCalledCoffee) {
            Map_RemoveTimer("MunshiWalkTimer");
            AtCoffeeMachineTriggerArea("", "", 0);
        }
        
		tString sSimOver = GetSimEnd();
		array<tString> vSimOver = cString_Split(sSimOver, "_");
		if (vSimOver.size()>0)
		{
			bool bIsOver = cString_ToBool(vSimOver[0], false);
			tString sPathName = vSimOver[1];
            tString sFullName = vSimOver[1]+vSimOver[2]+"_"+vSimOver[3];
			
			if (bIsOver)
			{
				cLux_AddDebugMessage("Text over - "+sFullName);
				
				if (sPathName=="InteractSign") {
                    Player_SetActive(true);
                } else if ((sPathName=="MunshiHideReverse") || (sPathName=="MunshiHideScare")) {
                    MunshiWalk(1, 26, 0.4f);
                    Entity_SetActive("BlockCom_MunshiScare_*", false);
                    Entity_SetActive("BlockCom_MunshiScareBehind_*", false);
                    Entity_SetActive("BlockCom_MunshiReverseBehind_*", false);
                    Entity_SetActive("Block_MunshiHide_*", false);
                    Entity_SetActive("Distortion_MunshiHide_*", false);
                } else if ((sFullName=="MunshiSwim6_2") || (sFullName=="MunshiSwim7_4") || (sFullName=="MunshiCoffee9_7")) {
                    //Change map to Munshi's house
                } else if ((sFullName=="MunshiCoffee8_3")) {
                    //Enable swimming
                    Entity_SetActive("Block_MunshiCoffee_2", false);
                    Entity_SetActive("Block_MunshiCoffee_4", false);
                    Entity_SetActive("Distortion_MunshiCoffee_2", false);
                    Entity_SetActive("Distortion_MunshiCoffee_4", false);
                    
                    MunshiWalk(27, 200, 0.1f);
                }
			}
		}
        
		tString sSimUpdate = GetSimUpdate();
		array<tString> vSimUpdate = cString_Split(sSimUpdate, "_");
		if (vSimUpdate.size()>0)
		{
			bool bUpdated = cString_ToBool(vSimUpdate[0], false);
			tString sPathName = vSimUpdate[1];
            tString FullPath = vSimUpdate[1]+vSimUpdate[2]+"_"+vSimUpdate[3];

            if (bUpdated) {
                if (FullPath=="MunshiSwim1_5") {
                    mlid_RadialBlur = Effect_RadialBlur_Start(0.1f,0.75f,0.1f,0.01f);
                    Effect_Fade_In(0.5f);
                }
            }
        }
    }
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------

	///////////////////////
	// Drinking Fountain //
	///////////////////////
    void DrinkingFountain_OnPlayerInteract(const tString &in asEntity)
    {
        int ID = cString_ToInt(cString_Split(asEntity, "_")[2], 1);
        ParticleSystem_Destroy("DrinkingFountain_Splash_"+ID);
        ParticleSystem_Destroy("DrinkingFountain_Water_"+ID);
        Sound_Stop("DrinkingFountain_On_"+ID, 0.0f);
        
        ParticleSystem_CreateAtEntity("DrinkingFountain_Splash_"+ID, "toilet_flush_splash.ps", "DrinkingFountain_Splash_"+ID, true);
        ParticleSystem_CreateAtEntity("DrinkingFountain_Water_"+ID, "water/waitingroom_waterfountain.ps", "DrinkingFountain_Water_"+ID, true);
        
        Sound_CreateAtEntity("DrinkingFountain_On_"+ID, "Entities_Urban/utility/water_fountain/interact_joint_events", asEntity);
        Map_AddTimer("DrinkingFountain_"+ID, 1.0f, "DrinkingFountain_TurnOff");
    }
    
    void DrinkingFountain_TurnOff(const tString &in asTimer) {
        int ID = cString_ToInt(cString_Split(asTimer, "_")[1],1);
        
        ParticleSystem_Destroy("DrinkingFountain_Splash_"+ID);
        ParticleSystem_Destroy("DrinkingFountain_Water_"+ID);
        Sound_Stop("DrinkingFountain_On_"+ID, 0.0f);
        Sound_CreateAtEntity("DrinkingFountain_Off_"+ID, "Entities_Urban/utility/water_fountain/interact_during_loop_off", "DrinkingFountain_Button_"+ID);
    }

	/////////////////////////////////////////
	// ==============
	// SCENE 1 | ENTER PARK
	// ==============
	/////////////////////////////////////////
    
    void Sign_Zoom_OnPlayerInteract(const tString &in asEntity)
    {
        Player_SetActive(false);
        MakeMessage("InteractSign");
    }
    
    bool bMunshiShouldScare = false;
    bool bLookedAtMunshiScare = false;
    bool MunshiSearchTooFar(const tString &in asParent, const tString &in asChild, int alState)
    {
        if (bLookedAtMunshiScare) return false;
        MakeMessage("FindMunshiTooFar_"+cMath_RandRectl(1,2));
        return false;
    }
    
    bool MunshiHideShouldScare(const tString &in asParent, const tString &in asChild, int alState)
    {
        if (bLookedAtMunshiScare) return false;
        bMunshiShouldScare = tobool(alState);
        
        return true;
    }
    
    void OnLookAtMunshiHide(const tString &in asEntity, int alState)
    {
        Entity_SetActive("SightBlock_*", false);
        if (bMunshiShouldScare) {
            MakeMessage("MunshiHideScare", 1);
            Entity_SetActive("BlockCom_MunshiScareBehind_*", true);
            //Player_Teleport("MunshiHide_Teleport_1", true);
        } else {
            MakeMessage("MunshiHideReverse", 1);
            Entity_SetActive("BlockCom_MunshiReverseBehind_*", true);
            //Player_Teleport("MunshiHide_Teleport_2", true);
        }

        Entity_SetActive("BlockCom_MunshiScare_*", true);
        bLookedAtMunshiScare = true;
    }
    
	/////////////////////////////////////////
	// ==============
	// SCENE 2 | COFFEE MACHINE
	// ==============
	/////////////////////////////////////////
    
    ////Mug protection////
    int lTimesThrownCup = 0;
    bool CupTeleportBack(const tString &in asParent, const tString &in asChild, int alState)
    {
        array<tString> SplitName = cString_Split(asChild, "_");
        if (SplitName.size()>0)
        {
            //mug_coffee_2
            int sNumber = cString_ToInt(SplitName[2], 1);
            if ((alState == -1) || (asParent == "Area_CupTeleport_1")) {
                if (asParent != "Area_CupTeleport_1")
                    Map_AddTimer("MugThrow_"+sNumber, 1.0f, "MugThrow_"+sNumber);
                else {
                    if (sNumber == 1)
                        MugThrow_1("");
                    else MugThrow_2("");
                }
                
                lTimesThrownCup++;
                if (lTimesThrownCup > 5) {
                    Hint_ShowHint("DateSim_Hints", "StopThrowingMugs", false, 2.0f);
                }
            } else {
                Map_RemoveTimer("MugThrow_"+sNumber);
            }
        }
        
        return true;
    }
    
    void MugThrow_1(const tString &in asTimer) {
        iLuxEntity@ pMugEntity = cLux_GetCurrentMap().GetEntityByName("mug_coffee_1", eLuxEntityType_LastEnum, "");
        if (pMugEntity is null)
        {
            Error("Could not find the target entity mug_coffee_1");
            return;
        }

        pMugEntity.SetPosition(cVector3f(-68.5, 3.90, 100));
    }
    
    void MugThrow_2(const tString &in asTimer) {
        iLuxEntity@ pMugEntity = cLux_GetCurrentMap().GetEntityByName("mug_coffee_2", eLuxEntityType_LastEnum, "");
        if (pMugEntity is null)
        {
            Error("Could not find the target entity mug_coffee_2");
            return;
        }

        pMugEntity.SetPosition(cVector3f(-68.706, 3.90, 99.437));
    }
    
    
    ////Munshi////
    bool bHasUsedMachine = false;
    
    void MunshiAtCoffee(const tString &in asTimer) {
        ChangeMunshiAnim("David_CoffeeShow_1");
    }
    
    int lInCoffeeArea = 0;
    bool bCalledCoffee = false;
    bool AtCoffeeMachineTriggerArea(const tString &in asParent, const tString &in asChild, int alState)
    {
        lInCoffeeArea = alState;
        if (bIsAtCoffee && !bCalledCoffee) {
            MakeMessage("MunshiAtCoffee");
            Entity_SetActive("Distortion_MunshiCoffee_*", true);
            Entity_SetActive("Block_MunshiCoffee_*", true);
            bCalledCoffee = true;
            return false;
        }
        
        return true;
    }
    
    
    ////Coffee Machine////
    void coffeemachine_button_OnPlayerInteract(const tString &in asEntity)
    {
        int ID = cString_ToInt(cString_Split(asEntity, "_")[2], 1);
        Map_RemoveTimer("CoffeeMachine_"+ID);
        ParticleSystem_Destroy("CoffeeMachine_On_"+ID);
        Sound_Stop("CoffeeMachine_Sound_"+ID, 0.0f);
        Sound_CreateAtEntity("CoffeeMachine_Sound_"+ID, "Entities_Urban/utility/water_cooler/button_press", asEntity, 0.0f, false, 1.0f);

        //ParticleSystem_CreateAtEntity("CoffeeMachine_On_"+ID, "stream_leak.ps", "coffeemachine_dropzone_"+ID, true);
        ParticleSystem_CreateAtEntityExt("CoffeeMachine_On_"+ID, "toilet_sink_stream.ps", "coffeemachine_dropzone_"+ID, true, cColor(0.38,0.19,0.1,1));
        Map_AddTimer("CoffeeMachine_"+ID, 3.0f, "CoffeeMachine_TurnOff");
        
        if (CoffeeMachine_HasCupArray[ID]) CoffeeMachine_AllowedSpawnArray[ID] = true;
    }
    
    void CoffeeMachine_TurnOff(const tString &in asTimer) {
        int ID = cString_ToInt(cString_Split(asTimer, "_")[1],1);
        
        ParticleSystem_Destroy("CoffeeMachine_On_"+ID);
        Sound_Stop("CoffeeMachine_Sound_"+ID, 1.0f);
    }
    
    void coffeemachine_placezone_1_OnPlayerInteract(const tString &in asEntity)
    {
        int ID = cString_ToInt(cString_Split(asEntity, "_")[2],1);

        if (CoffeeMachine_AllowedSpawnArray[ID]) {
            Entity_SetActive("coffeemachine_mugin_"+ID, false);
            Entity_CreateAtEntity("coffeemachine_spawnedmug_"+ID, "mug_coffee.ent", "coffeemachine_spawnzone_"+ID, true);
            CoffeeMachine_HasCupArray[ID] = false;
            CoffeeMachine_AllowedSpawnArray[ID] = false;
            
            if (!bHasUsedMachine) {
                MakeMessage("MunshiCoffee", 1, 1);
                bHasUsedMachine = true;
            }
        }
    }
    
    bool coffeemachine_placezone_Trigger(const tString &in asParent, const tString &in asChild, int alState) {
        int ID = cString_ToInt(cString_Split(asParent, "_")[2], 1);
        
        if (!CoffeeMachine_HasCupArray[ID] && bIsAtCoffee) {
            Entity_SetActive("coffeemachine_mugin_"+ID, true);
            Entity_Destroy(asChild);
            CoffeeMachine_HasCupArray[ID] = true;
        }
        
        return true;
    }
    
    
	/////////////////////////////////////////
	// ==============
	// SCENE 3 | SWIMMING
	// ==============
	/////////////////////////////////////////
    
    bool MunshiSwimmingLeft = false;
    void MunshiIsSwimming(const tString &in asTimer) {
        if (MunshiSwimmingLeft) {
            ChangeMunshiAnim("David_WalkRight_41");
            MunshiSwimmingLeft = false;
        } else {
            ChangeMunshiAnim("David_WalkLeft_41");
            MunshiSwimmingLeft = true;
        }
            
        Map_AddTimer("MunshiIsSwimming", 0.5f, "MunshiIsSwimming");
    }
    
    bool JumpedInWater(const tString &in asParent, const tString &in asChild, int alState)
    {
        //Jumped in water
        WaterSequence("");
        
        return false;
    }
    
	cSequenceStatesData mWaterSequence;
	void WaterSequence(const tString &in asTimer) 
	{
		Sequence_Begin("WaterSequence", mWaterSequence);
		
		/////////////////////////////////////
		//Fell in water
		if (Sequence_DoStepAndWait(4.0f)) 
		{
            Sound_PlayGui("Player/reaction/underwater/gasp", 0.6f);
            Sound_PlayGui("Player/liquid/enter_high", 1.0f);
            Sound_PlayGui("Player/action/underwater/abyss_fall", 0.3f);
            Effect_Fade_Out(0.1f);
            Sound_FadeGlobalVolume(0.4f,0.5f);
            Player_SetActive(false);
		}
        
		/////////////////////////////////////
		//Flashback
		if (Sequence_DoStepAndWait(6.0f)) 
		{
            Sound_PlayGui("special_fx/frontend/main_menu_bg", 1.0f);
            Sound_PlayGui("Player/foley/wau_flower/health_flash/flash", 1.0f);
            Sound_PlayGui("Player/UI/death/death_slideshow", 0.6f);
            
			cVector3f CalPos = OptionMenu_GetTopLeftOffset(cVector2f(0,0), -1.0f);
			cVector2f CalSize = cLux_GetHudVirtualCenterScreenSize();
            RenderSequence("AfterScan", CalPos, CalSize, 0.3f, 3.5f, 0.2f, 1.0f, 5.0f);
		}
        
		/////////////////////////////////////
		//Munshi scream
		if (Sequence_DoStepAndWait(4.0f)) 
		{
            Sound_StopGui("Player/UI/death/death_slideshow", 1.0f, true);
            Sound_StopGui("Player/foley/wau_flower/health_flash/flash", 1.0f, true);
            Sound_StopGui("special_fx/frontend/main_menu_bg", 1.0f, true);
            MakeMessage("MunshiOkaySwim");
            Sound_PlayGui("Player/crawl/default_underwater/metal_hollow", 1.0f); 
        }
        
		/////////////////////////////////////
		//Munshi grab Simon
		if (Sequence_DoStepAndWait(1.0f)) 
		{
            Sound_PlayGui("Player/crawl/default_underwater/default_hard", 1.0f); 
            Sound_PlayGui("Player/footsteps/sneaker/forest/water_wade", 0.6f); 
        }
        
		if (Sequence_DoStepAndWait(1.0f)) 
		{
            Sound_PlayGui("Player/footsteps/sneaker/forest/water_wade", 0.6f); 
        }
        
		if (Sequence_DoStepAndWait(1.0f)) 
		{
            Sound_PlayGui("Player/footsteps/ocean/ocean_leaves", 0.6f); 
        }
        
		/////////////////////////////////////
		//Munshi gets Simon out
		if (Sequence_DoStepAndWait(1.0f)) 
		{
            StopMessage();
            Sound_StopGui("Player/action/underwater/abyss_fall", 0.2f, true);
            
            Sound_PlayGui("Player/crawl/default_underwater/default_hard", 1.0f); 
            Sound_PlayGui("Player/footsteps/ocean/ocean_leaves", 1.0f); 
            Sound_PlayGui("Player/liquid/leave", 1.0f);
            Sound_FadeGlobalVolume(1.0f,0.5f);
            MakeMessage("MunshiSwim", 1);
        }
        
		if (Sequence_DoStepAndWait(1.0f)) 
		{
            Sound_PlayGui("Player/footsteps/ocean/ocean_leaves", 1.0f); 
        }
        
		if (Sequence_DoStepAndWait(1.0f)) 
		{
            Sound_PlayGui("Player/footsteps/ocean/ocean_leaves", 1.0f); 
        }
        
		if (Sequence_DoStepAndWait(2.0f)) 
		{
            Sound_PlayGui("Player/footsteps/ocean/ocean_leaves", 1.0f); 
        }

		Sequence_End();
	}
 
    ////Phone Special////
    void OnGuiCellPhoneCall(const tString&in asEntityName, float afTimeStep) {
        OnGuiCellPhone(asEntityName, afTimeStep);
    }
    void OnExitCellPhoneCall(const tString&in asEntityName) {
        OnExitCellPhone(asEntityName);
    }
	//} END MAIN FUNCTIONS
}