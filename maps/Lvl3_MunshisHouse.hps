#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"
#include "helpers/helper_areas.hps"
#include "helper_custom.hps"
#include "helper_player.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/
 
//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
        GetBase().SetDisplayNameEntry("Lvl3_MunshisHouse");
	}
    
    bool bEyesEnabled = false;
    bool bEyesClose = true;
    float fBeforeSmooth = 0.0f;
    float fEyesCloseAmount = 0.0f;
    float fEyeTime = 0.0f;
    cVector3f NrmPos;
	void OnGui(float afTimeStep) {
        NrmPos = ImGui_NrmPos(0.5f, 0.5f, 2.0f); //Can only be called here
        
        //EYES
        if (bEyesEnabled) {
            //Eye close sequence
            fEyeTime = fEyeTime + 0.01f;
            int lScreenY = GetCurrentResolution().y;
            int lScreenX = GetCurrentResolution().x;
            
            if (bEyesClose) {
                if ((fEyeTime<=1.0f)&&(fEyesCloseAmount!=0.5f))
                    fEyesCloseAmount = cMath_Easing(eEasing_CubicOut, fEyeTime, 0, 0.5f);
                else if ((fEyeTime<=2.0f)&&(fEyesCloseAmount!=0.4f))
                    fEyesCloseAmount = cMath_Easing(eEasing_CubicOut, fEyeTime-1.0f, 0.5f, 0.4f);
                else if ((fEyeTime<=3.0f)&&(fEyesCloseAmount!=1.0f))
                    fEyesCloseAmount = cMath_Easing(eEasing_CubicOut, fEyeTime-2.0f, 0.4f, 1.0f);
            } else {
                if ((fEyeTime<=1.0f)&&(fEyesCloseAmount!=0))
                    fEyesCloseAmount = cMath_Easing(eEasing_CubicOut, fEyeTime, 1.0f, 0);
                else bEyesEnabled = false;
            }
            
            //Render eyes
            float fTopY = cMath_Lerp(fEyesCloseAmount, lScreenY/3, 0);
            
            cVector3f CalPos = OptionMenu_GetTopLeftOffset(cVector2f(0, 0), -18.0f);
            cVector2f CalSize = OptionMenu_GetScaledSize(cVector2f(lScreenX, fTopY));
            cImGuiFrameGfx TopEye;
            ImGui_DrawFrame(TopEye, CalPos, CalSize, cColor(0,0,0,1));
            
            CalPos = OptionMenu_GetBotLeftOffset(cVector2f(0, fTopY), -18.0f);
            CalSize = OptionMenu_GetScaledSize(cVector2f(lScreenX, fTopY));
            cImGuiFrameGfx BottomEye;
            ImGui_DrawFrame(BottomEye, CalPos, CalSize, cColor(0,0,0,1));
        } else {
            fEyeTime = 0.0f;
        }
	}
    
    void CloseEyes(bool abShouldCloseEyes)
    {
        fEyeTime = 0.0f;
        bEyesEnabled = true;
        bEyesClose = abShouldCloseEyes;
    }
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
    tString MapName = "";
	void OnStart()
	{
        MapName = cLux_GetCurrentMap().GetName();
        Sound_Stop("Sound_BathroomLamp_*", 0);
        Sound_Stop("Sound_BedroomLamp_*", 0);
        Sound_Stop("CricketNight", 0);
        ParticleSystem_SetActive("ShowerParticle_*", false);
        ParticleSystem_SetVisible("ShowerParticle_*", false);
        
        tString sPlace = cString_FullyTranslate(MapName, "LevelScreen_Place");
        tString sTime = cString_FullyTranslate(MapName, "LevelScreen_Time");
        if (!cLux_ScriptDebugOn()) {
            BeginningText(sPlace, sTime, 3.0f);
            
            Music_FadeVolumeMul(1.0f,0.5f);
        
            SequenceIntro("");
            ChangeMunshiAnim("David_Beginning_1");
        } else cStopMusic();
        
        Map_Preload("Lvl4_ARKEnding");
        Map_Preload("Lvl4_AbyssEnding");
        Map_Preload("Lvl4_HouseEnding");
        LastOnSoma_SetText(MapName);
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{
        MapName = cLux_GetCurrentMap().GetName();
        
        Player_SetFlashlightDisabled(true);
        Player_SetActive(true);
        
        Meter_SetSpeedMul("wall_clock_second_1", -0.00000165f);
        Meter_SetSpeedMul("wall_clock_minute_1", -0.0000000275f);
        Meter_SetSpeedMul("wall_clock_hour_1", -0.000000000453f);
        Meter_SetState("wall_clock_second_1", 5000.0f, true);
        Meter_SetState("wall_clock_minute_1", 5000.0f, true);
        Meter_SetState("wall_clock_hour_1", 5000.0f, true);
	}
    
	cSequenceStatesData mSequenceIntro;	
	void SequenceIntro(const tString &in asName)
	{
		Sequence_Begin("SequenceIntro", mSequenceIntro);
        
		if (Sequence_DoStepAndWait(0.0f)) 
		{
            Sound_FadeGlobalVolume(1.0f, 2.0f, eSoundEntryType_All);
        }
            
		///////////////////////////////
		// Begin fade in
		if (Sequence_DoStepAndWait(6.5f)) 
		{
			//Small blackout before intro begins
		}
		
		if (Sequence_DoStepAndWait(4.5f))
		{
			//////////////////////////////////////
			//Level start sweetener
            Sound_CreateAtEntity("DoorClose", "00_06_lab/VIPScriptedEvents/door_close_level_start", "Player", 0.0f, false, 1.0f);
            MakeMessage("DavidBeginning", 1);
		}

		Sequence_End();
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// The player has died.
	void OnPlayerKilled(int alRecentDeaths, const tString&in asSource)
	{
	}
    
    //-------------------------------------------------------
    
	////////////////////////////
	// Update
    bool bFridgeForceOpen = false;
    bool bShouldCheckWrap = true;
    bool bShouldCheckCouchTimer = true;
    bool bShouldMoveChair = true;
    bool bShouldOpenDoor = true;
    bool bShouldKickDoor = true;
    bool bShouldPlayCameraAnimBed = true;
    bool bIsInBedAnim = true;
	void Update(float afTimeStep)
	{
		tString sSimOver = GetSimEnd();
		array<tString> vSimOver = cString_Split(sSimOver, "_");
		if (vSimOver.size()>0)
		{
			bool bIsOver = cString_ToBool(vSimOver[0], false);
			tString sPathName = vSimOver[1];
            tString sFullName = vSimOver[1]+vSimOver[2]+"_"+vSimOver[3];
			
			if (bIsOver)
			{
				cLux_AddDebugMessage("Text over - "+sFullName);
				
				if (sFullName=="DavidBeginning1_4") {
                    MunshiWalk(1, 6, 0.5f);
                    Entity_SetActive("Block_Box_1", false);
                    Entity_SetActive("Block_Distortion_1", false);
                    SetObjective("SitCouch", true);
                } else if (sPathName=="InteractBoard") {
                    Player_SetActive(true);
                } else if (sFullName=="DavidBeginning8_1") {
                    CameraAnimationNode_SetInteractiveMovement("CameraAnimSit_4", true);
                    CameraAnimationNode_SetInteractiveMovement("CameraAnimSit_5", true);
                    
                    tString Text = cString_FullyTranslate(MapName, "GetUpHint");
                    cVector2f CalSize = OptionMenu_GetScaledSize(cVector2f(300, 244));
                    cVector3f CalPos = NrmPos-cVector3f(CalSize.x, CalSize.y,0)/2.0f+cVector3f(0, 200,0);
                    CreateTextFade(Text, CalPos, CalSize, 2.0f, 4.0f, 1.0f, 1.0f, 1.0f, "default_medium_outline.fnt");
                    SetObjective("GetInBed", true);
                    
                    MunshiWalk(12, 20, 0.5f);
                } else if (sFullName=="DavidBed1_4") {
                    if (bIsInBedAnim) {
                        CameraAnimation_End();
                        CameraAnimationNode_SetInitToCamera("CameraAnimStuckBed_1", true);
                        MakeCameraAnimation("CameraAnimStuckBed", false, false);
                    }
                    CameraAnimationNode_SetAutoMove("CameraAnimStuckBed_1", 1.0f);
                    CameraAnimationNode_SetAutoMove("CameraAnimStuckBed_2", 1.0f);
                    
                    Map_AddTimer("SimonWalkSounds", 1.0f, "SimonWalkSounds");
                } else if (sFullName=="DavidBed2_3") {
                    ChangeMunshiAnim("David_Bed_3");
                    CloseEyes(true);
                    SeqEyeClose("SeqEyeClose");
                } else if (sFullName=="DavidBed3_10"||sFullName=="DavidBed4_10"||sFullName=="DavidDoorKick2_4") {
                    Effect_Flash_Start(0.2f, 0.5f, 0.5f);
                    Effect_TimeGlitch_Start(0.4f, 0.4f, 0.2f, true, 0.3f);
                    Sound_PlayGui("00_06_lab/VIPScriptedEvents/BrainFlash", 1.0f);
                    Effect_Fade_Out(0.2f);
                    
                    cVector3f CalPos = OptionMenu_GetTopLeftOffset(cVector2f(0,0), -1.0f);
                    cVector2f CalSize = cLux_GetHudVirtualCenterScreenSize();
                    RenderSequence("AfterSwim", CalPos, CalSize, 0.1f, 0.3f, 0.1f, 0.5f, 40.0f);
                    Map_AddTimer("Timer_EndLevel", 2.0f, "Timer_EndLevel");
                }
            }
        }
        
		tString sSimUpdate = GetSimUpdate();
		array<tString> vSimUpdate = cString_Split(sSimUpdate, "_");
		if (vSimUpdate.size()>0)
		{
			bool bUpdated = cString_ToBool(vSimUpdate[0], false);
			tString sPathName = vSimUpdate[1];
            tString sFullName = vSimUpdate[1]+vSimUpdate[2]+"_"+vSimUpdate[3];
            
            if (bUpdated) {
                if (sFullName=="DavidDoorKick3_8") {
                    Map_AddTimer("RoboGirlRunCry", 2.0f, "Timer_RoboGirlRunCry");
                } else if (sFullName=="DavidBed1_1" && cScript_GetGlobalVarBool("Secret_RobotGirlComesIn") && bShouldPlayCameraAnimBed) {
                    CameraAnimation_End();
                    MakeCameraAnimation("CameraAnimStuckBed", false, false);
                    bShouldPlayCameraAnimBed = false;
                    bIsInBedAnim = false;
                } else if (sFullName=="DavidBed3_8") {
                    lRadicalBlur = Effect_RadialBlur_Start(0.5f, 0.5f, 0.5f, 0.2f);
                    Effect_ImageTrail_Start(1.0f, 0.5f, 4.0f, 2.0f);
                    Effect_Flash_Start(0.2f, 0.5f, 0.5f);
                    Effect_TimeGlitch_Start(0.4f, 0.4f, 0.2f, true, 0.3f);
                    
                    cVector3f CalPos = OptionMenu_GetTopLeftOffset(cVector2f(0,0), -1.0f);
                    cVector2f CalSize = cLux_GetHudVirtualCenterScreenSize();
                    RenderSequence("AfterSwim", CalPos, CalSize, 0.1f, 0.3f, 0.1f, 0.5f, 20.0f);
                    Sound_PlayGui("02_05_theta/amb/spots/tv_static", 0.3f);
                    Sound_PlayGui("02_05_theta/sweeteners/tv_scare", 0.7f);
                    Sound_PlayGui("Entities_Station/object/robot_bear/bear_music_01", 1.0f);
                } else if (sFullName=="DavidBed3_9") {
                    ChangeMessageSpeed(0.040f);
                } else if (sFullName=="DavidBed3_10") {
                    ChangeMessageSpeed(0);
                }
            }
        }
        
        if (!bFridgeForceOpen && Entity_IsActive("David_WalkRight_6")) {
            iLuxEntity@ pFridge = cLux_GetCurrentMap().GetEntityByName("fridge_1", eLuxEntityType_LastEnum, "");
            pFridge.GetBody(0).SetMass(0);
            SwingDoor_SetLocked("fridge_1", true, false);
            SwingDoor_SetOpenAmount("fridge_1", 0.89f);
            bFridgeForceOpen = true;
        }
        
        if (bShouldCheckWrap) {
            for (int i=7;i<=11;i++) {
                int lPrevious = i-1;
                if (Entity_IsActive("David_WalkLeft_"+i) && Entity_IsActive("FoodWrap_Right_"+lPrevious)) {
                    Entity_SetActive("FoodWrapFork_Right_"+lPrevious, false);
                    Entity_SetActive("FoodWrap_Right_"+lPrevious, false);
                    Entity_SetActive("FoodWrapFork_Left_"+i, true);
                    Entity_SetActive("FoodWrap_Left_"+i, true);
                } else if (Entity_IsActive("David_WalkRight_"+i) && Entity_IsActive("FoodWrap_Left_"+i)) {
                    Entity_SetActive("FoodWrapFork_Left_"+i, false);
                    Entity_SetActive("FoodWrap_Left_"+i, false);
                    Entity_SetActive("FoodWrapFork_Right_"+i, true);
                    Entity_SetActive("FoodWrap_Right_"+i, true);
                }
            }
        }
        
        if (Entity_IsActive("David_WalkRight_11") && bShouldCheckCouchTimer) {
            Map_AddTimer("StartCouchScene", 1.0f, "StartCouchScene");
            bShouldCheckCouchTimer = false;
            bShouldCheckWrap = false;
        }
        
        if (Entity_IsActive("David_WalkLeft_18") && bShouldMoveChair) {
            Entity_SetActive("SpecialChair_1", false);
            Entity_SetActive("SpecialChair_2", true);
            Sound_CreateAtEntity("ChairSound", "MunshiSim/Environment/chair_move", "SpecialChair_2", 0.0f, false, 1.0f);
            bShouldMoveChair = false;
        }
        
        if (Entity_IsActive("David_WalkRight_28") && bShouldOpenDoor) {
            SequenceStates_Resume("RobotGirlComeIn");
            bShouldOpenDoor = false;
        }
        
        if (Entity_IsActive("David_WalkRight_35") && bShouldKickDoor) {
            SequenceStates_Resume("RobotGirlComeIn");
            bShouldKickDoor = false;
        }
    }

	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if(abPressed==false) return;
		
		if(alAction == eAction_Test1)
		{
			Sound_FadeGlobalVolume(1.0f,1.0f, eSoundEntryType_All);
            Sound_FadeGlobalVolume(1.0f,1.0f, eSoundEntryType_GuiAll);
            Sound_FadeGlobalVolume(1.0f,1.0f, eSoundEntryType_WorldAll);
        } else if(alAction == eAction_Test2) {
            cScript_SetGlobalVarBool("Secret_TouchedPowerBox", true);
            Entity_SetActive("BedTrigger", true);
        }
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	/*Put any variables that are used in more than one scene here.*/
 
	//-------------------------------------------------------
 
	/*Put any functions that are used in more than one scene here.*/
 
	//-------------------------------------------------------
 
	//} END MAIN FUNCTIONS
    
	///////////////////////////////////////////////////
	// Interact with Sink/Toilet
	///////////////////////////////////////////////////
	
	//-------------------------------------------------------
	
	bool Trigger_BathroomHandleSound(const tString &in asParent, const tString &in asChild, int alState)
	{
		if (alState == 1)
		{
			//Sound source is "HandleSoundTrigger"
			Sound_CreateAtEntity("HandleDown", "Entities_Urban/door/toilet_door/door_handle_down", "HandleSoundTrigger",0,false);
		}
		else
		{
			//Sound source is "HandleSoundTrigger"
			Sound_CreateAtEntity("HandleUp", "Entities_Urban/door/toilet_door/door_handle_up", "HandleSoundTrigger",0,false);
		}
		return true;
	}
    
	//-------------------------------------------------------
	
	void InteractKitchenTap(const tString &in asEntity, int alState)
	{
		if (alState == 1)
		{
			cLux_AddDebugMessage("Tap On");
			Sound_CreateAtEntity("KitchenTapRunning","Entities_Urban/toilet/sink_toilet_tap/interact","KitchenSinkTap_Effect",0,false);
			Sound_CreateAtEntity("KitchenTapLoop", "Entities_Urban/toilet/sink_toilet_tap/interact_loop", "KitchenSinkTap_Effect", 2.2f, false);
			Sound_Stop("KitchenTapOff", 0.5f);
			ParticleSystem_CreateAtEntity("Particles_kitchentap_splash","sink_tap_splash.ps","KitchenSinkTap_Effect",false);
			//Prop_MoveLinearTo("sink_ripples", "sink_ripples_target_2", 5, 15, 8, true);
			Entity_SetActive("tap_pouring_kitchen", true);
			Entity_PlayAnimation("tap_pouring_kitchen", "activate", 0.1f, false, false);
	
		}
		
		///////////////////
		// Tap off..
		if (alState == -1)
		{
			cLux_AddDebugMessage("Tap Off");
			Sound_Stop("KitchenTapRunning",0.5f);
			Sound_Stop("KitchenTapLoop",1.0f);
			Sound_CreateAtEntity("KitchenTapOff", "Entities_Urban/toilet/sink_toilet_tap/interact_off","KitchenSinkTap_Effect",0,false);
			ParticleSystem_Destroy("Particles_kitchentap_splash");
			//Prop_MoveLinearTo("sink_ripples", "sink_ripples_target_1", 5, 15, 8, true);
			Entity_PlayAnimation("tap_pouring_kitchen", "deactivate", 0.1f, false, false);
		}
	}
	
	//-------------------------------------------------------

	int mlPrevSplashBodies = -1;
	
	void VariableUpdate(float afDeltaTime)
	{
		// Check for splashes in sink
		// Hacked in here because it's far less fps-heavy than
		// a collide area with "*"
		
		array<iPhysicsBody@> vBodies;
		iLuxEntity@ pArea = Map_GetEntity("TriggerArea_Splash");
		cBoundingVolume@ pVol = pArea.GetMainBody().GetBoundingVolume();
		cLux_GetCurrentMap().GetPhysicsWorld().GetBodiesInAABB(pVol.GetMin(), pVol.GetMax(), vBodies);
		
		int lNewSize = vBodies.length();
		if (mlPrevSplashBodies==-1)
			mlPrevSplashBodies = lNewSize;

		if (lNewSize>mlPrevSplashBodies && Map_TimeHasPassed("SinkSplashTime",0.5f))
		{
			Sound_CreateAtEntity("SinkSplash", "Entities_Urban/toilet/sink_toilet_tap/sink_splash","TriggerArea_Splash",0,false);
		}
		
		mlPrevSplashBodies = lNewSize;
	}

	//-------------------------------------------------------

	void InteractToiletTap(const tString &in asEntity, int alState)
	{
		///////////////////
		// Tap on
		if (alState == 1)
		{
			cLux_AddDebugMessage("Tap On");
			Sound_CreateAtEntity("TapRunning","Entities_Urban/toilet/sink_toilet_tap/interact","ToiletSinkTap_Effect",0,false);
			Sound_CreateAtEntity("TapLoop", "Entities_Urban/toilet/sink_toilet_tap/interact_loop", "ToiletSinkTap_Effect", 2.2f, false);
			Sound_Stop("TapOff", 0.5f);
			ParticleSystem_CreateAtEntity("Particles_tap_splash","sink_tap_splash.ps","ToiletSinkTap_Effect",false);
			Prop_MoveLinearTo("sink_ripples", "sink_ripples_target_2", 5, 15, 8, true);
			Entity_SetActive("tap_pouring", true);
			Entity_PlayAnimation("tap_pouring", "activate", 0.1f, false, false);
	
		}
		
		///////////////////
		// Tap off..
		if (alState == -1)
		{
			cLux_AddDebugMessage("Tap Off");
			Sound_Stop("TapRunning",0.5f);
			Sound_Stop("TapLoop",1.0f);
			Sound_CreateAtEntity("TapOff", "Entities_Urban/toilet/sink_toilet_tap/interact_off","ToiletSinkTap_Effect",0,false);
			ParticleSystem_Destroy("Particles_tap_splash");
			Prop_MoveLinearTo("sink_ripples", "sink_ripples_target_1", 5, 15, 8, true);
			Entity_PlayAnimation("tap_pouring", "deactivate", 0.1f, false, false);
		}
	}
	
	void StateChangeToilet(const tString &in asEntity, int alState)
	{
		
		///////////////////
		// Flush toilet
		if (alState == 1)
		{
			Sound_Stop("ToiletRefill", 2.5f);
			Sound_CreateAtEntity("ToiletFlush","Entities_Urban/toilet/toilet/flush","AreaToilet_Effect",0,false);
			Map_AddTimer("Timer_ToiletRefillSound", 3.0f, "ToiletRefillSound");
			ParticleSystem_CreateAtEntity("Particles_ToiletFlush","toilet_flush_splash.ps","AreaToilet_Effect",false);
			Entity_SetActive("toilet_flush_ripples", true);
			Prop_MoveLinearTo("toilet_flush_ripples", "flush_effect_target", 5, 15, 8, true);
			
			/////////////////////////////////
			////Switch off Toilet Handle active to stop sound from getting spammed
			Map_AddTimer("ToiletInteractTrue", 5.0f, "ToiletInteractTrue");
			Entity_SetInteractionDisabled("toilet_chair_hand_1", true);
			cLux_AddDebugMessage("Toilet Interact - False");
		}
		
		//////////////////
		// Cease flushing.
		//if (alState == -1)
		//{
			//ParticleSystem_Destroy("toilet_flush_splash");
		//}
	}
	
	void ToiletRefillSound(const tString &in asTimer)
	{
		Sound_CreateAtEntity("ToiletRefill", "Entities_Urban/toilet/toilet/flush_refill", "AreaToilet_RefillSource", 3.0f);
	}
	
	///////////////////////
	//Activate Toilet Handle for Interaction
	void ToiletInteractTrue(const tString &in asTimer) 
	{
		//add toilet handle active
		cLux_AddDebugMessage("Toilet Interact - True");
		Entity_SetInteractionDisabled("toilet_chair_hand_1", false);
		Prop_MoveLinearTo("toilet_flush_ripples", "flush_effect_target_1", 5, 15, 8, true);
		ParticleSystem_Destroy("Particles_ToiletFlush");
	}
    
	//-------------------------------------------------------
    
	////////////////////////////////
	// Lightswitches
	////////////////////////////////

	//-------------------------------------------------------

	/* -----------------------------------------------------------
	 * Lights are hooked up in the editor, but billboards need to be
	 * faded here
	 * ----------------------------------------------------------*/

	//-------------------------------------------------------

	void Lightswitch_Interact(const tString &in asEntity) 
	{
		bool bState = !MovingButton_IsSwitchedOn(asEntity);
		cLux_AddDebugMessage("State of switch: " + bState);
        
		array<tString> vCheckPSName = cString_Split(asEntity, "_");
		if (vCheckPSName.size()>0)
		{
            tString sName = vCheckPSName[0];
            ParticleSystem_SetVisible("ParticleSystem_"+sName+"_*", bState);
            
            if (bState == true)
                Sound_Play("Sound_"+sName+"_*", 0.3f);
            else
                Sound_Stop("Sound_"+sName+"_*", 0.3f);
        }

		Lightswitch_Sound(asEntity);
	}
	
	//-------------------------------------------------------
	void Lightswitch_Sound(const tString &in asEntity)
	{
		Sound_CreateAtEntity("LightSwitch","Entities_Urban/lamp/generic_INT/switch_plastic_on_off",asEntity,0,false);
	}
    
    
	////////////////////////////////
	// Shower
	////////////////////////////////
    
	void ChangeShowerCurtainState(const tString &in asEntity, int alState)
    {
	    if (alState >= 0)
		{
		    cLux_AddDebugMessage("OPEN!");
		    Entity_SetActive("shower_curtain_interact_closed",false);
		    Entity_SetActive("block_box_shower_curtain",false);
		}
		else if (alState < 0)
		{
		    cLux_AddDebugMessage("CLOSED!");
		    Entity_SetActive("shower_curtain_interact_closed",true);
		    Entity_SetActive("block_box_shower_curtain",true);
		}
    }
    
    void Shower_OnConnectionStateChange(const tString &in asEntity, int alState)
    {
        cLux_AddDebugMessage("State of switch: " + alState);
        Sound_CreateAtEntity("Showerhandle_twist","Entities_Urban/kitchen/sink_kitchen_drawer/joint_onmax",asEntity,0,false);
        
        if (alState > 0) {
            Sound_CreateAtEntity("Showerhead_Spray","MunshiSim/Environment/shower_loop","Showerhead_Spray",0.2f,false);
            ParticleSystem_CreateAtEntity("Showerhead_Spray","spray_shower.ps","Showerhead_Spray",false);
            ParticleSystem_CreateAtEntity("Showerhead_Spray2","spray_shower_refraction.ps","Showerhead_Spray",false);
            ParticleSystem_CreateAtEntity("Showerhead_Spray3","spray_plane_nostream.ps","Showerhead_SpraySide",false);
            ParticleSystem_SetActive("ShowerParticle_*", true);
            ParticleSystem_SetVisible("ShowerParticle_*", true);
			Sound_CreateAtEntity("Showerhead_WaterDownOn","Entities_Urban/toilet/sink_toilet_tap/interact","Shower_Down",0,false);
			Sound_CreateAtEntity("Showerhead_WaterDownLoop", "Entities_Urban/toilet/sink_toilet_tap/interact_loop", "Shower_Down", 2.2f, false);
            
            Prop_MoveLinearTo("special_shower_1", "shower_target_1", 10, 15, 8, true);
        } else {
            Sound_CreateAtEntity("Showerhead_Spray","MunshiSim/Environment/shower_turnoff","Showerhead_Spray",0.2f,false);
            Sound_CreateAtEntity("Showerhead_WaterDownEnd","Entities_Urban/toilet/sink_toilet_tap/interact_off","Shower_Down",0.2f,false);
            Sound_Stop("Showerhead_Spray", 1.0f);
            Sound_Stop("Showerhead_WaterDownLoop", 0.5f);
            ParticleSystem_Destroy("Showerhead_Spray");
            ParticleSystem_Destroy("Showerhead_Spray2");
            ParticleSystem_Destroy("Showerhead_Spray3");
            ParticleSystem_SetActive("ShowerParticle_*", false);
            ParticleSystem_SetVisible("ShowerParticle_*", false);
            
            Prop_MoveLinearTo("special_shower_1", "shower_target", 2, 5, 8, true);
            
            Map_AddTimer("ShowerInteractTime", 2.0f, "ShowerInteractTime");
            Entity_SetInteractionDisabled("shower_tap_1", true);
            
            //Get your pesky hands off!!
            iLuxEntity@ pShowerCrankEnt = cLux_GetCurrentMap().GetEntityByName("shower_tap_1", eLuxEntityType_LastEnum, "");
            if (pShowerCrankEnt is null)
            {
                Error("Could not find the target entity shower_tap_1");
                return;
            }
            pShowerCrankEnt.SetIsInteractedWith(false);
        }
    }
    
	void ShowerInteractTime(const tString &in asTimer)
	{
		Entity_SetInteractionDisabled("shower_tap_1", false);
	}
    
    //-------------------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE START
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
    
    void TurnOffTaps()
    {
        MovingButton_SetSwitchedOn("ToilerSinkTap", false, true);
        MovingButton_SetSwitchedOn("shower_tap_1", false, true);
        MovingButton_SetSwitchedOn("sink_kitchen_tap_1", false, true);
    }
    
    void InteractBoard(const tString &in asEntity)
    {
        Player_SetActive(false);
        MakeMessage("InteractBoard");
    }
 
    void PlayerSitCouch(const tString &in asEntity)
    {
        MakeCameraAnimation("CameraAnimSit", true, false);
        Entity_SetActive("TriggerArea_1", false);
        Sound_PlayGui("00_04_doctor/VIPScriptedEvents/Camera_Anims/standup", 1.0f);
        TurnOffTaps();
        SetObjective("", false);
    }
    
    bool EnableSimonLegs(const tString &in asEntity, int alDirection)
    {
        Entity_SetActive("SimonSofaLegs", true);
        return false;
    }
    
    bool RemoveSimonLegs(const tString &in asEntity, int alDirection)
    {
        Entity_SetActive("SimonSofaLegs", false);
        return false;
    }
    
    bool MunshiApproach(const tString &in asEntity, int alDirection)
    {
        MunshiWalk(7, 11, 0.5f);
        return false;
    }
    
	void StartCouchScene(const tString &in asTimer)
	{
        MakeMessage("DavidBeginning", 2, 1);
        
        //Return fridge back to normal
        iLuxEntity@ pFridge = cLux_GetCurrentMap().GetEntityByName("fridge_1", eLuxEntityType_LastEnum, "");
        pFridge.GetBody(0).SetMass(10);
        SwingDoor_SetLocked("fridge_1", false, false);
        SwingDoor_SetOpenAmount("fridge_1", 0);
        Entity_SetInteractionDisabled("fridge_1", false);
        Entity_SetActive("BedTrigger", true);
        cPlayMusic("music/HuniePop/bar_lounge.mp3", 0.4f, 10.0f, true);
	}
	 
    //} END SCENE
    
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE BED
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
    
    void InteractBed(const tString &in asEntity)
    {
        SwingDoor_SetClosed("swingdoor_scanroom_corridor_narrow_1", true, true);
        
        if (!Button_IsSwitchedOn("BedroomLamp_switch_1"))
            {
                Lightswitch_Interact("BedroomLamp_switch_1");
                Button_SetSwitchedOn("BedroomLamp_switch_1", true, true);
            }
        
        TurnOffTaps();
        cStopMusic();
        SetObjective("", false);
        
        //Robogirl secret
        if (cScript_GetGlobalVarBool("Secret_RobotGirlComesIn")) {
            Sound_CreateAtEntity("Doorbell", "MunshiSim/Environment/doorbell", "swingdoor_scanroom_corridor_narrow_1", 0.2f, false, 1.0f);
            MakeCameraAnimation("CameraAnimBedLook", false, false);
            RobotGirlComeIn("");
        } else {
            //Normal
            MakeCameraAnimation("CameraAnimBedLook", false, false);
        }
    }
    
	cSequenceStatesData mRobotGirlComeIn;	
	void RobotGirlComeIn(const tString &in asName)
	{
		Sequence_Begin("RobotGirlComeIn", mRobotGirlComeIn);
        
		if (Sequence_DoStepAndWait(2.0f)) {
        } else if (Sequence_DoStepAndWait(2.0f)) {
            Sound_CreateAtEntity("ChairSound", "MunshiSim/Environment/chair_move", "table_dinner_small_2", 0.0f, false, 1.0f);
        } else if (Sequence_DoStepAndPause(1.0f)) {
            MunshiWalk(23, 28, 0.5f);
        } else if (Sequence_DoStepAndWait(1.0f)) {
            Sound_CreateAtEntity("RobotGirlDoorSound", "00_06_lab/VIPScriptedEvents/door_close_level_start", "exit_apartment_1", 0.0f, false, 1.0f);
        } else if (Sequence_DoStepAndWait(5.0f)) {
            Sound_CreateAtEntity("RobotGirlDoorSound2", "NPC_Creatures/Vocalisations/InWorld/Robothead/aggressive_scream_short", "exit_apartment_1", 0.0f, false, 1.0f);
        } else if (Sequence_DoStepAndPause(2.0f)) {
            MunshiWalk(29, 35, 0.18f);
        } else if (Sequence_DoStepAndWait(1.5f)) {
            Entity_SetActive("swingdoor_scanroom_corridor_narrow_1", false);
            ChangeMunshiAnim("David_Kick_1");
            Entity_SetActive("SwingDoor_Kick", true);
            Entity_AddImpulse("SwingDoor_Kick", cVector3f(15.0f, 0, 0), false, true);
            Sound_CreateAtEntity("DoorKickSound", "Player/landing/damage", "SwingDoor_Kick", 0.1f, false);
            Sound_CreateAtEntity("DoorKickSound2", "Entities_Urban/door/swingdoor_reception/interact_locked", "SwingDoor_Kick", 0.1f, false);
            Sound_CreateAtEntity("PlayerGasp1", "Player/reaction/air/gasp", "Player", 0.1f, false);
            MakeMessage("DavidDoorKick", 1);
            cPlayMusic("music/HuniePop/nutmeg_cafe.mp3", 0.6f, 10.0f, true);
            Sequence_Stop();
        }
        
		Sequence_End();
	}
    
	void Timer_RoboGirlRunCry(const tString &in asTimer)
	{
        Entity_SetActive("Robo_Kick_6", false);
        Map_AddTimer("Timer_RoboGirlCryLoop", 0.01f, "Timer_RoboGirlCryLoop");
        Area_MoveLinearTo("RoboGirlCryArea_1", "RoboGirlCryArea_2", 2.0f, 2.0f);
        Sound_CreateAtEntity("RoboGirlCry", "NPC_Creatures/Vocalisations/InWorld/Robothead/cry", "RoboGirlCryArea_1", 0.2f, true, 1.0f);
	}
    
    int lRoboGirlRunNum = 1;
	void Timer_RoboGirlCryLoop(const tString &in asTimer)
	{
        if (Entity_Exists("RoboGirl_Cry_"+(lRoboGirlRunNum-1))) Entity_SetActive("RoboGirl_Cry_"+(lRoboGirlRunNum-1), false);
        Entity_SetActive("RoboGirl_Cry_"+lRoboGirlRunNum, true);
        
        if (lRoboGirlRunNum<14) {
            lRoboGirlRunNum++;
            Map_AddTimer("Timer_RoboGirlCryLoop", 0.4f, "Timer_RoboGirlCryLoop");
        } else {
            if (bShouldPlayCameraAnimBed) {
                CameraAnimation_End();
                MakeCameraAnimation("CameraAnimStuckBed", false, false);
                bShouldPlayCameraAnimBed = false;
                bIsInBedAnim = false;
            }
            
            Entity_SetActive("RoboGirl_Cry_14", false);
            Sound_CreateAtEntity("RobotGirlDoorSound", "00_06_lab/VIPScriptedEvents/door_close_level_start", "exit_apartment_1", 0.0f, false, 1.0f);
            Sound_Stop("RoboGirlCry", 1.0f);
        }
	}
    
    int lSimonWalkNum = 0;
	void SimonWalkSounds(const tString &in asTimer)
	{
        
        if (lSimonWalkNum<6) {
            Sound_PlayGui("Player/footsteps/default/default_soft", 1.0f);
            lSimonWalkNum++;
            
            float fRanTime = cMath_RandRectf(0.7f, 1.5f);
            Map_AddTimer("SimonWalkSounds", fRanTime, "SimonWalkSounds");
        }
	}
    
    bool MunshiNormalBed(const tString &in asEntity, int alDirection)
    {
        SwingDoor_SetOpenAmount("swingdoor_scanroom_corridor_narrow_1", 0);
        
        if (!cScript_GetGlobalVarBool("Secret_RobotGirlComesIn"))
            MakeMessage("DavidBed", 1);
            
        return false;
    }
    
    bool MunshiWalkBed(const tString &in asEntity, int alDirection)
    {
        if (Button_IsSwitchedOn("BedroomLamp_switch_1"))
        {
            Lightswitch_Interact("BedroomLamp_switch_1");
            Button_SetSwitchedOn("BedroomLamp_switch_1", false, true);
        }
        Entity_SetActive("SwingDoor_Kick", false);
        cStopMusic();
        MunshiWalk(50, 52, 0.5f);
        return false;
    }
    
    bool MunshiGetInBed(const tString &in asEntity, int alDirection)
    {
        Sound_CreateAtEntity("BedSounds_1", "Entities_Urban/clothes/undies/pickup_dress", "pillow_cabin_plain_3", 0.1f);
        return false;
    }
    
    bool SimonGetInBed(const tString &in asEntity, int alDirection)
    {
        Sound_PlayGui("Entities_Urban/clothes/shoe_sneakers/pickup_dress", 1.0f);
        return false;
    }
    
    bool MunshiSheets(const tString &in asEntity, int alDirection)
    {
        Entity_SetActive("MunshiSheets_*", true);
        Entity_SetActive("bed_sheets_untidy_1", false);
        ChangeMunshiAnim("David_Bed_1");
        Sound_CreateAtEntity("MunshiSheets", "Entities_Urban/clothes/shirt_pile/pickup_dress", "David_Bed_1", 0.1f);
        return false;
    }
    
    bool LookingAtMunshi(const tString &in asEntity, int alDirection)
    {
        MakeMessage("DavidBed", 2, 1);
        return false;
    }
    
	cSequenceStatesData mSeqEyeClose;	
	void SeqEyeClose(const tString &in asName)
	{
		Sequence_Begin("SeqEyeClose", mSeqEyeClose);
        
		if (Sequence_DoStepAndWait(5.0f)) {
        } else if (Sequence_DoStepAndWait(2.0f)) {
            tString sPlace = cString_FullyTranslate(MapName, "LevelScreen_NightPlace");
            tString sTime = cString_FullyTranslate(MapName, "LevelScreen_NightTime");
            BeginningText(sPlace, sTime, 3.0f);
            cLux_AddDebugMessage("Beginningtext");
        } else if (Sequence_DoStepAndWait(4.0f)) {
            Light_SetBrightness("BoxLight_4", 0.05);
            MovingButton_SetSwitchedOn("drapes_simon_1", false, false);
            Entity_SetActive("BlackScreen", true);
            Entity_SetActive("AMB_Apt_1", false);
            Entity_SetActive("AMB_Apt_2", true);
        } else if (Sequence_DoStepAndWait(2.0f)) {
            CloseEyes(false);
        } else if (Sequence_DoStepAndWait(2.0f)) {
            //PowerBox secret
            if (cScript_GetGlobalVarBool("Secret_TouchedPowerBox")) {
                MakeMessage("DavidBed", 4, 1);
            } else {
                MakeMessage("DavidBed", 3, 1);
            }
            
            Sequence_End();
        }
        
		Sequence_End();
	}
    
    int lRadicalBlur = -1;
	cSequenceStatesData mSeqNotReal;	
	void SeqNotReal(const tString &in asName)
	{
		Sequence_Begin("SeqNotReal", mSeqNotReal);
        
		if (Sequence_DoStepAndWait(5.0f)) {
        } else if (Sequence_DoStepAndWait(2.0f)) {
            tString sPlace = cString_FullyTranslate(MapName, "LevelScreen_NightPlace");
            tString sTime = cString_FullyTranslate(MapName, "LevelScreen_NightTime");
            BeginningText(sPlace, sTime, 3.0f);
            cLux_AddDebugMessage("Beginningtext");
        } else if (Sequence_DoStepAndWait(4.0f)) {
            Light_SetBrightness("BoxLight_4", 0.05);
            MovingButton_SetSwitchedOn("drapes_simon_1", false, false);
            Entity_SetActive("BlackScreen", true);
            Entity_SetActive("AMB_Apt_1", false);
            Entity_SetActive("AMB_Apt_2", true);
            Sound_Play("CricketNight", 4.0f, false);
        } else if (Sequence_DoStepAndWait(2.0f)) {
            CloseEyes(false);
            cLux_AddDebugMessage("Ran1");
        } else if (Sequence_DoStepAndWait(2.0f)) {
            //PowerBox secret
            if (cScript_GetGlobalVarBool("Secret_TouchedPowerBox")) {
                MakeMessage("DavidBed", 4, 1);
            } else {
                MakeMessage("DavidBed", 3, 1);
            }
            cLux_AddDebugMessage("Ran2");
        }
        
		Sequence_End();
	}
    
	void Timer_EndLevel(const tString &in asTimer)
	{
        float fRepCount = GetReputation();
        
        if (fRepCount>0.5f) {
            EndLevel("Lvl4_HouseEnding");
            cLux_AddDebugMessage("Rep high - Lvl4_HouseEnding");
        } else if (fRepCount<0.5f) {
            EndLevel("Lvl4_AbyssEnding");
            cLux_AddDebugMessage("Rep low - Lvl4_AbyssEnding");
        } else {
            EndLevel("Lvl4_ARKEnding");
            cLux_AddDebugMessage("Rep 0.5 - Lvl4_ARKEnding");
        }
	}
    
    void OnCreditsCompleteMap()
    {
        OnCreditsComplete();
    }
    
	void StopCreditRoll(const tString &in asTimer)
	{
        OnCreditsComplete();
	}
    
    //} END SCENE
}