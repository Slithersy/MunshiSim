#include "interfaces/UserModule_Interface.hps"
#include "modules/ModuleInterfaces.hps"
#include "base/InputHandler_Types.hps"
#include "helper_audio.hps"
#include "helper_effects.hps"
#include "helper_imgui_urban.hps"
#include "helper_imgui_cellphone.hps"
#include "helper_custom.hps"
#include "helper_map.hps"

//class sCurrentObj;
class cToggeledList
{
	//Reputation
	float mfRepArrowSec = 0.0f;
	
	//Beginning Text
	float mfRenderBeginning = 0.0f;
    
    //Text speed
    float mfTextSpeed = 1.25f;
}

class cSavedList
{
	//Reputation
	float mfRepScore = 0.5f;
    int mlWauCalls = 0;
    tString msCurrentObj = "";
	
	//Main
	int mlProgressionCount = 1;
	int msPath = 1;
	tString msPathName = "Path";
	bool mbStopRender = true;
	bool mbDisplayChoices = false;
    
    //Beginning Text
    tString msOldPlace = cString_FullyTranslate("Lvl0_Apartment", "LevelScreen_Place");
    tString msOldTime = cString_FullyTranslate("Lvl0_Apartment", "LevelScreen_Time");
}

class cScrSimHandler : iScrUserModule, iScrUserModule_Interface
{
    //////////////////////////////////////////////////////////////////////////////////////////
    // ==============
    // MAIN CALLBACKS
    // ==============
    //{///////////////////////////////////////////////////////////////////////////////////////
		
		void Init()
		{
			//Toggle List
			cToggeledList LocalToggledList;
			LocalToggledList.mfRepArrowSec = 0.0f;
			LocalToggledList.mfRenderBeginning = 0.0f;
            LocalToggledList.mfTextSpeed = 1.25f;
			
			vToggledList.push_back(LocalToggledList);
			
			//Save List
			cSavedList LocalSaveList;
			LocalSaveList.mfRepScore = 0.5f;
            LocalSaveList.mlWauCalls = 0;
            LocalSaveList.msCurrentObj = "";

			LocalSaveList.mlProgressionCount = 1;
			LocalSaveList.msPath = 1;
			LocalSaveList.msPathName = "Path";
			LocalSaveList.mbStopRender = true;	
			LocalSaveList.mbDisplayChoices = false;
            LocalSaveList.msOldPlace = cString_FullyTranslate("Lvl0_Apartment", "LevelScreen_Place");
            LocalSaveList.msOldTime = cString_FullyTranslate("Lvl0_Apartment", "LevelScreen_Time");

			vSavedList.push_back(LocalSaveList);
		}
        
		void Update(float afTimeStep) 
        {
            if (bIsCalling||bIsInCall) {
                fAnswerPhoneTimer = fAnswerPhoneTimer + 0.01f;
                
                if ((fAnswerPhoneTimer > 1.5f) && !bPickedUpFully && bIsInCall) {
                    AnswerPhoneMessage();
                }
                
                if ((fAnswerPhoneTimer > 13.0f) && !bIsInCall) {
                    StopTelephoneRing();
                }
            }
        }
		void PostUpdate(float afTimeStep) {}
		void VariableUpdate(float afDeltaTime) {}
		void Reset() {}
		void OnDraw(float afFrameTime) {}
		void OnPostRender(float afFrameTime) {}
        void LoadUserConfig()
        {
            cConfigFile@ pConfig = cLux_GetUserConfig();
            mbEnableAutoSkip = pConfig.GetBool("Gameplay", "ToggleAutoSkip", true);
        }
        
		void SaveUserConfig() {}
		void OnMapEnter(cLuxMap @apMap) 
		{
			vToggledList[0].mfRepArrowSec = 0.0f;
			vToggledList[0].mfRenderBeginning = 0.0f;
            fTABPressAlpha = 0.0f;
            fTABDropCooldown = 0.0f;
            bObjectiveCelebrate = false;
            if (cLux_ScriptDebugOn()) vSavedList[0].msCurrentObj = "";
                
			vSimStore.resize(0);
			MapName = apMap.GetName();
			
			//Preload
			ImGui_PreloadImage("graphics/imgui/default/imgui_arrow_right.tga", eImGuiGfx_Texture);
			for (int i=0; i<=52; i++) {
				tString newI = ""+i;
				if (i<10) newI = "0"+i;
				ImGui_PreloadImage("graphics/sequences/RepNot/RepNot_000"+newI+".tga", eImGuiGfx_Texture);
			}
			Sound_PreloadGroup("Entities_Station/object/server_dial", false);
			Sound_PreloadGroup("Entities_Station/object/theta_lever", false);
			Sound_PreloadGroup("01_01_upsilon_awake/sfx/door_smash", false);
			Sound_PreloadProject("MunshiSim");
            
            Inventory_SetEnabled(false);
            Player_SetFallDamageActive(false);
            cStopMusic();
		}
		void OnMapLeave(cLuxMap @apMap) {}
		void CreateWorldEntities(cLuxMap @apMap) {}
		void DestroyWorldEntities(cLuxMap @apMap) {}
        void PreloadData(cLuxMap @apMap)
        {
            CellphoneGui_Preload();
            PlayerHands_PreloadHandModel_Human();
        }
		void OnEnterContainer(const tString&in asOldContainer) {}
		void OnLeaveContainer(const tString&in asNewContainer) {}
		void OnExitPressed() {}
        void OnAction(int alAction, bool abPressed)
        {
            if(alAction == eAction_OpenInventory && !LoadScreen_IsVisible() && bCanShowIndicator)
            {
                bTABPressed = abPressed;
            }
            
            if(alAction == eAction_Flashlight && !bIsInCall && bIsCalling) {
                AnswerPhone();
                fAnswerPhoneTimer = 0.0f;
                bIsCalling = false;
            }
        }
		void OnAnalogInput(int alAnalogId,  const cVector3f &in avAmount) {}
		void AppGotInputFocus() {}
		void AppLostInputFocus() {}
		
    //} END MAIN CALLBACKS
    //////////////////////////////////////////////////////////////////////////////////////////
    // ================
    // LOCAL FUNCTIONS
    // ================
    //{///////////////////////////////////////////////////////////////////////////////////////
	
	/////////////////////// Message Handling
	//--------------------------------------------------------
		bool LocalMakeMessage(const tString &in asLangEntry, int alCustomPath=0, int alCustomProg=1)
		{
			//Reference is "Read-Only" my TRACERFLUID
			tString LangEntryCheck = asLangEntry+alCustomPath+"_"+alCustomProg;
			if ((!cLux_HasTranslation(MapName, LangEntryCheck)&&(alCustomPath!=0))||(alCustomPath==0&&!vSavedList[0].mbStopRender)) return false;

			if (!vSavedList[0].mbStopRender) {
				if (sLangEntryOut=="")
				{
					LocalStopMessage();
				}
				cLux_AddDebugMessage("Can't Render yet");
				
				mBaseObj.Timer_Add("NextMessageTimer", 0.3f, "MakeNewMessage");
				sLangEntryOut = asLangEntry;
				lCustomPathOut = alCustomPath;
				lCustomProgOut = alCustomProg;
			} else {
				cLux_AddDebugMessage("Rendering started");
				
				mBaseObj.Timer_Remove("NextMessageTimer");
				vSavedList[0].msPathName = asLangEntry;

				if (alCustomPath!=0) {
					vSavedList[0].msPath = alCustomPath;
					vSavedList[0].mlProgressionCount = alCustomProg;
                }
					
				sLangEntryOut = "";
				lCustomPathOut = 0;
				lCustomProgOut = 1;
				OnSimUpdate();
                
                vSavedList[0].mbStopRender = false;
			}
            
            return true;
		}
		void MakeNewMessage(uint64 alID)
		{
			cLux_AddDebugMessage("MakingNewMessage");
			LocalMakeMessage(sLangEntryOut, lCustomPathOut, lCustomProgOut);
		}
		
	/////////////////////// Stop Message
	//--------------------------------------------------------
		void LocalStopMessage()
		{
			if (!vSavedList[0].mbStopRender&&!bFinalClick) {
				bFinalClick = true;
				fAnimationSec = 0.0f;
				mBaseObj.Timer_Remove("NextMessageTimer");
			}
		}
		
	/////////////////////// On Sim Update
	//--------------------------------------------------------
		void OnSimUpdate()
		{
			tString Entry = vSavedList[0].msPathName+vSavedList[0].msPath+"_"+vSavedList[0].mlProgressionCount;
			if (!cLux_HasTranslation(MapName, Entry)) Entry = vSavedList[0].msPathName;
			tString sOrgMessage = cString_FullyTranslate(MapName, Entry);
            cLux_AddDebugMessage(sOrgMessage);
            
            //Camera Animation
			array<tString> vCameraAnim = cString_Split(sOrgMessage, "*");
			if ((bStartedCameraAnim&&!bEndOnLastCameraAnim)||(vCameraAnim.size()>1)) { 
				CameraAnimation_End();
				bStartedCameraAnim = false;
                bEndOnLastCameraAnim = false;
			}

			if (vCameraAnim.size()>1)
			{
				array<tString> vCameraAnimInfo = cString_Split(vCameraAnim[1], "_");
				tString sAnimName = vCameraAnimInfo[0];
				bool bStopOnLast = cString_ToBool(vCameraAnimInfo[1], true);
				LocalMakeCameraAnimation(sAnimName, bStopOnLast, true);
			}
            
            //Objectives
			array<tString> vCurrentObjectiveLang = cString_Split(sOrgMessage, "=");
			if (vCurrentObjectiveLang.size()>1) { 
                tString sCurrentObjLang = vCurrentObjectiveLang[1];
                tString sCurrentObj = cString_FullyTranslate("DateSim_Objectives", sCurrentObjLang);
                
                if ((sCurrentObj != vSavedList[0].msCurrentObj) && (sCurrentObj != "")) {
                    vSavedList[0].msCurrentObj = sCurrentObj;
                    bObjectiveCelebrate = true;
                } else if (sCurrentObjLang == "") {
                    vSavedList[0].msCurrentObj = sCurrentObj;
                }
			}

            bSimUpdate = true;
            bAnimHasUpdated = true;
			mbUsedEmotion = false;
            fSkipAnimationSec = 0.0f;
		}
		
	/////////////////////// On Sim End
	//--------------------------------------------------------
		void OnSimEnd()
		{
			bSimEnd = true;
            
            if (bEndOnLastCameraAnim&&bStartedCameraAnim) {
				CameraAnimation_End();
				bStartedCameraAnim = false;
                bEndOnLastCameraAnim = false;
            }
            
            if (bIsInCall) bCallDone = true;
		}
		
	/////////////////////// Local Make Camera Animation
	//--------------------------------------------------------
		void LocalMakeCameraAnimation(const tString &in sAnimName, bool EndOnLast, bool AllowOverride)
		{
			cLux_AddDebugMessage("Camera Animation Activated");
			CameraAnimation_Begin(sAnimName, "", EndOnLast);
			bStartedCameraAnim = AllowOverride;
            bEndOnLastCameraAnim = EndOnLast;
		}
        
	/////////////////////// Count how many choices there are
	//--------------------------------------------------------
		int ChoiceCount()
		{
			tString Entry = vSavedList[0].msPathName+vSavedList[0].msPath+"_"+vSavedList[0].mlProgressionCount;
			if (!cLux_HasTranslation(MapName, Entry)) Entry = vSavedList[0].msPathName;
            if (!cLux_HasTranslation(MapName, Entry)) return 0;
            
			tString sMessage = cString_FullyTranslate(MapName, Entry);
            array<tString> vHasJump = cString_Split(sMessage, "^");
            if (vHasJump.size()>1) Entry = vHasJump[1];
            
            array<tString> EntrySplit = cString_Split(Entry, "_");
            tString UnChange = EntrySplit[0] + "_";
            int ProgCount = 0;
            if (vHasJump.size()>1) {
                ProgCount = cString_ToInt(EntrySplit[1], 0);
            } else ProgCount = cString_ToInt(EntrySplit[1], 0)+1;
            
            int i = 0;
            int modI = 0;
            while (cLux_HasTranslation(MapName, UnChange+(ProgCount+i))) {
                //Remove only if it's a WAU message and you can't show it
                tString RawString = cString_FullyTranslate(MapName, UnChange+(ProgCount+i));
                array<tString> WAUChoiceCheck = cString_Split(RawString, "$");
                array<tString> WAUCallsNeededCheck = cString_Split(RawString, "+");
                
                if (!((WAUChoiceCheck.size()>1) && (WAUChoiceCheck[1] == "ChoiceWAU") &&
                    (WAUCallsNeededCheck.size()>1) && (GetWauCalls()<cString_ToInt(WAUCallsNeededCheck[1], 1)) && (GetWauCalls() == 0))) modI++;
                
                i++;
            }

            return modI;
        }
        
	/////////////////////// WAUCalls
	//--------------------------------------------------------
        tString sPreviousPhoneText = "";
		void WauCalls(const tString &in sConvoName)
		{
            bIsCalling = true;
            sConvoNamePhone = sConvoName;
            Sound_PlayGui("Entities_Urban/tech/cellphone/vibrating_wood", 1.0f);
            Sound_PlayGui("MunshiSim/Game/bubblegum_phone", 1.0f);
            
            tString AnswerOrg = cString_FullyTranslate("DateSim_General", "PressToAnswer");
            array<tString> AnswerSplit = cString_Split(AnswerOrg, "%");
            if (AnswerSplit.size() > 0) {
                cVector2f CalSize = OptionMenu_GetScaledSize(cVector2f(300, 244));
                cVector3f CalPos = NrmPos-cVector3f(CalSize.x, CalSize.y,0)/2.0f+cVector3f(0, 200,0);
                tString FlashLightButton = cLux_GetKeyConfig().GetString("Flashlight", "Primary", "");
                array<tString> ButtonSplit = cString_Split(FlashLightButton, ".");
                if (ButtonSplit.size() > 0) FlashLightButton = ButtonSplit[1];
                sTextPickUp = AnswerSplit[0]+FlashLightButton+AnswerSplit[1];
                
                sPreviousPhoneText = sTextPickUp;
                CreateTextFade(sPreviousPhoneText, CalPos, CalSize, 2.0f, 4.0f, 1.0f, 1.0f, 1.0f, "default_medium_outline.fnt");
            }
        }
        
	/////////////////////// Stop WAUCalls
	//--------------------------------------------------------
		void StopWauCalls()
		{
            cLux_AddDebugMessage("Offical stop WAU calls");
            StopTelephoneRing();
        }
    
	//} END LOCAL FUNCTIONS
    //////////////////////////////////////////////////////////////////////////////////////////
    // ================
    // GLOBAL FUNCTIONS
    // ================
    //{///////////////////////////////////////////////////////////////////////////////////////
    
	/////////////////////// Reputation
	//--------------------------------------------------------
		void _Global_ChangeReputation()
		{
			float fNumAdd = cScript_GetGlobalArgFloat(0);
			if (fNumAdd==0) return;
			
			vSavedList[0].mfRepScore = cMath_Clamp(vSavedList[0].mfRepScore + fNumAdd, 0, 1.0f);

			bRepArrowPlus = (fNumAdd>0);
			vToggledList[0].mfRepArrowSec = 4.0f;
			float fRepScoreEffect = cMath_Clamp((1-vSavedList[0].mfRepScore), 0.5f, 1.0f);

			tString smsPath = "MunshiSim/UI/reputation_gain.ogg";
			if (fNumAdd<0) { 
				smsPath = "MunshiSim/UI/reputation_lose.ogg";
                int ID = Effect_VideoDistortion_Start((fRepScoreEffect/2)+1.0f, fRepScoreEffect+1.0f, 0.1f, 0.5f, vSavedList[0].mfRepScore+0.5f);
                Effect_VideoDistortion_FadeOut(ID, 1.5f);
			}
            int ID = Effect_Shake_Start(fRepScoreEffect*0.2f, fRepScoreEffect*0.2f, fRepScoreEffect*0.2f, 0.5f);
            Effect_Shake_FadeOut(ID, 0.5f);
			
			Sound_PlayGui(smsPath, 0.5f);
			cLux_AddDebugMessage("Current Reputation - "+vSavedList[0].mfRepScore);
		}
		
		void _Global_GetReputation()
		{
			cScript_SetGlobalReturnFloat(vSavedList[0].mfRepScore);
		}
		
	/////////////////////// Beginning Text
	//--------------------------------------------------------
		void _Global_BeginningText()
		{
            if (msPlace=="") {
                vSavedList[0].msOldPlace = cString_FullyTranslate("Lvl0_Apartment", "LevelScreen_Place");
                vSavedList[0].msOldTime = cString_FullyTranslate("Lvl0_Apartment", "LevelScreen_Time");
            } else {
                vSavedList[0].msOldPlace = msPlace;
                vSavedList[0].msOldTime = msTime;
            }
            
			msPlace = cScript_GetGlobalArgString(0);
			msTime = cScript_GetGlobalArgString(1);
			vToggledList[0].mfRenderBeginning = cScript_GetGlobalArgFloat(2);

            Effect_Fade_Out(0.0f);
			Sound_FadeGlobalVolume(1.0f,1.0f);
			Player_SetActive(false);
            bCanShowIndicator = false;
		}
        
		void _Global_GetBeginningTextProg()
		{
            cScript_SetGlobalReturnFloat(vToggledList[0].mfRenderBeginning);
		}
        
	/////////////////////// End Level
	//--------------------------------------------------------
		void _Global_EndLevel()
		{
            msChangeMapName = cScript_GetGlobalArgString(0);
            
			Effect_Fade_Out(2.0f);
			Sound_FadeGlobalVolume(0.0f, 1.0f, eSoundEntryType_All);
			Player_SetActive(false);
            bCanShowIndicator = false;
		}
		
	/////////////////////// Make Message
	//--------------------------------------------------------
		void _Global_MakeMessage()
		{
			tString sLangEntry = cScript_GetGlobalArgString(0);
			int lCustomPath = cScript_GetGlobalArgInt(1);
			int lCustomProg =cScript_GetGlobalArgInt(2);
			cScript_SetGlobalReturnBool(LocalMakeMessage(sLangEntry, lCustomPath, lCustomProg));
		}
		
	/////////////////////// Stop Message
	//--------------------------------------------------------
		void _Global_StopMessage()
		{
			LocalStopMessage();
		}
        
	/////////////////////// Get Message
	//--------------------------------------------------------
		void _Global_GetMessage()
		{
            if (vSavedList[0].mbStopRender)
                cScript_SetGlobalReturnString("");
            else cScript_SetGlobalReturnString(vSavedList[0].msPathName+"_"+vSavedList[0].msPath+"_"+vSavedList[0].mlProgressionCount);
		}
        
	/////////////////////// Get Message
	//--------------------------------------------------------
		void _Global_ChangeMessageSpeed()
		{
			float fSpeedMultiplier = cScript_GetGlobalArgFloat(0);
            if (fSpeedMultiplier==0) {
                cConfigFile@ pConfig = cLux_GetUserConfig();
                fSpeedMultiplier = pConfig.GetFloat("Gameplay", "FloatTextSpeed", 0.026f);
                bCanChangeMessageSpeed = true;
            } else bCanChangeMessageSpeed = false;
            
            vToggledList[0].mfTextSpeed = fSpeedMultiplier;
		}
		
	/////////////////////// Make Camera Animation
	//--------------------------------------------------------
		void _Global_MakeCameraAnimation()
		{
			tString sAnimName = cScript_GetGlobalArgString(0);
			bool StopOnLast = cScript_GetGlobalArgBool(1);
			bool AllowOverride = cScript_GetGlobalArgBool(2);
			
			LocalMakeCameraAnimation(sAnimName, StopOnLast, AllowOverride);
		}
		
	/////////////////////// Store/Fetch Cross-File Strings
	//--------------------------------------------------------
		void _Global_SimStoreString()
		{
			int lID = cScript_GetGlobalArgInt(0);
			tString sString = cScript_GetGlobalArgString(1);
			
			vSimStore.insertAt(lID, sString);
		}
		
		void _Global_SimFetchString()
		{
			int lID = cScript_GetGlobalArgInt(0);
			tString sReturnString = "";
			
			for (int i=0; i<vSimStore.size(); i++) {
				if (lID == i) sReturnString = vSimStore[i];
			}
			cScript_SetGlobalReturnString(sReturnString);
		}
		
	/////////////////////// Get sim status
	//--------------------------------------------------------
		void _Global_UIActive()
		{
			cScript_SetGlobalReturnBool(!vSavedList[0].mbStopRender);
		}
		
	/////////////////////// Get Sim End
	//--------------------------------------------------------
		void _Global_GetSimEnd()
		{
			cScript_SetGlobalReturnString(bSimEnd+"_"+vSavedList[0].msPathName+"_"+vSavedList[0].msPath+"_"+vSavedList[0].mlProgressionCount);
			bSimEnd = false;
		}
        
	/////////////////////// Get Sim Update
	//--------------------------------------------------------
		void _Global_GetSimUpdate()
		{
			cScript_SetGlobalReturnString(bSimUpdate+"_"+vSavedList[0].msPathName+"_"+vSavedList[0].msPath+"_"+vSavedList[0].mlProgressionCount);
			bSimUpdate = false;
		}
        
	/////////////////////// Get Sim Game Paused
	//--------------------------------------------------------
		void _Global_GetSimGamePaused()
		{
			cScript_SetGlobalReturnBool(bGamePaused);
		}
        
	/////////////////////// Set Current Objective
	//--------------------------------------------------------
		void _Global_SetObjective()
		{
			tString sObjective = cScript_GetGlobalArgString(0);
            bool bCelebrate = cScript_GetGlobalArgBool(1);
            vSavedList[0].msCurrentObj = cString_FullyTranslate("DateSim_Objectives", sObjective);
            bObjectiveCelebrate = bCelebrate;
		}
        
	/////////////////////// Get Current Objective
	//--------------------------------------------------------
		void _Global_GetObjective()
		{
			cScript_SetGlobalReturnString(vSavedList[0].msCurrentObj);
		}
        
	/////////////////////// Can TAB Press
	//--------------------------------------------------------
		void _Global_CanShowIndicator()
		{
			bCanShowIndicator = cScript_GetGlobalArgBool(0);
		}
        
	/////////////////////// Show Reputation Indicator
	//--------------------------------------------------------
		void _Global_ShowIndicator()
		{
			bool ShouldShow = cScript_GetGlobalArgBool(0);
            
            if (ShouldShow) {
                fFakeTABPressed = 50;
                fTABDropCooldown = 100.0f;
            } else {
                fFakeTABPressed = 0;
                fTABDropCooldown = 0.0f;
            }
		}
        
	/////////////////////// When WAU calls
	//--------------------------------------------------------
		void _Global_WauCalls()
		{
            if (bIsCalling || bIsInCall) return;
			tString sConvoName = cScript_GetGlobalArgString(0);
            WauCalls(sConvoName);
		}
        
		void _Global_GetWauCalls()
		{
            cScript_SetGlobalReturnInt(vSavedList[0].mlWauCalls);
		}
        
		void _Global_StopWauCalls()
		{
            StopWauCalls();
		}
    
    //} END GLOBAL FUNCTIONS
    //////////////////////////////////////////////////////////////////////////////////////////
    // =============
    // GUI CALLBACKS
    // =============
    //{///////////////////////////////////////////////////////////////////////////////////////
	
		void OnGui(float afTimeStep) {
				
            if (bCanChangeMessageSpeed) {
                cConfigFile@ pConfig = cLux_GetUserConfig();
                vToggledList[0].mfTextSpeed = pConfig.GetFloat("Gameplay", "FloatTextSpeed", 0.026f);
            }
            
			/////////////////////// Beginning Text
			//--------------------------------------------------------
            NrmPos = ImGui_NrmPos(0.5f, 0.5f, 2.0f); //Can only be called here
            
				if (vToggledList[0].mfRenderBeginning>0) {
					cVector2f CalSize = OptionMenu_GetScaledSize(cVector2f(200, 144));
					cVector3f CalPos = NrmPos-cVector3f(CalSize.x, CalSize.y,0)/2.0f;
                    
                    mfBegTextTime = mfBegTextTime + 0.01f;
                    if ((mfBegTextTime>0.2f)&&!mbSecondStage)
                        mfMoveAmt = cMath_Clamp(cMath_Easing(eEasing_CubicInOut, (mfBegTextTime-0.2f),  0,  80), 0, 80);
                        
                    if ((mlBeginningID<0)||(GetTextFadeAlpha(mlBeginningID)>=0.0001f)&&!mbSecondStage) {
                        float fOutAlpha = (1.0001f-(mfMoveAmt/80));
                        mlBeginningID = CreateTextFade(vSavedList[0].msOldPlace, CalPos + cVector3f(-mfMoveAmt, 0, 0), CalSize, 3.0f - (mfMoveAmt/160), 0.2f, vToggledList[0].mfRenderBeginning, 1.0f, fOutAlpha);
                        mlBeginningTimeID = CreateTextFade(vSavedList[0].msOldTime, CalPos + cVector3f(-mfMoveAmt, 50, 0), CalSize, 2.0f - (mfMoveAmt/160), 0.2f, vToggledList[0].mfRenderBeginning, 1.0f, fOutAlpha);
                        
                        if (fOutAlpha<=0.01f)
                            mbSecondStage = true;
                    } else if (mbSecondStage&&(mlBeginningID!=-1)&&!mbThirdStage) {
                        mfMoveAmt = cMath_Clamp(cMath_Easing(eEasing_CubicInOut, (mfBegTextTime-1.0f),  0,  80), 0, 80);
                        float fOutAlpha = (mfMoveAmt/80);
                        mlBeginningID = CreateTextFade(msPlace, CalPos + cVector3f(-mfMoveAmt + 80, 0, 0), CalSize, 2.5f + (mfMoveAmt/160), 0.2f, vToggledList[0].mfRenderBeginning, 1.0f, fOutAlpha, "sansation_large_additive.fnt", mlBeginningID);
                        mlBeginningTimeID = CreateTextFade(msTime, CalPos + cVector3f(-mfMoveAmt + 80, 50, 0), CalSize, 1.5f + (mfMoveAmt/160), 0.2f, vToggledList[0].mfRenderBeginning, 1.0f, fOutAlpha, "sansation_large_additive.fnt", mlBeginningID);
                        
                        if (GetTextFadeAlpha(mlBeginningID)>=1.0f) {
                            mbThirdStage = true;
                        }
                    }

                    if ((mlBeginningID>=0)&&GetTextFadeAlpha(mlBeginningID)<0.0001f) {
                        Player_SetActive(true);
                        Effect_Fade_In(2.0f);
                        Sound_FadeGlobalVolume(1.0f, 1.0f, eSoundEntryType_All);
                        
                        mfMoveAmt = 0;
                        mfBegTextTime = 0;
                        mlBeginningID = -1;
                        mlBeginningTimeID = -1;
                        vToggledList[0].mfRenderBeginning = 0;
                        bCanShowIndicator = true;
                        mbSecondStage = false;
                        mbThirdStage = false;
                    }
				}
                
			/////////////////////// End Level
			//--------------------------------------------------------
                if (msChangeMapName!=""&&Effect_Fade_GetAlpha()==1) {
                    Map_ChangeMap(msChangeMapName+".hpm", "PlayerStartArea_1", "", "");
                    msChangeMapName = "";
                }
				
			/////////////////////// Reputation Arrow
			//--------------------------------------------------------
                if (!MainMenu_IsShowing()) fFakeTABPressed = cMath_Clamp(fFakeTABPressed - 0.1f, 0, 50.0f);
				if (vToggledList[0].mfRepArrowSec>0) {
					if (!MainMenu_IsShowing()) vToggledList[0].mfRepArrowSec = cMath_Max(vToggledList[0].mfRepArrowSec - 0.01f, 0.0f);
					float fRepArrowSec = vToggledList[0].mfRepArrowSec;
					float fRepArrowCos = cMath_Cos(fRepArrowSec*8);
					float fYPos = 0;
					float fAlpha = cMath_Min(fRepArrowCos + 0.2f, fRepArrowSec);
					
					cImGuiGfx RepArrow;
					if (bRepArrowPlus) {
						//Up Arrow
                        
						ImGui_SetModRotateAngle(-90.0f);
						RepArrow = cImGuiGfx("graphics/imgui/default/imgui_arrow_right.tga", eImGuiGfx_Texture);
						RepArrow.mColor = cColor(0.0f, 1.0f, 0.4f, fAlpha);
						
						fYPos = 50 - fRepArrowCos*15;
					} else {
						//Down Arrow
						
						ImGui_SetModRotateAngle(90.0f);
						RepArrow = cImGuiGfx("graphics/imgui/default/imgui_arrow_right.tga", eImGuiGfx_Texture);
						RepArrow.mColor = cColor(0.8f, 0.0f, 0.0f, fAlpha);
						
						fYPos = 50 + fRepArrowCos*15;
					}
					
					cVector3f CalPos = OptionMenu_GetTopRightOffset(cVector2f(-100, 50), 3.0f);
					cVector2f CalSize = OptionMenu_GetScaledSize(cVector2f(30, 30));
					ImGui_DoImage(RepArrow, CalPos, CalSize);
					
					ImGui_SetModRotateAngle(0.0f);
                    fTABPressAlpha = 0.0f;
                    fTABDropCooldown = 0.0f;
				} else if (bTABPressed || (fFakeTABPressed > 0) || (bObjectiveCelebrate && (fFakeTABPressed == 0)) || fTABPressAlpha > 0) {
                    if (!MainMenu_IsShowing()) {
                        if (bTABPressed || (fFakeTABPressed > 0)) {
                            fTABPressAlpha = cMath_Clamp(fTABPressAlpha + 0.1f, 0, 1.0f);
                            if (fTABPressAlpha == 1.0f) {
                                if (!bObjectiveCelebrate && (fTABDropCooldown != 25.0f)) {
                                    fTABDropCooldown = 25.0f;
                                } else if (bObjectiveCelebrate && (fTABDropCooldown != 50.0f))
                                   fTABDropCooldown = 50.0f; 
                            }
                        } else if (fTABDropCooldown > 0) {
                                fTABDropCooldown = cMath_Clamp(fTABDropCooldown - 0.01f, 0, 1.0f);
                        } else if (fTABDropCooldown <= 0) {
                            fTABPressAlpha = cMath_Clamp(fTABPressAlpha - 0.01f, 0, 1.0f);
                        }
                    }
                    
                    //RepBar
					cVector3f CalPos = OptionMenu_GetTopRightOffset(cVector2f(-75, 25), -3.0f);
					cVector2f CalSize = OptionMenu_GetScaledSize(cVector2f(40, 130));
                    
                    cImGuiGfx RepBar;
                    RepBar = cImGuiGfx("graphics/imgui/munshisim/rep_bar.png", eImGuiGfx_Texture);
                    RepBar.mColor = cColor(1.0f, 1.0f, 1.0f, fTABPressAlpha);
                    ImGui_DoImage(RepBar, CalPos, CalSize);
                    
                    //RepBlock
                    float fCurrentY = cMath_Lerp(vSavedList[0].mfRepScore, 27, 148);
					CalPos = OptionMenu_GetTopRightOffset(cVector2f(-72, fCurrentY), -3.0f);
					CalSize = OptionMenu_GetScaledSize(cVector2f(34, 4.5));
                    
                    cImGuiFrameGfx RepBlock;
                    ImGui_DrawFrame(RepBlock, CalPos, CalSize, cColor(0.2f, 0.2f, 0.2f, fTABPressAlpha - 0.3f));
                    
                    //RepBarArrow
                    fCurrentY = cMath_Lerp(vSavedList[0].mfRepScore, 17, 138);
					CalPos = OptionMenu_GetTopRightOffset(cVector2f(-45, fCurrentY), -2.0f);
					CalSize = OptionMenu_GetScaledSize(cVector2f(25, 25));
                    
                    cImGuiGfx RepBarArrow;
                    RepBarArrow = cImGuiGfx("graphics/imgui/munshisim/arrow_left.png", eImGuiGfx_Texture);
                    RepBarArrow.mColor = cColor(1.0f, 1.0f, 1.0f, fTABPressAlpha);
                    ImGui_DoImage(RepBarArrow, CalPos, CalSize);
                    
                    //Objectives
                    if (vSavedList[0].msCurrentObj != "") {
                        cImGuiLabelData label;
                        label.mColorBase = cColor(1.0f, 1.0f, 1.0f, fTABPressAlpha);
                        label.mFont.SetFile("default_medium_outline.fnt");
                        label.mFontAlign = eFontAlign_Right;
                        CalPos = OptionMenu_GetTopRightOffset(cVector2f(-295, -30), -2.0f);
                        CalSize = OptionMenu_GetScaledSize(cVector2f(200, 144));
                        
                        tString sObjectiveText = cString_FullyTranslate("DateSim_Objectives", "Objective");
                        ImGui_DoLabelExt(sObjectiveText, label, CalPos, CalSize, 3.0f);
                        
                        CalPos = OptionMenu_GetTopRightOffset(cVector2f(-293, 15), -2.0f);
                        ImGui_DoLabelExt(vSavedList[0].msCurrentObj, label, CalPos, CalSize, 2.5f);
                        
                        CalPos = OptionMenu_GetTopRightOffset(cVector2f(-297.5, 60.5), -2.0f);
                        CalSize = OptionMenu_GetScaledSize(cVector2f(205, 6));
                        cImGuiFrameGfx UnderlineData;
                        ImGui_DrawFrame(UnderlineData, CalPos, CalSize, cColor(0, 0, 0, fTABPressAlpha));
                        
                        CalPos = OptionMenu_GetTopRightOffset(cVector2f(-295, 62), -2.0f);
                        CalSize = OptionMenu_GetScaledSize(cVector2f(200, 3));
                        ImGui_DrawFrame(UnderlineData, CalPos, CalSize, cColor(1.0f, 1.0f, 1.0f, fTABPressAlpha));
                        
                        if (bObjectiveCelebrate) {
                            if (fFakeTABPressed == 0) {
                                Sound_PlayGui("MunshiSim/UI/objective_created", 1.0f);
                                cLux_AddDebugMessage("New Objective!");
                            }
                            fFakeTABPressed = 50;
                            
                            if (fTABPressAlpha == 1.0f) {
                                bObjectiveCelebrate = false;
                                fFakeTABPressed = 0;
                            }
                        }
                    }
                }
				
			/////////////////////// Main
			//--------------------------------------------------------
				if (vSavedList[0].mbStopRender) return;
				bSimEnd = false;
				
				tString Entry = vSavedList[0].msPathName+vSavedList[0].msPath+"_"+vSavedList[0].mlProgressionCount;
				if (!cLux_HasTranslation(MapName, Entry)) Entry = vSavedList[0].msPathName;

				tString sOrgMessage = cString_FullyTranslate(MapName, Entry);

				int NextProg = vSavedList[0].mlProgressionCount+1;
				if (!MainMenu_IsShowing()) {
					if ((fAnimationCos!=1)&&(!bFinalClick)) {
						fAnimationSec = cMath_Min(fAnimationSec + 0.01f, 1.0f);
						fAnimationCos = ((cMath_Cos(fAnimationSec * cMath_ToRad(180))+1)/2);
					} else if (bFinalClick) {
						fAnimationSec = cMath_Min(fAnimationSec + 0.05f, 1.0f);
						fAnimationCos = ((cMath_Cos((fAnimationSec * cMath_ToRad(180))+cMath_ToRad(180))+1)/2);

						if (fAnimationCos==1) {
							bLeftTriggered = false;
							bGamePaused = false;
							bFinalClick = false;

							ftextAnimationSec = 0.0f;
							fAnimationSec = 0.0f;
							fAnimationCos = 0.0f;
							fButtonAnimationSec = 0.0f;
							lPreviousCharCount = 0;
							
							vSavedList[0].mbStopRender = true;
							
							OnSimEnd();
							return;
						}
					}
				}

				array<tString> vCharacter = cString_Split(sOrgMessage, "$");
				if ((vCharacter.size()>1)&&(vCharacter[1]!="$Choice$"))
				{
					sOrgMessage = vCharacter[2];
					sSpeaking = vCharacter[1];
					sSpeakingFull = cString_FullyTranslate("DateSim_Characters", vCharacter[1]);
				}
                
                //Removing Camera Part
                array<tString> vCameraAnim = cString_Split(sOrgMessage, "*");
                if (vCameraAnim.size()>1) { 
                    sOrgMessage = vCameraAnim[2];
                }
                
                //Removing Objectives Part
                array<tString> vCurrentObjectiveLang = cString_Split(sOrgMessage, "=");
                if (vCurrentObjectiveLang.size()>1) { 
                    sOrgMessage = vCurrentObjectiveLang[2];
                }
                
				array<tString> vSpecial = cString_Split(sOrgMessage, "@");
				if (vSpecial.size()>1)
				{
					sOrgMessage = vSpecial[2];
					if (!mbUsedEmotion)
					{
						tString sSpecial = cString_ToLowerCase(vSpecial[1]);
						if (sSpecial=="yell") {
							int ID = Effect_Shake_Start(1.0f, 0.3f, 0.2f, 0.4f);
							Effect_Shake_FadeOut(ID, 0.4f);
							Sound_PlayGui("01_01_upsilon_awake/sfx/door_smash/door_smash", 0.9f);
                            
                            mbUsedEmotion = true;
						} else if (sSpecial=="unknown")
                        {
                            sSpeakingFull = cString_FullyTranslate("DateSim_General", "Unknown");
                        } else if (sSpecial=="kiss")
                        {
                            Sound_PlayGui("MunshiSim/Game/kiss", 0.8f);
                            mbUsedEmotion = true;
                        } else if (sSpecial=="cough")
                        {
                            Sound_PlayGui("MunshiSim/Game/simon_cough", 0.8f);
                            mbUsedEmotion = true;
                        }
					}
				}
				
				array<tString> vMunshiAnim = cString_Split(sOrgMessage, "#");
				if (vMunshiAnim.size()>1)
				{
					sOrgMessage = vMunshiAnim[2];

					MunshiAnimLocated = vMunshiAnim[1];
				} else MunshiAnimLocated = "";
                
                array<tString> vMunshiObjects = cString_Split(sOrgMessage, "{");
				if (vMunshiObjects.size()>1)
				{
                    sOrgMessage = vMunshiObjects[2];
                    
                    MunshiObjects = vMunshiObjects[1];
				} else MunshiObjects = "";
                if (!(MunshiAnimLocated==""&&MunshiObjects=="") && bAnimHasUpdated) {
                    ChangeMunshiAnim(MunshiAnimLocated, MunshiObjects);
                    bAnimHasUpdated = false;
                }
				
				bool NextProgIsChoice = false;
				tString sNextProgEntry = vSavedList[0].msPathName+vSavedList[0].msPath+"_"+NextProg;
				if (cLux_HasTranslation(MapName, sNextProgEntry)) NextProgIsChoice = cString_IsChoice(sNextProgEntry);

				tString jumpmsPathName = "";
				array<tString> JumpOrg = cString_Split(sOrgMessage, "^");
				if (JumpOrg.size()>1)
				{
					jumpmsPathName = JumpOrg[1];
                    
					if (jumpmsPathName!="") {
						if (cString_IsChoice(jumpmsPathName)) {
							NextProgIsChoice = true;
						} else {
							sNextProgEntry = jumpmsPathName;
						}
					}
					
					sOrgMessage = JumpOrg[2];
				}

				if ((lPreviousCharCount>=sOrgMessage.length())&&NextProgIsChoice&&(fButtonAnimationSec!=1.0f)) {
					fButtonAnimationSec = cMath_Min(fButtonAnimationSec + 0.1f, 1.0f);
					vSavedList[0].mbDisplayChoices = true;
				}
				
                
				array<tString> vRepChange = cString_Split(sOrgMessage, "%");
                if (vRepChange.size()>0) sOrgMessage = vRepChange[2];
                
                if (mbEnableAutoSkip&&fSkipAnimationSec>5) {
                    mbFakeLeftClick = true;
                }

				if (((cInput_IsTriggered(eAction_MenuLeftMouse)&&!bLeftTriggered)||mbFakeLeftClick)&&!bFinalClick&&!MainMenu_IsShowing()) {
					fWait = 0.0f;
					fWaitSec = 0.0f;
					if ((lPreviousCharCount<sOrgMessage.length())&&(lPreviousCharCount>=cMath_Min(5, int(sOrgMessage.length()/2)))) {
						lPreviousCharCount = 1000.0f;
						ftextAnimationSec = 1000.0f;
						if (NextProgIsChoice) {
							vSavedList[0].mbDisplayChoices = true;
						}
					} else if (lPreviousCharCount>=sOrgMessage.length()&&!NextProgIsChoice) {
						if (cLux_HasTranslation(MapName, sNextProgEntry)) {
							array<tString> Seperated = cString_Seperate_PathName(sNextProgEntry);
							lPreviousCharCount = 0;
							ftextAnimationSec = 0.0f;
                            
							if (Seperated.size()>1) {
								vSavedList[0].msPathName = Seperated[0];
								vSavedList[0].msPath = cString_ToInt(Seperated[1], 1);
								vSavedList[0].mlProgressionCount = cString_ToInt(Seperated[2], 1);
							} else {
								vSavedList[0].mlProgressionCount = NextProg;
							}
							
							OnSimUpdate();
						} else {
							fAnimationSec = 0.0f;
							ftextAnimationSec = 1000.0f;	
							bFinalClick = true;
						}
						
						if (vRepChange.size()>0) {
							ChangeReputation(cString_ToFloat(vRepChange[1], 0.0f));
						}
					}

					bLeftTriggered = true;
                    mbFakeLeftClick = false;
				} else if  (!cInput_IsTriggered(eAction_MenuLeftMouse)) bLeftTriggered = false;

				//All DrawFrames IN LINES BEFORE the calling of cLux_GetGuiHandler().SetGameHudInputFocus(true); turn invisible for a frame
				//This fixes it...
				if (MainMenu_IsShowing()) bGamePaused = false;
				if (!bGamePaused&&vSavedList[0].mbDisplayChoices&&!MainMenu_IsShowing()) {
					Emotion_StartHeartbeat(1.0f, 0.40f, eMusicPrio_SceneAmb, 6.0f, 1.0f, 3.0f);
					cLux_GetGuiHandler().SetGameHudInputFocus(true);
					bGamePaused = true;
				}


				cColor topCol(0.4f, 1.0f);
				cImGuiFrameGfx gfxBackground;
				gfxBackground.mGfxCornerTopRight = cImGuiGfx("menu_corner_tr.tga");
				gfxBackground.mGfxBorderTop = cImGuiGfx("menu_border_top.tga");
				gfxBackground.mGfxCornerTopLeft = cImGuiGfx("menu_corner_tl.tga");
				gfxBackground.mGfxBorderLeft = cImGuiGfx("menu_border_left.tga");
				
				gfxBackground.mGfxBorderRight = cImGuiGfx("menu_border_right.tga");
				gfxBackground.mGfxCornerBottomLeft = cImGuiGfx("menu_corner_bl.tga");
				gfxBackground.mGfxCornerBottomRight = cImGuiGfx("menu_corner_br.tga");
					
				gfxBackground.mGfxBorderBottom = cImGuiGfx("menu_border_bottom.tga");
				gfxBackground.mGfxBackground.mColor = cColor(5.0f/255.0f, 60.0f/255.0f, 72.0f/255.0f, 0.25f);
				gfxBackground.mColorCornerTopRight = topCol;
				gfxBackground.mColorCornerTopLeft = topCol;

				//Helps with calculation
				//cVector3f CalPos = cVector3f(-200, 532 + (fAnimationCos*550), 0);
				cVector3f CalPos = OptionMenu_GetTopLeftOffset(cVector2f(26, 498 + (fAnimationCos*550)), -2.0f);
				//cVector2f CalSize = cVector2f(1200, 200);
				cVector2f CalSize = OptionMenu_GetScaledSize(cVector2f(1035, 187));
                
                //For "square" screens, a simple fix.
                if (IsSquareResolution())
                    CalSize = OptionMenu_GetScaledSize(cVector2f(880, 187));
				//cImGuiGfx likes to add gaps, so I can't just change opacity
				for (int i=0; i<3; i++) {
					ImGui_DrawFrame(gfxBackground, CalPos, CalSize, cColor(1.0, 1.0, 1.0, 1.0));
				}

				cImGuiFrameGfx gfxName;
				gfxName.mGfxBackground.mColor = cColor(1.0f, 1.0f, 1.0f, 0.5f);
				//CalPos = cVector3f(-200, 490 + (fAnimationCos*590), 0);
				CalPos = OptionMenu_GetTopLeftOffset(cVector2f(26, 458 + (fAnimationCos*550)), -2.0f);
				//CalSize = cVector2f(210, 40);
				CalSize = OptionMenu_GetScaledSize(cVector2f(181, 37.4));
				ImGui_DrawFrame(gfxName, CalPos, CalSize, cColor(0.01, 0.07, 0.1, 1.0));


				if (vSavedList[0].mbDisplayChoices) {
					if (!MainMenu_IsShowing()) {
						cImGuiGfx mouseGfx("imgui_pointer_normal.tga");
						mouseGfx.mColor = cColor_White;
						ImGui_DoMouse(mouseGfx, cVector3f_Zero);
					}

					cImGuiButtonData ButtonData;
					ButtonData.mFont.SetFile("sansation_large_additive.fnt");
					ButtonData.mFont.mvSize = OptionMenu_GetScaledSize(cVector2f(19, 21));
					ButtonData.mvDefaultSize = OptionMenu_GetScaledSize(cVector2f(210,40));
					ButtonData.mbUseInFocusColor = true;
					ButtonData.mColorText = cColor(1.0f,1.0f,1.0f);
					ButtonData.mColorBase = cColor(0.196, 0.392, 0.392, fButtonAnimationSec);
					float fInFocusPulse = ImGui_FadeOscillateFloat("MessageBoxFocusPulse", 1, 0.4f, 0.35, eEasing_CubicInOut);
					ButtonData.mColorInFocus = cColor(fInFocusPulse * 0.196, fInFocusPulse * 0.392, fInFocusPulse * 0.392);

					cImGuiFrameGfx gfxBackgroundBut;
					gfxBackgroundBut.mGfxBackground.mColor = cColor(5.0f/255.0f, 60.0f/255.0f, 72.0f/255.0f, 0.25f);

					CalSize = OptionMenu_GetScaledSize(cVector2f(273, 37));
					cVector2f CalSizeBut = OptionMenu_GetScaledSize(cVector2f(270, 35));
					bool bChoicesRepChange = false;
                    int fChoiceCount = ChoiceCount();
                    
                    //Saving these helps fix a frame text change
                    int mlSavedProgressionCount = vSavedList[0].mlProgressionCount;
                    tString msSavedPathName = vSavedList[0].msPathName;
                    tString msSavedmsPath = vSavedList[0].msPath;
					for (int i=1; i<=fChoiceCount; i++) {
						int NewI = i + mlSavedProgressionCount;
						tString NewmsPath = msSavedPathName+msSavedmsPath+"_"+NewI;
						
						tString sPathName_custom = "";
						if (jumpmsPathName!="") {
							array<tString> Seperated = cString_Seperate_PathName(jumpmsPathName);
							if (Seperated.size()>1)
							{
								sPathName_custom = Seperated[0];
								int sPath_custom = cString_ToInt(Seperated[1], 1);
								int lProgressionCount_custom = cString_ToInt(Seperated[2], 1)+(i-1);
								NewmsPath = sPathName_custom+sPath_custom+"_"+lProgressionCount_custom;
							}
						}

						if (cLux_HasTranslation(MapName, NewmsPath)) {
							tString RawStr = cString_FullyTranslate(MapName, NewmsPath);

							array<tString> vRemoveChoice = cString_Split(RawStr, "$Choice$");
                            array<tString> vRemoveWAUChoice = cString_Split(RawStr, "$ChoiceWAU$");
                            
							if ((vRemoveChoice.size()>1) || (vRemoveWAUChoice.size()>1)) {
                                tString NewStr = "";
                                
                                if (vRemoveChoice.size()>1) {
                                    NewStr = vRemoveChoice[1];
                                } else if (vRemoveWAUChoice.size()>1) {
                                    NewStr = vRemoveWAUChoice[1];
                                }
                                
                                int lWAUCallsNeeded = 0;
                                array<tString> vWAUCallsNeeded = cString_Split(NewStr, "+");
                                if (vWAUCallsNeeded.size()>1) {
                                    lWAUCallsNeeded = cString_ToInt(vWAUCallsNeeded[1], 1);
                                    NewStr = vWAUCallsNeeded[2];
                                }
								float fRepChange = 0.0f;
                                
								tString jumpmsPathName_new = "";
								JumpOrg = cString_Split(NewStr, "^");
								if (JumpOrg.size()>1)
								{
									jumpmsPathName_new = JumpOrg[1];
									NewStr = JumpOrg[2];
								}
								
								array<tString> vRepChange = cString_Split(RawStr, "%");
								if (vRepChange.size()>0) {
                                    
                                    if (GetWauCalls()<lWAUCallsNeeded || (lWAUCallsNeeded==0)) {
                                        if (vRemoveWAUChoice.size()>1) {
                                            continue;
                                        } else {
                                            ButtonData.mColorBase = cColor(0.55, 0.47, 0.19, fButtonAnimationSec);
                                        }
                                    } else {
                                        if (vRemoveWAUChoice.size()>1) {
                                            ButtonData.mColorBase = cColor(0.8, 0, 0.4, fButtonAnimationSec);
                                        } else {
                                            ButtonData.mColorBase = cColor(0.3, 0.3, 0.3, fButtonAnimationSec);
                                        }
                                    }
                                    ButtonData.mColorInFocus = cColor(fInFocusPulse * ButtonData.mColorBase.r, fInFocusPulse * ButtonData.mColorBase.g, fInFocusPulse * ButtonData.mColorBase.b);
									fRepChange = cString_ToFloat(vRepChange[1], 0.0f);
									NewStr = vRepChange[2];
									bChoicesRepChange = true;
								}

								cVector3f ChoiceCal = OptionMenu_GetTopLeftOffset(cVector2f(420, 453 + (fAnimationCos*545) + (i*43) - 2.5 + (fButtonAnimationSec*2.5) - (fChoiceCount*43)), -2.0f);
								cVector3f ChoiceCalBut = OptionMenu_GetTopLeftOffset(cVector2f(416 + (fButtonAnimationSec*2.5), 453.5 + (fAnimationCos*545) + (i*43) -4 + (fButtonAnimationSec*2.5) - (fChoiceCount*43)), -2.0f);

								ImGui_DrawFrame(gfxBackgroundBut, ChoiceCalBut, CalSize, cColor(1.0, 1.0, 1.0, fButtonAnimationSec));
								if (ImGui_DoButtonExt(NewmsPath, NewStr, ButtonData, ChoiceCal, CalSizeBut)) {
                                    if (((GetWauCalls()<lWAUCallsNeeded || (lWAUCallsNeeded==0)) && (vRemoveWAUChoice.size()==0)) || (vRemoveWAUChoice.size()>1)) {
                                        if (jumpmsPathName_new!="") {
                                            array<tString> Seperated = cString_Seperate_PathName(jumpmsPathName_new);
                                            if (Seperated.size()>1)
                                            {
                                                vSavedList[0].msPathName = Seperated[0];
                                                vSavedList[0].msPath = cString_ToInt(Seperated[1], 1);
                                                vSavedList[0].mlProgressionCount = cString_ToInt(Seperated[2], 1);
                                            } else {
                                                vSavedList[0].msPath = vSavedList[0].msPath + i;
                                                vSavedList[0].mlProgressionCount = 1;
                                            }
                                        } else {
                                            if (sPathName_custom!="") vSavedList[0].msPathName = sPathName_custom;
                                            vSavedList[0].msPath = vSavedList[0].msPath + i;
                                            vSavedList[0].mlProgressionCount = 1;
                                        }
                                        cLux_AddDebugMessage("Pressed Button");
                                        
                                        vSavedList[0].mbDisplayChoices = false;
                                        bChoicesRepChange = false;
                                        Effect_RadialBlur_FadeOut(bRenderedChoiceNot, 1.0f);
                                        tString Text = cString_FullyTranslate("DateSim_General", "ChoiceMatter");
                                        StopTextFade(Text, 0.7f);
                                        StopSequence("RepNot", 0.7f);
                                        bRenderedChoiceNot = -1;
                                        ftextAnimationSec = 0.0f;
                                        ChangeReputation(fRepChange);
                                        OnSimUpdate();

                                        Sound_PlayGui("Entities_Station/object/theta_lever/theta_lever_close", 0.5f);
                                        fButtonAnimationSec = 0.0f;
                                        
                                        bGamePaused = false;
                                        cLux_GetGuiHandler().SetGameHudInputFocus(false);
                                        break;
                                    }
								}
							}
						}
					}
					
					if (bChoicesRepChange&&bRenderedChoiceNot<0) {
						cVector3f RepCalPos = OptionMenu_GetTopLeftOffset(cVector2f(20, 12.5), -2.0f);
						cVector2f RepCalSize = OptionMenu_GetScaledSize(cVector2f(210, 110));
						RenderSequence("RepNot", RepCalPos, RepCalSize, 0.4f, 4.0f, 1.0f, 0.9f);
						
						tString Text = cString_FullyTranslate("DateSim_General", "ChoiceMatter");
						RepCalPos = OptionMenu_GetTopLeftOffset(cVector2f(20, 80), -2.0f);
						RepCalSize = OptionMenu_GetScaledSize(cVector2f(210, 110));
						CreateTextFade(Text, RepCalPos, RepCalSize, 1.5f, 0.4f, 4.0f, 1.0f, 0.9f);
						
						bRenderedChoiceNot = Effect_RadialBlur_Start(0.5f, 0.5f, 0.5f, 0.2f);
						Effect_TimeGlitch_Start(0.4f, 0.4f, 0.2f, true, 0.3f);
					}
				}

				//--Name
				CalSize = OptionMenu_GetScaledSize(cVector2f(180, 38));
				cImGuiLabelData label;
				label.mFont.SetFile("sansation_large_additive.fnt");
				label.mFont.mMaterial = eGuiMaterial_Additive;
				label.mFont.mvSize = ImGui_NrmSizeGroupKeepRatio(0.04);
				label.mFontAlign = eFontAlign_Center;
				label.mColorBase = cColor(0.6,0.7,1.0);
				ImGui_DoLabelExt(sSpeakingFull, label, CalPos, CalSize);

				//--Text
				if ((fAnimationCos>0)&&!bFinalClick) return;
				tString Message = sOrgMessage;
				int messageLength = Message.length();
                cVector2f CalSizeCal = OptionMenu_GetScaledSize(cVector2f(1035, 187));
                //For "square" screens, a simple fix.
                if (IsSquareResolution())
                    CalSizeCal = OptionMenu_GetScaledSize(cVector2f(880, 187));
                    
                int Char = (CalSizeCal.x/12.3);
                
				int Laps = ((messageLength + Char - 1) / Char);
				tString editMessage = "";

				label.mFontAlign = eFontAlign_Left;
				label.mColorBase = cColor(1.0,1.0,1.0);

				if ((fWait>0.1f)&&(fWaitSec<fWait)) {
					fWaitSec = fWaitSec + 0.1f;
				} else {
					if (!cLux_GetGuiHandler().GetGameHudInputFocus())
						ftextAnimationSec = ftextAnimationSec + vToggledList[0].mfTextSpeed;
					fWait = 0.0f;
					fWaitSec = 0.0f;
				}

				bool IsNotSpace = true;
				int lCharCount = (ftextAnimationSec * 10);
				tString CurrentChar = "";

				for (int i=0; i<Laps; i++) {
					editMessage = cString_Sub(Message, 0, Char);
					if (i<(Laps-1)) {
						editMessage = editMessage + "-";
					}
					CalPos = OptionMenu_GetTopLeftOffset(cVector2f(30, 502 + (fAnimationCos*545) + (i*30)), -2.0f);
					//CalPos = cVector3f(-193, 535 + (fAnimationCos*545) + (i*30), 0);

					if ((i==0) || (lCharCount>=(i*Char))) {
						
						int CalCount = lCharCount - (i*Char);
						if (CalCount>0) {
							CurrentChar = cString_Sub(editMessage, CalCount-1, 1);
							if (CurrentChar==" ") {
								IsNotSpace = false;
							}
							tString LetbyLet = cString_Sub(editMessage, 0, CalCount);
							ImGui_DoLabelExt(LetbyLet, label, CalPos, CalSize);
							Message = cString_Sub(Message, Char);
						}
					}
				}
				
				//--Skip Arrow
				if ((lCharCount>=sOrgMessage.length())&&(fAnimationCos<1)&&!NextProgIsChoice) {
					if (!MainMenu_IsShowing()) fSkipAnimationSec = fSkipAnimationSec + 0.1f;
					float fSkipCos = cMath_Cos(fSkipAnimationSec);
					cImGuiGfx SkipArrow("graphics/imgui/default/imgui_arrow_right.tga", eImGuiGfx_Texture);
					SkipArrow.mColor = cColor(1.0f, 1.0f, 1.0f, fSkipCos + 0.2f);
					
					CalPos = OptionMenu_GetTopLeftOffset(cVector2f(960 + (3 * fSkipCos),635 + (fAnimationCos*545)), 3.0f);
					CalSize = OptionMenu_GetScaledSize(cVector2f(30, 30));
					ImGui_DoImage(SkipArrow, CalPos, CalSize);
				}

				if ((((lPreviousCharCount!=lCharCount)&&(lCharCount<=sOrgMessage.length()))||((lCharCount==1)&&(lPreviousCharCount==0)))&&(IsNotSpace)) {
					if (sSpeaking == "Innerself") {
						Sound_PlayGui("Entities_Station/object/server_dial/start", 0.5f);
					} else {
						Sound_PlayGui("MunshiSim/UI/"+sSpeaking+"_lettersound", 0.5f);
					}
                    
                    float fTextSpeedLerp = cMath_Lerp((vToggledList[0].mfTextSpeed/0.05f), 1.3f, 0.7f);
					if (CurrentChar==".") {
						fWait = 4.5f / fTextSpeedLerp;
					} else if (CurrentChar==",") {
						fWait = 2.5f / fTextSpeedLerp;
					} else if (CurrentChar=="!"||CurrentChar=="?"||CurrentChar=="-") {
						fWait = 1.5f / fTextSpeedLerp;
					}
				}
				lPreviousCharCount = lCharCount;
		}
        
    ////////////////////////////
    ///////CELLPHONE STUFF
    ////////////////////////////
	//-------------------------------------------------------
    
	void StopTelephoneRing() 
	{
		//////////////////////////////
		// Stop phone ringing
        bIsCalling = false;
        Sound_StopGui("Entities_Urban/tech/cellphone/vibrating_wood", 0.0f, false);
        Sound_StopGui("MunshiSim/Game/bubblegum_phone", 0.0f, false);
        
        StopTextFade(sPreviousPhoneText, 0.5f);
	}

    ////////////////////////////
    ///////Answer Cellphone
    ////////////////////////////
	void AnswerPhone() 
	{
        Player_ChangeStateToNormal();
    
        ////////////////////////////
        // Pickup the phone
        Hint_StopHint();
        StopTelephoneRing();
        
        Entity_SetActive("CellPhoneArm", true);
        Entity_CallEntityInteract("CellPhoneArm");
        Effect_Shake_EnableAll(true);
        
        //////////////////////////
        // Pickup sound
        Sound_CreateAtEntity("PhonePickup","00_05_apartment2/SFX/phone/pickup_counter","player",0,false);
	}
    
	void AnswerPhoneMessage()
	{
        cLux_AddDebugMessage("Answered WAU Call");
        bPickedUpFully = true;
        vSavedList[0].mlWauCalls = vSavedList[0].mlWauCalls + 1;
        cPlayMusic("music/AnimalCrossing/museum_fossil_exhibit.mp3", 1.0f, 2.0f, true);
        
        MakeMessage(sConvoNamePhone, 1, 1);
	}
    
    ////////////////////////////
    ///////Exit cellphone
    ////////////////////////////
	void _Global_OnExitCellPhone()
	{
		Sound_CreateAtEntity("PutawayPhone", "00_05_apartment2/SFX/phone/pickup_putaway", "Player");
		Entity_SetActive("CellPhoneArm",false);
        bIsInCall = false;
        bPickedUpFully = false;
        cStopMusic();
	}
        
    ////////////////////////////
    ///////GUI
    ////////////////////////////
	void _Global_OnGuiCellPhone()
	{
		tString asEntityName = cScript_GetGlobalArgString(0);
        
        if (ImGui_IsFirstRun()) {
            CellPhoneGui_SetClockString(cString_FullyTranslate(MapName, "Phone_Time"));
            CellPhoneGui_SetReceptionIcons("A");
        }
        
        if (asEntityName=="CellPhoneArm_open"&&!bIsInCall)
        {
            CellPhoneGui_PickUp("unknown");
            
            bIsInCall = true;
        }
		
		CellPhoneGui_Update();
		
		if (bCallDone&&asEntityName=="CellPhoneArm_open")
		{
			if (CellPhoneGui_GetState()!=eCellPhoneGuiState_Idle)
			{
				ImGui_Exit();

                CellPhoneGui_HangUp();
                
                bCallDone = false;
			}
		}
	}
	
    //////////////////////////////////////////////////////////////////////////////////////////
    // =============
    // VARIABLES
    // =============
    //{///////////////////////////////////////////////////////////////////////////////////////
	
		array<cToggeledList> vToggledList;
		array<cSavedList> vSavedList;
		
		//Storing Strings
		array<tString> vSimStore = {""};
		
		//Message Handling
		tString sLangEntryOut = "";
		int lCustomPathOut = 0;
		int lCustomProgOut = 1;
		
		//Beginning Text
        cVector3f NrmPos;
        tString msPlace = "";
        tString msTime = "";
        int mlBeginningID = -1;
        int mlBeginningTimeID = -1;
        float mfBegTextTime = 0;
        float mfMoveAmt = 0;
        bool mbSecondStage = false;
        bool mbThirdStage = false;
	
		//Reputation Arrow
		bool bRepArrowPlus = false;
        //Reputation Bar
        bool bTABPressed = false;
        bool bCanShowIndicator = true;
        float fFakeTABPressed = 0;
        float fTABPressAlpha = 0;
        float fTABDropCooldown = 0;
        
        //Objectives
        bool bObjectiveCelebrate = false;
        
        //Phone
        bool bPickedUpFully = false;
        bool bIsCalling = false;
        bool bIsInCall = false;
        bool bCallDone = false;
        float fAnswerPhoneTimer = 0.0f;
        tString sConvoNamePhone = "";
        tString sTextPickUp = "";
		
		//On Sim End
		bool bSimEnd = false;
		bool bStartedCameraAnim = false;
        bool bEndOnLastCameraAnim = false;
        
        //On Sim Update
        bool bSimUpdate = false;
        bool bAnimHasUpdated = false;
        
        //On Level End
        tString msChangeMapName = "";
        
        //Message speed
        bool bCanChangeMessageSpeed = true;
		
		//Main
		int bRenderedChoiceNot = -1;
        
		float fWait = 0.0f;
		float fWaitSec = 0.0f;
		float ftextAnimationSec = 0.0f;
		float fAnimationSec = 0.0f;
		float fAnimationCos = 0.0f;
		float fButtonAnimationSec = 0.0f;
		float fSkipAnimationSec = 0.0f;
		int lPreviousCharCount = 0;
			
		bool bLeftTriggered = false;
		bool bGamePaused = false;
		bool bFinalClick = false;
		bool mbUsedEmotion = false;
        bool mbEnableAutoSkip = false;
        bool mbFakeLeftClick = false;
		tString sSpeaking = "Innerself";
		tString sSpeakingFull = "Innerself";
		tString MapName = "";
        tString MunshiAnimLocated = "";
        tString MunshiObjects = "";
		
	//} END VARIABLES
}