
////////////////////////////
// Here are some custom functions for the mod so I don't have to copy paste
// a lot of function through maps

// Change animation for Munshi
//-------------------------------------------------------
array<tString> vCurrentAnim = {""};
void ChangeMunshiAnim(const tString &in asChangeToAnim, const tString &in Objects="")
{
	vCurrentAnim[0] = SimFetchString(0);
	
	if (Entity_Exists(asChangeToAnim)) {
		if (Entity_Exists(vCurrentAnim[0])) Entity_SetActive(vCurrentAnim[0], false);
		Entity_SetActive(asChangeToAnim, true);
		vCurrentAnim[0] = asChangeToAnim;
		
		for (int i=1; i<vCurrentAnim.size(); i++) {
			if (i%2!=1) {
				//If Number is Odd
				if (Entity_Exists(vCurrentAnim[i])) Entity_SetActive(vCurrentAnim[i], true);
			} else {
				//If Number is Even
				if (Entity_Exists(vCurrentAnim[i])) Entity_SetActive(vCurrentAnim[i], false);
			}
		}
			
		if (Objects!="") {
			array<tString> vEach2Objects = cString_Split(Objects, ",");
			
			for (int i=0; i<vEach2Objects.size(); i++) {
				array<tString> vEachObject = cString_Split(vEach2Objects[i], ">");
			
				for (int k=0; k<vEachObject.size(); k++) {
					bool IsEven = k!=0;
					
					if (Entity_Exists(vEachObject[k])) Entity_SetActive(vEachObject[k], IsEven);
					vCurrentAnim.insertLast(vEachObject[k]);
				}
			}
		}
		SimStoreString(0, vCurrentAnim[0]);
	}
}


//--------------------------------------------------------
/////////////////////// cString functions
//--------------------------------------------------------
	// Split string
	//-------------------------------------------------------

	array<tString> cString_Split(const tString &in asString, const tString &in asSeperator)
	{
		array<tString> vSeperated;
		
		tString new_asString = asString;
		while (cString_GetFirstStringPos(new_asString, asSeperator) != -1) {
			int lStartPos = cString_GetFirstStringPos(new_asString, asSeperator);
			vSeperated.insertLast(cString_Sub(new_asString, 0, lStartPos));
			new_asString = cString_Sub(new_asString, lStartPos + asSeperator.length());
			
			if (cString_GetFirstStringPos(new_asString, asSeperator) == -1 ) {
				vSeperated.insertLast(new_asString);
			}
		}
		
		return vSeperated;
	}


	// Seperate Path Name
	//-------------------------------------------------------
	array<tString> cString_Seperate_PathName(const tString &in asPathNameOrg)
	{
		array<int> vNumFound;
		tString sPathName = asPathNameOrg;
		tString sCustomPathName = "";
		
		int lCharPos = 4;
		for (int i=1; i<10; i++) {
			int lFirstChar = cString_GetFirstStringPos(sPathName, ""+i);
			if (lFirstChar!=-1) {
				vNumFound.insertLast(lFirstChar);
			}
		}
		
		array<tString> vFinalOutPut;
		if (vNumFound.size()>1)
		{
			vNumFound.sortAsc();
			lCharPos = vNumFound[0];
			
			sCustomPathName = cString_Sub(sPathName, 0, lCharPos);
			sPathName = cString_Sub(sPathName, lCharPos);
			array<tString> pathprogSeperation = cString_Split(sPathName, "_");
			
			if (pathprogSeperation.size()>1) {
				vFinalOutPut.insertLast(sCustomPathName);
				vFinalOutPut.insertLast(pathprogSeperation[0]);
				vFinalOutPut.insertLast(pathprogSeperation[1]);
			}
		}
		
		return vFinalOutPut;
	}
	
	
	// Fully translate a string in a lang file 
	//-------------------------------------------------------
	tString cString_FullyTranslate(const tString &in asName, const tString &in asEntry)
	{
		return cString_To8Char(cLux_Translate(asName, asEntry));
	}
	
	
	// Check if an entry is a choice
	//-------------------------------------------------------
	bool cString_IsChoice(const tString &in asEntry)
	{
		tString sString = cString_FullyTranslate(cLux_GetCurrentMap().GetName(), asEntry);
		return cString_Split(sString, "$Choice$").size()>1;
	}
	
//--------------------------------------------------------
/////////////////////// Reputation
//--------------------------------------------------------

	// Change reputation by adding/removing
	//-------------------------------------------------------
	void ChangeReputation(float fNumAdd)
	{
		cScript_SetGlobalArgFloat(0, fNumAdd);
		cScript_RunGlobalFunc("SimHandler", "", "_Global_ChangeReputation");
	}
	
	// Get reputation number
	//-------------------------------------------------------
	void GetReputation()
	{
		cScript_RunGlobalFunc("SimHandler", "", "_Global_GetReputation");
	}

//--------------------------------------------------------
/////////////////////// Music
//--------------------------------------------------------
	// Play music
	//-------------------------------------------------------
	tString CurrentTrack = "";
	void cPlayMusic(const tString &in RequestedTrack, float Volume=1.0f, float FadeTime=2.0f, bool ShouldLoop=false, eMusicPrio alPrio=eMusicPrio_SceneAmb, bool ShouldContinue=true)
	{
		cLux_AddDebugMessage("Attempting to play Music");
		if (CurrentTrack!=RequestedTrack) {
			cLux_AddDebugMessage("Playing - "+RequestedTrack);
			//Music_Play(RequestedTrack, 1.0f, true, eMusicPrio_SceneAmb);
			Music_PlayExt(RequestedTrack, ShouldLoop, Volume, 1.0f, FadeTime, 0.0f, alPrio, ShouldContinue);
			CurrentTrack = RequestedTrack;
		}
	}

	// Stop all music
	//-------------------------------------------------------
	void cStopMusic()
	{
		cLux_AddDebugMessage("Stopping All Music");
		Music_StopAll(6.0f);
		CurrentTrack = "";
	}
	
//--------------------------------------------------------
/////////////////////// UI helpers
//--------------------------------------------------------
	cVector3f OptionMenu_GetTopLeftOffset(cVector2f avPos, float aZ = 0.0)
	{
		cVector2f vRealPos = OptionMenu_GetOffsetPosHelper(avPos);

		return cVector3f(vRealPos.x, vRealPos.y, aZ+20.0);
	}

	cVector2f OptionMenu_GetOffsetPosHelper(const cVector2f &in avPos)
	{
		cVector3f vStartPos = cLux_GetHudVirtualCenterScreenStartPos();
		cVector2f vStartPos2D(vStartPos.x, vStartPos.y);
		
		return vStartPos2D + OptionMenu_GetScaledSize(avPos);
	}


	cVector2f OptionMenu_GetScaledSize(cVector2f avSize)
	{
		cVector2f vSize = cLux_GetHudVirtualCenterScreenSize();
		cVector2f vAspectRatio = cGraphics_GetLowLevel().GetScreenSizeFloat();
		vAspectRatio /= vAspectRatio.y;
		if(vAspectRatio.x >= 3.75f)
			vAspectRatio.x /= 3.0f;

		return avSize * vSize / (vAspectRatio * 720.0);
	}
	
	cVector3f OptionMenu_GetTopRightOffset(cVector2f avPos, float aZ = 0.0)
	{
		cVector2f vRealPos = OptionMenu_GetOffsetPosHelper(avPos);
		cVector2f vSize = cLux_GetHudVirtualCenterScreenSize();
		
		return cVector3f(vRealPos.x + vSize.x, vRealPos.y, aZ+20.0);
	}
	
	
	// Render Gifs
	//-------------------------------------------------------
	void RenderSequence(const tString &in asName, cVector3f aCalPos, cVector2f aCalSize, float afFadeIn=0, float afTime=1, float afFadeOut=0, float afMaxAlpha=1.0f, float afFps=0)
	{
		cScript_SetGlobalArgString(0, asName);
		cScript_SetGlobalArgVector3f(1, aCalPos);
		cScript_SetGlobalArgVector2f(2, aCalSize);
		cScript_SetGlobalArgFloat(3, afFadeIn);
		cScript_SetGlobalArgFloat(4, afTime);
		cScript_SetGlobalArgFloat(5, afFadeOut);
		cScript_SetGlobalArgFloat(6, afMaxAlpha);
		cScript_SetGlobalArgFloat(7, afFps);
		
		cScript_RunGlobalFunc("GIFHandler", "", "_Global_RenderSequence");
	}
	
	
	// Stop Gif
	//-------------------------------------------------------
	void StopSequence(const tString &in asName, float afFade)
	{
		cScript_SetGlobalArgString(0, asName);
		cScript_SetGlobalArgFloat(1, afFade);
		
		cScript_RunGlobalFunc("GIFHandler", "", "_Global_StopSequence");
	}
	
	
	// Beginning Text
	//-------------------------------------------------------
	void BeginningText(const tString &in asPlace, const tString &in asTime, float afSec)
	{
		cScript_SetGlobalArgString(0, asPlace);
		cScript_SetGlobalArgString(1, asTime);
		cScript_SetGlobalArgFloat(2, afSec);
		
		cScript_RunGlobalFunc("SimHandler", "", "_Global_BeginningText");
	}
	
	// UI Active
	//-------------------------------------------------------
	bool UIActive()
	{
		cScript_RunGlobalFunc("SimHandler", "", "_Global_UIActive");
		return cScript_GetGlobalReturnBool();
	}
	
	// Get Sim End
	//-------------------------------------------------------
	tString GetSimEnd()
	{
		cScript_RunGlobalFunc("SimHandler", "", "_Global_GetSimEnd");
		return cScript_GetGlobalReturnString();
	}
	
	// Render Text Fade
	//-------------------------------------------------------
	void CreateTextFade(const tString &in asText, cVector3f aCalPos, cVector2f aCalSize, float afSize=1.0f, float afFadeIn=0.0f, float afTime=1.0f, float afFadeOut=0.0f, float afMaxAlpha=1.0f)
	{
		
		cScript_SetGlobalArgString(0, asText);
		cScript_SetGlobalArgVector3f(1, aCalPos);
		cScript_SetGlobalArgVector2f(2, aCalSize);
		cScript_SetGlobalArgFloat(3, afSize);
		cScript_SetGlobalArgFloat(4, afFadeIn);
		cScript_SetGlobalArgFloat(5, afTime);
		cScript_SetGlobalArgFloat(6, afFadeOut);
		cScript_SetGlobalArgFloat(7, afMaxAlpha);

		cScript_RunGlobalFunc("TextHandler", "", "_Global_CreateTextFade");
	}
	
	
	// Stop Text Fade
	//-------------------------------------------------------
	void StopTextFade(const tString &in asText, float afFade)
	{
		cScript_SetGlobalArgString(0, asText);
		cScript_SetGlobalArgFloat(1, afFade);
		
		cScript_RunGlobalFunc("TextHandler", "", "_Global_StopTextFade");
	}
	
//--------------------------------------------------------
/////////////////////// Message Handling
//--------------------------------------------------------

	// Make a message
	//-------------------------------------------------------
	void MakeMessage(const tString &in asLangEntry, int alCustomPath=0, int alCustomProg=1)
	{
		cScript_SetGlobalArgString(0, asLangEntry);
		cScript_SetGlobalArgInt(1, alCustomPath);
		cScript_SetGlobalArgInt(2, alCustomProg);
		
		cScript_RunGlobalFunc("SimHandler", "", "_Global_MakeMessage");
	}
	
	// Stop message
	//-------------------------------------------------------
	void StopMessage()
	{
		cScript_RunGlobalFunc("SimHandler", "", "_Global_StopMessage");
	}
	
//--------------------------------------------------------
/////////////////////// String Storing
//--------------------------------------------------------
	
	void SimStoreString(int alID=0, const tString &in asString="")
	{
		cScript_SetGlobalArgInt(0, alID);
		cScript_SetGlobalArgString(1, asString);
		
		cScript_RunGlobalFunc("SimHandler", "", "_Global_SimStoreString");
	}
	
	tString SimFetchString(int alID=0)
	{
		cScript_SetGlobalArgInt(0, alID);

		cScript_RunGlobalFunc("SimHandler", "", "_Global_SimFetchString");
		
		return cScript_GetGlobalReturnString();
	}