
////////////////////////////
// Here are some custom functions for the mod so I don't have to copy paste
// a lot of function through maps

//--------------------------------------------------------
/////////////////////// Animations
//--------------------------------------------------------

	// Change animation for Munshi
	//-------------------------------------------------------
	array<tString> vCurrentAnim = {""};
	void ChangeMunshiAnim(const tString &in asChangeToAnim, const tString &in Objects="")
	{
		vCurrentAnim[0] = SimFetchString(0);
		
		if (Entity_Exists(asChangeToAnim)) {
			if (Entity_Exists(vCurrentAnim[0])) Entity_SetActive(vCurrentAnim[0], false);
			Entity_SetActive(asChangeToAnim, true);
			vCurrentAnim[0] = asChangeToAnim;
			
			for (int i=1; i<vCurrentAnim.size(); i++) {
				if (i%2!=1) {
					//If Number is Odd
					if (Entity_Exists(vCurrentAnim[i])) Entity_SetActive(vCurrentAnim[i], true);
				} else {
					//If Number is Even
					if (Entity_Exists(vCurrentAnim[i])) Entity_SetActive(vCurrentAnim[i], false);
				}
			}
				
			if (Objects!="") {
				array<tString> vEach2Objects = cString_Split(Objects, ",");
				
				for (int i=0; i<vEach2Objects.size(); i++) {
					array<tString> vEachObject = cString_Split(vEach2Objects[i], ">");
				
					for (int k=0; k<vEachObject.size(); k++) {
						bool IsEven = k!=0;
						
						if (Entity_Exists(vEachObject[k])) Entity_SetActive(vEachObject[k], IsEven);
						vCurrentAnim.insertLast(vEachObject[k]);
					}
				}
			}
			SimStoreString(0, vCurrentAnim[0]);
		}
	}
    
    
	// Make Munshi Walk
	//-------------------------------------------------------
    float lStartNum = 0;
    int lEndNum = 0;
    float fInterval = 0;
    void MunshiWalk(int alStartNum=1, int alEndNum=200, float afInterval = 2.0f)
    {
        lStartNum = alStartNum;
        lEndNum = alEndNum;
        fInterval = afInterval;
        bWalkLeft = true;
        lEndedWalkNum = 0;
        MunshiWalkTimer("MunshiWalkTimer");
        Map_AddTimer("MunshiWalkTimer", afInterval, "$MunshiWalkTimer");
    }
    
    bool bWalkLeft = true;
    int lEndedWalkNum = 0;
    void MunshiWalkTimer(const tString &in asTimer) {
        tString LeftRight = "Left";
        if (!bWalkLeft) LeftRight = "Right";
        tString EntName = "David_Walk"+LeftRight+"_"+int(cMath_Floor(lStartNum));
        
        if ((lStartNum<=lEndNum) && (Entity_Exists(EntName))) {
            ChangeMunshiAnim(EntName);
            bWalkLeft = !bWalkLeft;
            Sound_CreateAtEntity("FootStepForest", "Player/footsteps/sneaker/forest/default_soft", EntName);
            
            Map_RestartCurrentTimer();
        } else lEndedWalkNum = lEndNum;
        
        lStartNum = lStartNum + 0.5f;
    }
    
    int MunshiLastWalk() {
        return lEndedWalkNum;
    }
	
	// Camera Animation
	//-------------------------------------------------------
	void MakeCameraAnimation(const tString &in sAnimName, bool EndOnLast=true, bool AllowOverride=true)
	{
		cScript_SetGlobalArgString(0, sAnimName);
		cScript_SetGlobalArgBool(1, EndOnLast);
		cScript_SetGlobalArgBool(2, AllowOverride);

		cScript_RunGlobalFunc("SimHandler", "", "_Global_MakeCameraAnimation");
	}

//--------------------------------------------------------
/////////////////////// cString functions
//--------------------------------------------------------
	// Split string
	//-------------------------------------------------------
	array<tString> cString_Split(const tString &in asString, const tString &in asSeperator)
	{
		array<tString> vSeperated;
		
		tString new_asString = asString;
		while (cString_GetFirstStringPos(new_asString, asSeperator) != -1) {
			int lStartPos = cString_GetFirstStringPos(new_asString, asSeperator);
			vSeperated.insertLast(cString_Sub(new_asString, 0, lStartPos));
			new_asString = cString_Sub(new_asString, lStartPos + asSeperator.length());
			
			if (cString_GetFirstStringPos(new_asString, asSeperator) == -1 ) {
				vSeperated.insertLast(new_asString);
			}
		}
		
		return vSeperated;
	}


	// Seperate Path Name
	//-------------------------------------------------------
	array<tString> cString_Seperate_PathName(const tString &in asPathNameOrg)
	{
		array<int> vNumFound;
		tString sPathName = asPathNameOrg;
		tString sCustomPathName = "";
		
		int lCharPos = 4;
		for (int i=1; i<10; i++) {
			int lFirstChar = cString_GetFirstStringPos(sPathName, ""+i);
			if (lFirstChar!=-1) {
				vNumFound.insertLast(lFirstChar);
			}
		}
		
		array<tString> vFinalOutPut;
		if (vNumFound.size()>1)
		{
			vNumFound.sortAsc();
			lCharPos = vNumFound[0];
			
			sCustomPathName = cString_Sub(sPathName, 0, lCharPos);
			sPathName = cString_Sub(sPathName, lCharPos);
			array<tString> pathprogSeperation = cString_Split(sPathName, "_");
			
			if (pathprogSeperation.size()>1) {
				vFinalOutPut.insertLast(sCustomPathName);
				vFinalOutPut.insertLast(pathprogSeperation[0]);
				vFinalOutPut.insertLast(pathprogSeperation[1]);
			}
		}
		
		return vFinalOutPut;
	}
	
	
	// Fully translate a string in a lang file 
	//-------------------------------------------------------
	tString cString_FullyTranslate(const tString &in asCatgory, const tString &in asEntry)
	{
		return cString_To8Char(cLux_Translate(asCatgory, asEntry));
	}
	
	
	// Check if an entry is a choice
	//-------------------------------------------------------
	bool cString_IsChoice(const tString &in asEntry)
	{
		tString sString = cString_FullyTranslate(cLux_GetCurrentMap().GetName(), asEntry);
		return (cString_Split(sString, "$Choice$").size()>1 || cString_Split(sString, "$ChoiceWAU$").size()>1);
	}
    
    /*
	// String to array
	//-------------------------------------------------------
	array<tString> cString_ToArray(const tString &in asString)
	{
		array<tString> vArray;
        int lStringLength = asString.length();
        
		for (int i=0; i<lStringLength; i++) {
            vArray[i] = cString_Sub(asString, i, 1);
        }
        
		
		return vArray;
	}
     */
     
//--------------------------------------------------------
/////////////////////// Other functions
//--------------------------------------------------------

	// Convert int to bool
	//-------------------------------------------------------
	bool tobool(int num)
	{
        if (num > 0) {
            return true;
        } else return false;
	}
    
//--------------------------------------------------------
/////////////////////// Reputation
//--------------------------------------------------------

	// Change reputation by adding/removing
	//-------------------------------------------------------
	void ChangeReputation(float fNumAdd)
	{
		cScript_SetGlobalArgFloat(0, fNumAdd);
		cScript_RunGlobalFunc("SimHandler", "", "_Global_ChangeReputation");
	}
	
	// Get reputation number
	//-------------------------------------------------------
	float GetReputation()
	{
		cScript_RunGlobalFunc("SimHandler", "", "_Global_GetReputation");
        return cScript_GetGlobalReturnFloat();
	}

//--------------------------------------------------------
/////////////////////// Music
//--------------------------------------------------------
	// Play music
	//-------------------------------------------------------
	tString CurrentTrack = "";
	void cPlayMusic(const tString &in RequestedTrack, float Volume=1.0f, float FadeTime=2.0f, bool ShouldLoop=false, eMusicPrio alPrio=eMusicPrio_SceneAmb, bool ShouldContinue=true)
	{
		cLux_AddDebugMessage("Attempting to play Music");
		if (CurrentTrack!=RequestedTrack) {
			cLux_AddDebugMessage("Playing - "+RequestedTrack);
			//Music_Play(RequestedTrack, 1.0f, true, eMusicPrio_SceneAmb);
			Music_PlayExt(RequestedTrack, ShouldLoop, Volume, 1.0f, FadeTime, 0.0f, alPrio, ShouldContinue);
			CurrentTrack = RequestedTrack;
		}
	}

	// Stop all music
	//-------------------------------------------------------
	void cStopMusic()
	{
		cLux_AddDebugMessage("Stopping All Music");
		Music_StopAll(6.0f);
		CurrentTrack = "";
	}
    
//--------------------------------------------------------
/////////////////////// Math
//--------------------------------------------------------
    
    //Lerp function (X/Z, min, max)
	float cMath_Lerp(float aFraction, float aMin, float aMax)
	{
		return (aMax + (aMin - aMax) * aFraction);
	}
    
    float cMath_Floor(float afX) {
      return (afX - (afX % 1.0f));
    }
	
//--------------------------------------------------------
/////////////////////// UI helpers
//--------------------------------------------------------
	cVector3f OptionMenu_GetTopLeftOffset(cVector2f avPos, float aZ = 0.0)
	{
		cVector2f vRealPos = OptionMenu_GetOffsetPosHelper(avPos);

		return cVector3f(vRealPos.x, vRealPos.y, aZ+20.0);
	}

	cVector2f OptionMenu_GetOffsetPosHelper(const cVector2f &in avPos)
	{
		cVector3f vStartPos = cLux_GetHudVirtualCenterScreenStartPos();
		cVector2f vStartPos2D(vStartPos.x, vStartPos.y);
		
		return vStartPos2D + OptionMenu_GetScaledSize(avPos);
	}


	cVector2f OptionMenu_GetScaledSize(cVector2f avSize)
	{
		cVector2f vSize = cLux_GetHudVirtualCenterScreenSize();
		cVector2f vAspectRatio = cGraphics_GetLowLevel().GetScreenSizeFloat();
		vAspectRatio /= vAspectRatio.y;
		if(vAspectRatio.x >= 3.75f)
			vAspectRatio.x /= 3.0f;

		return avSize * vSize / (vAspectRatio * 720.0);
	}
	
	cVector3f OptionMenu_GetTopRightOffset(cVector2f avPos, float aZ = 0.0)
	{
		cVector2f vRealPos = OptionMenu_GetOffsetPosHelper(avPos);
		cVector2f vSize = cLux_GetHudVirtualCenterScreenSize();
		
		return cVector3f(vRealPos.x + vSize.x, vRealPos.y, aZ+20.0);
	}
	
	// Render Gifs
	//-------------------------------------------------------
	void RenderSequence(const tString &in asName, cVector3f aCalPos, cVector2f aCalSize, float afFadeIn=0, float afTime=1, float afFadeOut=0, float afMaxAlpha=1.0f, float afFps=0)
	{
		cScript_SetGlobalArgString(0, asName);
		cScript_SetGlobalArgVector3f(1, aCalPos);
		cScript_SetGlobalArgVector2f(2, aCalSize);
		cScript_SetGlobalArgFloat(3, afFadeIn);
		cScript_SetGlobalArgFloat(4, afTime);
		cScript_SetGlobalArgFloat(5, afFadeOut);
		cScript_SetGlobalArgFloat(6, afMaxAlpha);
		cScript_SetGlobalArgFloat(7, afFps);
		
		cScript_RunGlobalFunc("GIFHandler", "", "_Global_RenderSequence");
	}
	
	
	// Stop Gif
	//-------------------------------------------------------
	void StopSequence(const tString &in asName, float afFade)
	{
		cScript_SetGlobalArgString(0, asName);
		cScript_SetGlobalArgFloat(1, afFade);
		
		cScript_RunGlobalFunc("GIFHandler", "", "_Global_StopSequence");
	}
	
	
	// Beginning Text
	//-------------------------------------------------------
	void BeginningText(const tString &in asPlace, const tString &in asTime, float afSec)
	{
		cScript_SetGlobalArgString(0, asPlace);
		cScript_SetGlobalArgString(1, asTime);
		cScript_SetGlobalArgFloat(2, afSec);
		
		cScript_RunGlobalFunc("SimHandler", "", "_Global_BeginningText");
	}
    
	// Beginning Text
	//-------------------------------------------------------
	float GetBeginningTextProg()
	{
		cScript_RunGlobalFunc("SimHandler", "", "_Global_GetBeginningTextProg");
		return cScript_GetGlobalReturnFloat();
	}
    
	// End Level
	//-------------------------------------------------------
	void EndLevel(const tString &in NewMap="")
	{
        cScript_SetGlobalArgString(0, NewMap);
        cScript_RunGlobalFunc("SimHandler", "", "_Global_EndLevel");
	}
	
	// UI Active
	//-------------------------------------------------------
	bool UIActive()
	{
		cScript_RunGlobalFunc("SimHandler", "", "_Global_UIActive");
		return cScript_GetGlobalReturnBool();
	}
	
	// Get Sim End
	//-------------------------------------------------------
	tString GetSimEnd()
	{
		cScript_RunGlobalFunc("SimHandler", "", "_Global_GetSimEnd");
		return cScript_GetGlobalReturnString();
	}
    
	// Get Sim Update
	//-------------------------------------------------------
	tString GetSimUpdate()
	{
		cScript_RunGlobalFunc("SimHandler", "", "_Global_GetSimUpdate");
		return cScript_GetGlobalReturnString();
	}
    
	// Get Game Paused
	//-------------------------------------------------------
	bool GetSimGamePaused()
	{
        cScript_RunGlobalFunc("SimHandler", "", "_Global_GetSimGamePaused");
		return cScript_GetGlobalReturnBool();
	}
	
	// Render Text Fade
	//-------------------------------------------------------
	int CreateTextFade(const tString &in asText, cVector3f aCalPos, cVector2f aCalSize, float afSize=1.0f, float afFadeIn=0.0f, float afTime=1.0f,
        float afFadeOut=0.0f, float afMaxAlpha=1.0f, const tString &in asFont="sansation_large_additive.fnt")
	{
		
		cScript_SetGlobalArgString(0, asText);
		cScript_SetGlobalArgVector3f(1, aCalPos);
		cScript_SetGlobalArgVector2f(2, aCalSize);
		cScript_SetGlobalArgFloat(3, afSize);
		cScript_SetGlobalArgFloat(4, afFadeIn);
		cScript_SetGlobalArgFloat(5, afTime);
		cScript_SetGlobalArgFloat(6, afFadeOut);
		cScript_SetGlobalArgFloat(7, afMaxAlpha);
        cScript_SetGlobalArgString(8, asFont);

		cScript_RunGlobalFunc("TextHandler", "", "_Global_CreateTextFade");
        return cScript_GetGlobalReturnInt();
	}
    
	// Render Text Fade
	//-------------------------------------------------------
    float GetTextFadeAlpha(int alID)
    {
        cScript_SetGlobalArgInt(0, alID);
        cScript_RunGlobalFunc("TextHandler", "", "_Global_GetTextFadeAlpha");
       
        return cScript_GetGlobalReturnFloat();
    }
	
	
	// Stop Text Fade
	//-------------------------------------------------------
	void StopTextFade(const tString &in asText, float afFade)
	{
		cScript_SetGlobalArgString(0, asText);
		cScript_SetGlobalArgFloat(1, afFade);
		
		cScript_RunGlobalFunc("TextHandler", "", "_Global_StopTextFade");
	}


	// Set Current Objective
	//-------------------------------------------------------
	void SetObjective(const tString &in asObjectiveText, bool abCelebrate=false)
	{
		cScript_SetGlobalArgString(0, asObjectiveText);
        cScript_SetGlobalArgBool(1, abCelebrate);
		
		cScript_RunGlobalFunc("SimHandler", "", "_Global_SetObjective");
	}
    
	// Get Current Objective
	//-------------------------------------------------------
	tString GetObjective()
	{
		cScript_RunGlobalFunc("SimHandler", "", "_Global_GetObjective");
        return cScript_GetGlobalReturnString();
	}
    
	// Can Show Indicator true/false
	//-------------------------------------------------------
	void CanShowIndicator(bool CanShow)
	{
        cScript_SetGlobalArgBool(0, CanShow);
		cScript_RunGlobalFunc("SimHandler", "", "_Global_CanShowIndicator");
	}
    
	// Show Indicator true/false
	//-------------------------------------------------------
	void ShowIndicator(bool ShouldShow)
	{
        cScript_SetGlobalArgBool(0, ShouldShow);
		cScript_RunGlobalFunc("SimHandler", "", "_Global_ShowIndicator");
	}
	
//--------------------------------------------------------
/////////////////////// Message Handling
//--------------------------------------------------------

	// Make a message
	//-------------------------------------------------------
	bool MakeMessage(const tString &in asLangEntry, int alCustomPath=0, int alCustomProg=1)
	{
		cScript_SetGlobalArgString(0, asLangEntry);
		cScript_SetGlobalArgInt(1, alCustomPath);
		cScript_SetGlobalArgInt(2, alCustomProg);
		
		cScript_RunGlobalFunc("SimHandler", "", "_Global_MakeMessage");
        
        return cScript_GetGlobalReturnBool();
	}
	
	// Stop message
	//-------------------------------------------------------
	void StopMessage()
	{
		cScript_RunGlobalFunc("SimHandler", "", "_Global_StopMessage");
	}
	
//--------------------------------------------------------
/////////////////////// String Storing
//--------------------------------------------------------
	
	void SimStoreString(int alID=0, const tString &in asString="")
	{
		cScript_SetGlobalArgInt(0, alID);
		cScript_SetGlobalArgString(1, asString);
		
		cScript_RunGlobalFunc("SimHandler", "", "_Global_SimStoreString");
	}
	
	tString SimFetchString(int alID=0)
	{
		cScript_SetGlobalArgInt(0, alID);

		cScript_RunGlobalFunc("SimHandler", "", "_Global_SimFetchString");
		
		return cScript_GetGlobalReturnString();
	}
    
//--------------------------------------------------------
/////////////////////// Special
//--------------------------------------------------------

	void WauCalls(const tString &in asConvoName="")
	{
        if (asConvoName == "") return;
		cScript_SetGlobalArgString(0, asConvoName);
		cScript_RunGlobalFunc("SimHandler", "", "_Global_WauCalls");
	}
    
	int GetWauCalls()
	{
		cScript_RunGlobalFunc("SimHandler", "", "_Global_GetWauCalls");
		
		return cScript_GetGlobalReturnInt();
	}
    
    
    void OnGuiCellPhone(const tString&in asEntityName, float afTimeStep)
    {
		cScript_SetGlobalArgString(0, asEntityName);
        cScript_SetGlobalArgFloat(1, afTimeStep);
		cScript_RunGlobalFunc("SimHandler", "", "_Global_OnGuiCellPhone");
    }
    
    void OnExitCellPhone(const tString&in asEntityName)
    {
		cScript_SetGlobalArgString(0, asEntityName);
		cScript_RunGlobalFunc("SimHandler", "", "_Global_OnExitCellPhone");
    }