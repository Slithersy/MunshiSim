#include "custom_depth/helper_custom_depth_imgui.hps"
#include "helper_custom_depth_audio.hps"
#include "helper_font.hps"
#include "base/HeroStatsHandler_Types.hps"
//FG plz fix, I had to add this line...
#include "helpers/helper_game.hps"

//----------------- Primary -------------------------
/// used for stationary things like frames, or inactive elements like buttons.
cColor gUrbanGuiColor_Normal = cColor(0.227f, 0.51f, 0.557f); // #3a828e

/// for mouseover/hover effects or whenever green is needed.
cColor gUrbanGuiColor_Highlight = cColor(0.576f, 0.612f, 0.184f); // #939c2f

/// for warning or error screens, active buttons and elements.
cColor gUrbanGuiColor_Warning = cColor(0.706f, 0.208f, 0.082f); // #b43515

/// For focused AND selected
cColor gUrbanGuiColor_FocusedAndSelected = cColor(0.9, 0.6, 0.1);

//----------------- Tertiary -------------------------
/// for inactive/disabled stuff.
cColor gUrbanGuiColor_Disabled = cColor(0.192f, 0.192f, 0.192f); // #313131

void UrbanGui_Unbranded_DrawBackdrop(float afZ=0.0f, const tString &in asImage="urban/computerscreens/urbanUI_wallpaper_simon")
{
	cImGuiGfx gfx(asImage);		
	ImGui_DrawGfx(gfx, ImGui_NrmPos(cVector3f(0.0, 0.0f, afZ)), ImGui_NrmSize(cVector2f(1.0f, 1.0f)));
}

//-------------------------------------------------------

////////////////////////////
// Two Part Background
void UrbanGui_PACE_DrawBackdrop(float afZ=0.0f, const tString &in asLeftPart="urban/computerscreens/urbanUI_wallpaper_paceLeft", const tString &in asRightPart="urban/computerscreens/urbanUI_wallpaper_paceRight")
{
	/* Worth noting that this GUI backdrop was constructed out of two parts to get a decent look on in game monitors that have a widescreen aspect ratio */
	cImGuiGfx gfx_L(asLeftPart);
	cImGuiGfx gfx_R(asRightPart);
		
	ImGui_DrawGfx(gfx_L, ImGui_NrmPos(cVector3f(0.0, 0.0f, afZ)), ImGui_NrmSize(cVector2f(0.5f, 1.0f)));
	ImGui_DrawGfx(gfx_R, ImGui_NrmPos(cVector3f(0.5, 0.0f, afZ)), ImGui_NrmSize(cVector2f(0.5f, 1.0f)));
}

//-------------------------------------------------------

void UrbanGui_PACE_DrawDesktopIcons(float afZ=0.0f)
{
	////////////////////////////////
	// Taskbar and Icons
	cImGuiGfx gfx_TaskBar("urban/computerscreens/urbanUI_taskbar");
	cImGuiGfx gfx_IconSmallMain("urban/computerscreens/urbanUI_iconSmall_Main");
	cImGuiGfx gfx_IconSmallSystem("urban/computerscreens/urbanUI_iconSmall_System");
	cImGuiGfx gfx_IconSmallMail("urban/computerscreens/urbanUI_iconSmall_mailservice");
	cImGuiGfx gfx_IconSmallTrash("urban/computerscreens/urbanUI_iconSmall_dustbin");
			
	ImGui_DrawGfx(gfx_TaskBar, ImGui_NrmPos(cVector3f(0.0, 0.88f, afZ)), ImGui_NrmSize(cVector2f(1.0f, 0.12f)));
	ImGui_DrawGfx(gfx_IconSmallMain, ImGui_NrmPos(cVector3f(0.0, 0.91f, afZ+0.1f)), ImGui_NrmSize(cVector2f(0.06f, 0.1f)));
	ImGui_DrawGfx(gfx_IconSmallSystem, ImGui_NrmPos(cVector3f(0.05, 0.91f, afZ+0.1f)), ImGui_NrmSize(cVector2f(0.06f, 0.1f)));
	ImGui_DrawGfx(gfx_IconSmallMail, ImGui_NrmPos(cVector3f(0.1, 0.91f, afZ+0.1f)), ImGui_NrmSize(cVector2f(0.06f, 0.1f)));
	ImGui_DrawGfx(gfx_IconSmallTrash, ImGui_NrmPos(cVector3f(0.15, 0.91f, afZ+0.1f)), ImGui_NrmSize(cVector2f(0.06f, 0.1f)));
	
	////////////////////////////////
	// Desktop Icons
	cImGuiGfx gfx_IconSystem("urban/computerscreens/urbanUI_iconRegular_System");
	cImGuiGfx gfx_IconMail("urban/computerscreens/urbanUI_iconRegular_mailservice");
	cImGuiGfx gfx_IconTrash("urban/computerscreens/urbanUI_iconRegular_dustbin");
	
	ImGui_DrawGfx(gfx_IconSystem, ImGui_NrmPos(cVector3f(0.01, 0.05f, afZ+0.1f)), ImGui_NrmSize(cVector2f(0.06f, 0.1f)));
	ImGui_DrawGfx(gfx_IconMail, ImGui_NrmPos(cVector3f(0.01, 0.2f, afZ+0.1f)), ImGui_NrmSize(cVector2f(0.06f, 0.1f)));
	ImGui_DrawGfx(gfx_IconTrash, ImGui_NrmPos(cVector3f(0.01, 0.35f, afZ+0.1f)), ImGui_NrmSize(cVector2f(0.06f, 0.1f)));
	
	///////////////////////////////
	// Date
	cImGuiLabelData labelData;
	labelData.mColorBase = gUrbanGuiColor_Normal;
	labelData.mFont.mColor = cColor_White*5;
	labelData.mFont.SetFile(Helper_Font_GetFontName(eLuxFontType_Sansation_Large_Additive));
	labelData.mFont.mvSize = ImGui_NrmSizeKeepRatio(0.035);
	//labelData.mFont.mMaterial = eGuiMaterial_Additive;
	labelData.mFontAlign = eFontAlign_Right;
	labelData.mbUseBackgroundGfx = false;
	
	ImGui_SetAlignment(eImGuiAlign_TopRight);

	ImGui_SetTransCategory("UrbanGUI");
	ImGui_DoLabelExt("DesktopDate", labelData, ImGui_NrmPos(cVector3f(0.99f,0.94f,afZ+0.1f)), -1);
	
	ImGui_ResetModifiers();
	ImGui_SetAlignment(eImGuiAlign_TopLeft);
}

//-------------------------------------------------------

cImGuiWindowData UrbanGui_PACE_CreateDefaultWindowData()
{
	cImGuiWindowData window;
	
	window.mColorBase = cColor(0.07f, 0.41f, 0.72f, 1);
	
	window.mGfxWindowData.mGfxBackground.mColor = cColor(0,0.75);
	
	window.mGfxWindowData.mGfxCornerTopRight.SetFile("urban/computerscreens/urbanUI_frames_windows_cornerUR");
	window.mGfxWindowData.mGfxCornerTopLeft.SetFile("urban/computerscreens/urbanUI_frames_windows_cornerUL");
	window.mGfxWindowData.mGfxCornerBottomRight.SetFile("urban/computerscreens/urbanUI_frames_windows_cornerBR");
	window.mGfxWindowData.mGfxCornerBottomLeft.SetFile("urban/computerscreens/urbanUI_frames_windows_cornerBL");
	
	window.mGfxWindowData.mGfxBorderTop.SetFile("urban/computerscreens/urbanUI_frames_windows_borderUp");
	window.mGfxWindowData.mGfxBorderLeft.SetFile("urban/computerscreens/urbanUI_frames_windows_borderLeft");
	window.mGfxWindowData.mGfxBorderRight.SetFile("urban/computerscreens/urbanUI_frames_windows_borderRight");
	window.mGfxWindowData.mGfxBorderBottom.SetFile("urban/computerscreens/urbanUI_frames_windows_borderBottom");
	
	window.mGfxLabelData.mGfxBackground.mColor = cColor(0,0,0,0);
	window.mGfxLabelData.mGfxBorderBottom.mColor = cColor(0,0,0,0);
	window.mGfxLabelData.mGfxBorderRight.mColor = cColor(0,0,0,0);
	window.mGfxLabelData.mGfxBorderTop.mColor = cColor(0,0,0,0);
	window.mGfxLabelData.mGfxBorderLeft.mColor = cColor(0,0,0,0);
	window.mGfxLabelData.mGfxCornerBottomLeft.mColor = cColor(0,0,0,0);
	window.mGfxLabelData.mGfxCornerBottomRight.mColor = cColor(0,0,0,0);
	window.mGfxLabelData.mGfxCornerTopLeft.mColor = cColor(0,0,0,0);
	window.mGfxLabelData.mGfxCornerTopRight.mColor = cColor(0,0,0,0);
	
	
	
	window.mfLabelPaddingTop = 10.0f;
	window.mfLabelPaddingLeft = 10.0f;
	
	
	window.mFont.SetFile(Helper_Font_GetFontName(eLuxFontType_Sansation_Medium));
	window.mFont.mvSize = cVector2f(18, 18);
	window.mHeaderType = eImGuiWindowHeader_FitCaption;
	window.mFontAlign = eFontAlign_Center;
	window.mColorText = cColor(0.8,1);

	return window;
}

//-------------------------------------------------------

cImGuiButtonData UrbanGui_CreateDefaultButtonData()
{
	cImGuiButtonData button;
	
	button.mColorBase = gUrbanGuiColor_Normal*cColor(0.8, 1);
	button.mbUseInFocusColor = true;
	button.mColorInFocus = gUrbanGuiColor_Highlight*cColor(0.7, 1);
	button.mbUseBackgroundGfx = true;
	button.mbUseInFocusGfx = true;
	button.mbUseTriggeredGfx = false;
	button.mFontAlign = eFontAlign_Center;
	button.mFont.SetFile(Helper_Font_GetFontName(eLuxFontType_Sansation_Medium));
	button.mFont.mvSize = cVector2f(18, 18);
	button.mFont.mColor = cColor(0.8, 1);
	button.mvDefaultSize = cVector2f(10,10);
	button.mfScrollResetDelay = 1.0f;
	button.mfScrollSpeed = 32;
	button.mfClipAreaPaddingLeft = 4;
	button.mfClipAreaPaddingRight = 4;
	
	button.mGfxBackground.SetFile("urban/computerscreens/urbanUI_button_default_off");
	button.mGfxInFocus.SetFile("urban/computerscreens/urbanUI_button_default_off");
	
	return button;
}

//-------------------------------------------------------

cImGuiButtonData UrbanGui_CreateToggleButtonData()
{
	cImGuiButtonData button = UrbanGui_CreateDefaultButtonData();

	button.mbUseInFocusGfx = false;
	button.mbUseTriggeredGfx = true;
	button.mbUseTriggeredColor = true;
	button.mColorTriggered = gUrbanGuiColor_Warning*cColor(0.8, 1);
	button.mGfxTriggered.SetFile("urban/computerscreens/urbanUI_button_default_on");
	button.mbUseDisabledColor = true;
	button.mColorDisabled = gUrbanGuiColor_Disabled;
	button.mbUseTriggeredAndInFocusColor = true;
	button.mColorTriggeredAndInFocus = gUrbanGuiColor_FocusedAndSelected*cColor(0.8, 0.6, 0.6, 1);
	
	return button;
}

//-------------------------------------------------------

cImGuiSliderData UrbanGui_CreateDefaultSliderData()
{
	cImGuiSliderData sliderData;
	
	sliderData.mGfxBackground.SetFile("urban/scrollbar/urban_scrollbar_bar_vert");
	sliderData.mGfxBaseInFocus.SetFile("urban/scrollbar/urban_scrollbar_bar_infocus");
	sliderData.mGfxButton.SetFile("urban/scrollbar/urban_scrollbar_button");
	sliderData.mGfxButtonInFocus.SetFile("urban/scrollbar/urban_scrollbar_button_infocus");
	sliderData.mColorBase = cColor(0.07f, 0.41f, 0.72f, 1);
	sliderData.mGfxBaseInFocus.mColor = sliderData.mColorBase;
	sliderData.mGfxBackground.mvUVMax.y = ImGui_NrmSizeKeepRatio(0.00001).y;
	sliderData.mGfxBaseInFocus.mvUVMax.y = ImGui_NrmSizeKeepRatio(0.00001).y;
	sliderData.mvButtonSize.y = ImGui_NrmSizeKeepRatio(0.05).y;
	
	return sliderData;
}


//-------------------------------------------------------

//////////////////////////////////////////////////////
// URBAN DIALOG BOX
//////////////////////////////////////////////////////

//-------------------------------------------------------

/**
 * Default station dialog box. Good for error messages and the like.
 * 
 * @param asCaption, caption for the window.
 * @param asText, Text to display in box.
 * @param avNrmSize, normalized size of the dialog. Defaults to 0.6, 0.2. Dialog will be drawn at the center of the screen regardless of size.
 * @param afZ, at what depth the dialog should be drawn.
 * 
 **/
void UrbanGui_DialogBox_Start(const tString&in asCaption, const tString&in asText, const cVector2f &in avNrmSize = cVector2f(0.6, 0.2), float afZ=1.5f)
{
	//////////////////////////////////
	// Setup widget data
	cImGuiWindowData window = UrbanGui_PACE_CreateDefaultWindowData();

	///////////////////////////////////////
	// Show message 
	ImGui_DoWindowStart(asCaption, window, ImGui_NrmPosGroup(cVector3f((1.f-avNrmSize.x)*0.5, (1.f-avNrmSize.y)*0.5, afZ)), ImGui_NrmSizeGroup(avNrmSize));
		
		if (asText == "") return;
		UrbanGui_DialogBox_Text(asText);
}

//-------------------------------------------------------

/**
 * Draws text in a previously defined dialog box. Useful when the text has to be modified separate to the box.
 * 
 * @param asText, Text to display.
 * 
 **/
void UrbanGui_DialogBox_Text(const tString&in asText)
{
	cImGuiTextFrameData textData;
	textData.mbUseBackgroundGfx = false;
	textData.mFont.mvSize = cVector2f(24, 24);
	textData.mFontAlign = eFontAlign_Center;
	textData.mColorText = cColor(0.8, 1);
	ImGui_DoTextFrameExt(asText, ImGui_NrmSizeGroup(cVector2f(0.05, 0)), 0, 0, textData, 
					  ImGui_NrmPosGroup(cVector3f(0.0, 0.1, 1)), ImGui_NrmSizeGroup(cVector2f(1, 1)));
}

//-------------------------------------------------------

void UrbanGui_DialogBox_End()
{
	ImGui_DoWindowEnd();
}	

//-------------------------------------------------------

//////////////////////////////////////////////////////
// URBAN MAIL APP
//////////////////////////////////////////////////////

//-------------------------------------------------------

/***
 * @param asSendMailCallback - called when the send button is pressed. Return true to send the mail. Format: bool Func(const tString& in asTitle)
 * @param asChangeSelectionCallback - called when the mail selection changes. Format: void Func(int alType, int alMessage)
*/
void UrbanGui_MailApp(const tString &in asUser, const tString &in asSendMailCallback = "", const tString& in asChangeSelectionCallback = "")
{
	tString sCurrentTransCat = ImGui_GetTransCategory();
	
	int lSelectedMailType = ImGui_GetStateInt("SelectedMailType", -1);
	int lSelectedMail = ImGui_GetStateInt("SelectedMailIndex", -1);
		
	///////////////////////
	// Data
	cImGuiWindowData window = UrbanGui_PACE_CreateDefaultWindowData();
		
	ImGui_SetTransCategory("UrbanGUI");
	ImGui_DoWindowStart("MailApp_Header", window, ImGui_NrmPosGroup(cVector3f(0.05, 0.05, 3.0)), ImGui_NrmSizeGroup(cVector2f(0.9, 0.85)));
	
		ImGui_SetTransCategory(sCurrentTransCat);
	
		//////////////////
		// Mail List
		ImGui_DoWindowStart(asUser, window, ImGui_NrmPosGroup(cVector3f(0.01, 0.02, 1.0)), ImGui_NrmSizeGroup(cVector2f(0.29, 0.94)));
		ImGui_GroupBegin(ImGui_NrmPosGroup(0.06, 0.03, 1), ImGui_NrmSizeGroup(0.88, 0.94));
		
			float fLineY = 0;
			const float fListSpacing = 0.075f;
			
			ImGui_SetModUseInput(ImGui_GetStateInt("MailSending",-1)==-1);
			
			UrbanGui_MailList("MailApp_Inbox", eMailAppEntryType_Inbox, fLineY, fLineY);
			fLineY += fListSpacing;
			
			UrbanGui_MailList("MailApp_Draft", eMailAppEntryType_Draft, fLineY, fLineY);
			fLineY += fListSpacing;
			
			UrbanGui_MailList("MailApp_Sent", eMailAppEntryType_Sent, fLineY, fLineY);
			fLineY += fListSpacing;
			
			ImGui_SetModUseInput(true);
			
		
		ImGui_GroupEnd();
		ImGui_DoWindowEnd();
		
		//////////////////
		// Mail Body
		ImGui_DoWindowStart("", window, ImGui_NrmPosGroup(cVector3f(0.31, 0.02, 1.0)), ImGui_NrmSizeGroup(cVector2f(0.67, 0.94)));
		ImGui_GroupBegin(ImGui_NrmPosGroup(0.12, 0.06, 1), ImGui_NrmSizeGroup(0.76, 0.88));
		
			UrbanGui_MailBody(asSendMailCallback);
		
		ImGui_GroupEnd();
		ImGui_DoWindowEnd();
		
		Depth_ImGui_ClearMails();
		
	ImGui_DoWindowEnd();
	
	if (asChangeSelectionCallback!="")
	{
		int lNewSelectedMailType = ImGui_GetStateInt("SelectedMailType", -1);
		int lNewSelectedMail = ImGui_GetStateInt("SelectedMailIndex", -1);
		if ((lNewSelectedMail!=lSelectedMail)||(lNewSelectedMailType!=lSelectedMailType))
		{
			if (cLux_GetCurrentMap().ScriptPrepare("void " + asChangeSelectionCallback + "(int alType, int alMessage)") )
			{
				cLux_GetCurrentMap().SetArgInt(0, lNewSelectedMailType);
				cLux_GetCurrentMap().SetArgInt(1, lNewSelectedMail);
				cLux_GetCurrentMap().ScriptExecute();
			}
		}
	}
}

//-------------------------------------------------------

void UrbanGui_MailList(const tString &in asHeader, eMailAppEntryType aType, float afLineY, float &out afLineYOut)
{
	array<cGuiMailAppEntry>@ mailList = Depth_ImGui_GetMailList(aType);
	for (uint i = 0; i < mailList.length(); i++)
	{		
		ImGui_AddItemString(mailList[i].msTitle);
	}
			
	tString sCurrentTransCat = ImGui_GetTransCategory();
	
	cImGuiLabelData label_right = ImGui_GetDefaultLabel();
	label_right.mFontAlign = eFontAlign_Right;
	
	cImGuiButtonData button = UrbanGui_CreateToggleButtonData();
	button.mbClipText = true;
	
	ImGui_SetTransCategory("UrbanGUI");
	ImGui_DoLabel(asHeader, ImGui_NrmPosGroup(cVector3f(0, 0.0+afLineY,1)), ImGui_NrmSizeGroup(cVector2f(1, -1)));
	ImGui_SetTransCategory("");
	ImGui_DoLabelExt("("+mailList.length()+")", label_right, ImGui_NrmPosGroup(cVector3f(0, 0.0+afLineY,1)), ImGui_NrmSizeGroup(cVector2f(1, -1)));
	ImGui_SetTransCategory(sCurrentTransCat);
	afLineY += 0.05f;
	
	if (mailList.length() > 0)
	{
		int lSelectedMailType = ImGui_GetStateInt("SelectedMailType", -1);
		int lSelectedMail = ImGui_GetStateInt("SelectedMailIndex", -1);
		
		float fListHeight = 0.075*(mailList.length()-1)+0.07;
		bool bDrawSelection = lSelectedMailType == aType && ImGui_GetStateInt("MailSending",-1)==-1;
		lSelectedMail = ImGui_DoMultiToggleExt(asHeader+"MailToggle", bDrawSelection ? lSelectedMail : -1, 1, ImGui_NrmSizeGroup(0, 0.005f), button, ImGui_NrmPosGroup(0, afLineY, 1), ImGui_NrmSizeGroup(1, fListHeight));
		afLineY += fListHeight;
		
		if (lSelectedMail != -1)
		{
			ImGui_SetStateInt("SelectedMailType", aType);
			ImGui_SetStateInt("SelectedMailIndex", lSelectedMail);
			
			int lPlayerState = cLux_GetPlayer().GetCurrentStateId();	
			if (lPlayerState== ePlayerState_Terminal)
			{				
				tString strAlreadyReadVarName = "ReadMail"+mailList[lSelectedMail].msTitle;
				bool bAlreadyRead = cScript_GetGlobalVarBool(strAlreadyReadVarName);
				if ( !bAlreadyRead )
				{
					cScript_SetGlobalVarBool(strAlreadyReadVarName, true);
					HeroStat_IncreaseAmount(eHeroStats_ReadDocuments,1);
				}
			}
		}
		
		if (ImGui_PrevUpdated())
		{
			Depth_ImGui_SetScrollValue("MailBody", 0);
			Sound_PlayGui("Entities_Urban/tech/laptop/onscreen_interact",1.0);
		}
	}
	
	afLineYOut = afLineY;
}

//-------------------------------------------------------

void UrbanGui_MailBody(const tString &in asSendMailCallback = "")
{	
	tString sCurrentTransCat = ImGui_GetTransCategory();
	
	int lSelectedMailType = ImGui_GetStateInt("SelectedMailType", -1);
	int lSelectedMail = ImGui_GetStateInt("SelectedMailIndex", -1);
	
	if (lSelectedMail == -1 || lSelectedMailType == -1) return;
	
	array<cGuiMailAppEntry>@ pMailArray = Depth_ImGui_GetMailList(eMailAppEntryType(lSelectedMailType));
	if (lSelectedMail >= int(pMailArray.length()))
		return;
		
	float fLineY = 0;
	
	cGuiMailAppEntry mail = pMailArray[lSelectedMail];

	///////////////////////////////
	// Info
	cImGuiLabelData infoLabel = ImGui_GetDefaultLabel();
	infoLabel.mFont.SetFile(Helper_Font_GetFontName(eLuxFontType_Sansation_Large));
	infoLabel.mFont.mvSize = cVector2f(18, 18);
	
	// Widen if needed for translations
	tString sFromToLabel = lSelectedMailType == eMailAppEntryType_Inbox ? "MailApp_FromLabel" : "MailApp_ToLabel";
	float fExtraWidth = 0;
	fExtraWidth = _UrbanGui_MailInfoExtraWidth(sFromToLabel, fExtraWidth, infoLabel);
	fExtraWidth = _UrbanGui_MailInfoExtraWidth("MailApp_SubjectLabel", fExtraWidth, infoLabel);
	fExtraWidth = _UrbanGui_MailInfoExtraWidth("MailApp_TimestampLabel", fExtraWidth, infoLabel);
	
	_UrbanGui_MailInfo(sFromToLabel, mail.msSender, fLineY, fExtraWidth, infoLabel);
	fLineY += 0.06;
	_UrbanGui_MailInfo("MailApp_SubjectLabel", mail.msTitle, fLineY, fExtraWidth, infoLabel);
	fLineY += 0.06;
	_UrbanGui_MailInfo("MailApp_TimestampLabel", mail.msTimestamp, fLineY, fExtraWidth, infoLabel);
	fLineY += 0.12;
	
	///////////////////////////////
	// Body
	cImGuiTextFrameData textFrame = ImGui_GetDefaultTextFrame();
	textFrame.mFont.SetFile(Helper_Font_GetFontName(eLuxFontType_Sansation_Large));
	textFrame.mFont.mvSize = cVector2f(18, 18);
	textFrame.mbUseBackgroundGfx = false;
	
	
	float fOverlap = 0;
	float fOffs = Depth_ImGui_GetScrollValue("MailBody");
	fOverlap = ImGui_DoTextFrameExt(mail.msBody, 0, 0, fOffs, textFrame,ImGui_NrmPosGroup(cVector3f(0, 0.0+fLineY,1)), ImGui_NrmSizeGroup(cVector2f(1, 0.8)));	

	if (fOverlap>0.0f)
	{
		cImGuiSliderData sliderData = UrbanGui_CreateDefaultSliderData();
		ImGui_SetModUseUIPos(false);
		fOffs = fOverlap-ImGui_DoSliderVerticalExt("TextSlider", fOverlap-fOffs, 0, fOverlap, 0.01f, sliderData, 
												   ImGui_NrmPosGroup(cVector3f(1.05, 0.2, 1.1)),  ImGui_NrmSizeGroup(cVector2f(0.05, 0.8)));
		ImGui_SetModUseUIPos(true);
		Depth_ImGui_InputScroll("MailBody", fOffs, fOverlap);
	}	
	
	///////////////////////////////
	// SEND BUTTON
	if (lSelectedMailType != eMailAppEntryType_Draft)
		return;
		
	ImGui_SetTransCategory("UrbanGUI");
	
	cImGuiButtonData buttonSend = UrbanGui_CreateDefaultButtonData();
	buttonSend.mbClipText = true;
	bool bSent = false;
	bool bDialogDone = false;
	
	if (ImGui_GetStateInt("MailSending",-1)==lSelectedMail)
	{
		UrbanGui_DialogBox_Start("", "", cVector2f(0.6, 0.4));	
		UrbanGui_DialogBox_Text("MailApp_ConfirmSend");	
		
		if (ImGui_DoButtonExt("YesButton", "MailApp_Yes", buttonSend, ImGui_NrmPosGroup(cVector3f(0.15, 0.6, 1)), ImGui_NrmSizeGroup(cVector2f(0.3, 0.25))))
		{
			bDialogDone = true;
			Depth_Audio_Terminal_Confirm(ImGui_GetName());
		}
		else if (ImGui_DoButtonExt("NoButton", "MailApp_No", buttonSend, ImGui_NrmPosGroup(cVector3f(0.55, 0.6, 1)), ImGui_NrmSizeGroup(cVector2f(0.3, 0.25))))
		{
			Depth_Audio_Terminal_Negative(ImGui_GetName());
			ImGui_SetStateInt("MailSending",-1);
		}
		
		if (ImGui_GetStateBool("InitMailSend",false))
		{
			ImGui_SetStateBool("InitMailSend",false);
			ImGui_SetFocus("YesButton");
		}


		UrbanGui_DialogBox_End();
	}
	else
	{
		ImGui_SetModUISizeVertExpansion(0, 10);
		if (ImGui_DoButtonExt("buttonsend","MailApp_Send",buttonSend,ImGui_NrmPosGroup(cVector3f(0.75, -0.0,1)), ImGui_NrmSizeGroup(cVector2f(0.35, 0.1))))
		{
			ImGui_SetStateInt("MailSending",lSelectedMail);
			ImGui_SetStateBool("InitMailSend",true);
		}
	}
	
	if (bDialogDone)
	{
		if (asSendMailCallback == "")
		{
			bSent = true;
		}
		else if (cLux_GetCurrentMap().ScriptPrepare("bool " + asSendMailCallback + "(const tString &in asTitle)") )
		{
			cLux_GetCurrentMap().SetArgString(0, mail.msTitle);
			
			cLux_GetCurrentMap().ScriptExecute();
			
			bSent = cLux_GetCurrentMap().GetReturnBool();
		}
		ImGui_SetStateInt("MailSending",-1);
	}
	
	///////////////////////////////
	// Email has been sent
	if (bSent)
	{
		ImGui_SetStateBool(mail.msTitle+"_Sent", true);
		
		//cLux_AddTodoMessage("SOUND: Send Email!");
	}
	
	ImGui_SetTransCategory(sCurrentTransCat);
}

//-------------------------------------------------------

float _UrbanGui_MailInfoExtraWidth(const tString &in asLabel, float afCurrentExtraWidth, const cImGuiLabelData &in aLabelData)
{
	float fToReturn = afCurrentExtraWidth;
	
	tString sCurrentTransCat = ImGui_GetTransCategory();
	ImGui_SetTransCategory("UrbanGUI");
	float fLabelWidth = GetFontLengthW(aLabelData.mFont, 1, ImGui_Translate(asLabel));
	ImGui_SetTransCategory(sCurrentTransCat);
	
	//cLux_AddDebugMessage("fLabelWidth "+fLabelWidth);
	
	float fMaxWidth = 0.175*ImGui_GetCurrentGroupSize().x;
	
	if (fLabelWidth-fMaxWidth > afCurrentExtraWidth)
		fToReturn = fLabelWidth-fMaxWidth;
		
	return fToReturn;
}

//-------------------------------------------------------

void _UrbanGui_MailInfo(const tString &in asLabel, const tString &in asInfo, float afY, float afExtraWidth, const cImGuiLabelData &in aLabelData)
{	
	tString sCurrentTransCat = ImGui_GetTransCategory();
	ImGui_SetTransCategory("UrbanGUI");
	ImGui_DoLabelExt(asLabel, aLabelData, ImGui_NrmPosGroup(cVector3f(0, afY,1)), ImGui_NrmSizeGroup(cVector2f(1, -1)));
	ImGui_SetTransCategory(sCurrentTransCat);
	ImGui_DoLabelExt(asInfo, aLabelData, ImGui_NrmPosGroup(cVector3f(0.2, afY,1))+cVector3f(afExtraWidth, 0, 0), ImGui_NrmSizeGroup(cVector2f(1, -1)));
}

//-------------------------------------------------------

void UrbanGui_Preload()
{
	ImGui_PreloadImage("urban/computerscreens/urbanUI_wallpaper_paceRight.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_wallpaper_simon.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_button_default_off.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_button_default_on.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_buttonBlue_off.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_buttonBlue_on.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_buttonGreen_off.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_buttonGreen_on.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_buttonSend.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_frames_textfield_borderBottom.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_frames_textfield_borderLeft.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_frames_textfield_borderRight.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_frames_textfield_borderUp.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_frames_textfield_cornerBL.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_frames_textfield_cornerBR.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_frames_textfield_cornerUL.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_frames_textfield_cornerUR.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_frames_windows_borderBottom.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_frames_windows_borderLeft.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_frames_windows_borderRight.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_frames_windows_borderUp.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_frames_windows_cornerBL.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_frames_windows_cornerBR.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_frames_windows_cornerUL.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_frames_windows_cornerUR.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_iconRegular_dustbin.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_iconRegular_mailservice.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_iconRegular_system.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_iconSmall_dustbin.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_iconSmall_mailservice.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_iconSmall_Main.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_iconSmall_system.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_taskbar.tga");
	ImGui_PreloadImage("urban/computerscreens/urbanUI_wallpaper_paceLeft.tga");
	
	ImGui_PreloadImage("urban/scrollbar/urban_scrollbar_bar_vert");
	ImGui_PreloadImage("urban/scrollbar/urban_scrollbar_bar_infocus");
	ImGui_PreloadImage("urban/scrollbar/urban_scrollbar_button");
	ImGui_PreloadImage("urban/scrollbar/urban_scrollbar_button_infocus");

	ImGui_PreloadImage("urban/keypad/keypad_Selected.png");

	ImGui_PreloadImage("urban/brainscans/doctor_brainscan_1.png");
	ImGui_PreloadImage("urban/brainscans/doctor_brainscan_2.png");
	ImGui_PreloadImage("urban/brainscans/doctor_brainscan_3.png");

	ImGui_PreloadImage("urban/tv/tv_crash3_left.tga");
	ImGui_PreloadImage("urban/tv/tv_crash3_right.tga");
	ImGui_PreloadImage("urban/tv/tv_crash4_left.tga");
	ImGui_PreloadImage("urban/tv/tv_crash4_right.tga");
	ImGui_PreloadImage("urban/tv/tv_logo.tga");
	ImGui_PreloadImage("urban/tv/00_05_tv_no_disc.tga");
	ImGui_PreloadImage("urban/tv/tv_banderole_headline.tga");
	ImGui_PreloadImage("urban/tv/tv_banderole_headline_bigPartLeft.tga");
	ImGui_PreloadImage("urban/tv/tv_banderole_headline_bigPartRight.tga");
	ImGui_PreloadImage("urban/tv/tv_banderole_newsticker.tga");
	ImGui_PreloadImage("urban/tv/tv_crash1_left.tga");
	ImGui_PreloadImage("urban/tv/tv_crash1_right.tga");
	ImGui_PreloadImage("urban/tv/tv_crash2_left.tga");
	ImGui_PreloadImage("urban/tv/tv_crash2_right.tga");
}